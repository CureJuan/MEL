[{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/activities/activities.controller.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/activities/activities.controller.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ActivitiesService } from './activities.service';\nimport { AddAdditionalInfoDTO } from './dto/addAdditionalInfo.dto';\nimport { AddFinancialDetailsDTO } from './dto/addFinancialDetails.dto';\nimport { CreateActivityProposalDTO } from './dto/create-activityProposal.dto';\nimport { EditActivityDTO } from './dto/edit-activity.dto';\nimport { EditProposalDTO } from './dto/editProposal.dto';\nexport declare class ActivitiesController {\n    private readonly activitiesService;\n    constructor(activitiesService: ActivitiesService);\n    getStaticDataWorkplanActivity(): Promise<{\n        categories: (import(\"../common/staticSchema/activityCategories.schema\").ActivityCategories & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        thematicArea: (import(\"mongoose\").Document<unknown, any, import(\"../common/staticSchema/activityThematicAreas.schema\").ActivityThematicAreas> & import(\"../common/staticSchema/activityThematicAreas.schema\").ActivityThematicAreas & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        activityTypes: (import(\"mongoose\").Document<unknown, any, import(\"../common/staticSchema/activityTypes.schema\").ActivityTypes> & import(\"../common/staticSchema/activityTypes.schema\").ActivityTypes & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        modality: (import(\"mongoose\").Document<unknown, any, import(\"../common/staticSchema/modality.schema\").Modality> & import(\"../common/staticSchema/modality.schema\").Modality & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        activityStatus: (import(\"mongoose\").Document<unknown, any, import(\"../common/staticSchema/activityStatus.schema\").ActivityStatus> & import(\"../common/staticSchema/activityStatus.schema\").ActivityStatus & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        implementationQuarter: (import(\"mongoose\").Document<unknown, any, import(\"../common/staticSchema/activityTimeframe.schema\").ActivityTimeframe> & import(\"../common/staticSchema/activityTimeframe.schema\").ActivityTimeframe & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        countryList: (import(\"mongoose\").Document<unknown, any, import(\"../common/staticSchema/country.schema\").Country> & import(\"../common/staticSchema/country.schema\").Country & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        activityScopeList: (import(\"mongoose\").Document<unknown, any, import(\"../common/staticSchema/activityScope.schema\").ActivityScope> & import(\"../common/staticSchema/activityScope.schema\").ActivityScope & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        activityTargetGroupList: (import(\"mongoose\").Document<unknown, any, import(\"../common/staticSchema/activityTargetGroup.schema\").ActivityTargetGroup> & import(\"../common/staticSchema/activityTargetGroup.schema\").ActivityTargetGroup & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n    }>;\n    viewEachActivityDetails(activityId: string): Promise<{\n        activtyData: {};\n        indicatorData: any[];\n    }>;\n    updateActivity(activityId: string, editActivityDTO: EditActivityDTO, req: any): Promise<import(\"./schema/activities.schema\").Activities & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    getActivityListByYear(request: any, year: number): Promise<{\n        activityProposalArray: any[];\n    }>;\n    getActivityListByYearForCapnet(year: number): Promise<{\n        activityProposalArray: any[];\n    }>;\n    getActivityTracker(request: any, searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number, year: number): Promise<{\n        proposals: any[];\n        totalProposalCount: any;\n        totalPageCount: number;\n    }>;\n    getListOfProposals(request: any, searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number, year: number): Promise<{\n        proposals: any[];\n        totalProposalCount: any;\n        totalPageCount: number;\n    }>;\n    viewProposal(request: any, activityProposalId: string): Promise<{\n        proposal: any;\n        coordinationCostList: (import(\"./schema/coordinationCost.schema\").CoordinationCost & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        travelCostList: (import(\"./schema/travelCost.schema\").TravelCost & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        locationCostList: (import(\"./schema/locationCost.schema\").LocationCost & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        otherCostList: (import(\"./schema/otherCost.schema\").OtherCost & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n    }>;\n    createProposal(request: any, createProposal: CreateActivityProposalDTO): Promise<import(\"./schema/activityProposals.schema\").ActivityProposals & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    finalSaveProposal(activityProposalId: string, request: any): Promise<(import(\"./schema/activityProposals.schema\").ActivityProposals & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }) | {\n        isFirstTabFilled: boolean;\n        isSecondTabFilled: boolean;\n        isThirdTabFilled: boolean;\n    }>;\n    addFinancialDetails(request: any, activityProposalId: string, addFinancials: AddFinancialDetailsDTO): Promise<import(\"./schema/activityProposals.schema\").ActivityProposals & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    addAdditionalInfo(request: any, activityProposalId: string, additionalInfo: AddAdditionalInfoDTO): Promise<import(\"./schema/activityProposals.schema\").ActivityProposals & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    editProposal(request: any, activityProposalId: string, editProposal: EditProposalDTO): Promise<import(\"./schema/activityProposals.schema\").ActivityProposals & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    removeProposal(request: any, activityProposalId: string): Promise<import(\"./schema/activityProposals.schema\").ActivityProposals & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    getActivityCodeDropdownForOutputReport(request: any, year: number): Promise<(import(\"./schema/activityProposals.schema\").ActivityProposals & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    })[]>;\n    getActivityCodeDropdownForOutputReportForCapNet(request: any, year: number): Promise<any>;\n    getActivityCodeDropdownForOutcomeReport(request: any, year: number): Promise<any[]>;\n    getActivityCodeDropdownForOutcomeReportForCapNet(request: any, year: number): Promise<any[]>;\n    getActivityByCode(activityCode: string): Promise<import(\"./schema/activityProposals.schema\").ActivityProposals & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    viewAllNetworksProposals(searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number, year: number): Promise<{\n        proposals: any[];\n        totalProposalCount: number;\n        totalPageCount: number;\n    }>;\n    viewAllPartnersProposals(searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number, year: number): Promise<{\n        proposals: any[];\n        totalProposalCount: number;\n        totalPageCount: number;\n    }>;\n    individualProposalDownload(res: any, activityProposalId: string): Promise<void>;\n    multipleProposalDownload(res: any, year: number, request: any): Promise<void>;\n    generalUserMultipleProposalDownload(year: number, network: boolean, res: any): Promise<void>;\n    getCountOfProposalsByYearAndUserRole(year: number, request: any): Promise<{\n        proposalCount: number;\n    }>;\n    checkIfActivityAlreadyProposedByActivityId(activityId: string): Promise<void>;\n    removeCoordinationCost(coordinationCostId: string): Promise<import(\"./schema/coordinationCost.schema\").CoordinationCost & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    removeTravelCost(travelCostId: string): Promise<import(\"./schema/travelCost.schema\").TravelCost & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    removeLocationCost(locationCostId: string): Promise<import(\"./schema/locationCost.schema\").LocationCost & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    removeOtherCost(otherCostId: string): Promise<import(\"./schema/otherCost.schema\").OtherCost & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    deleteProposalFileFromAzure(filename: string, requestId: string, proposalId: any, request: any, additionalInfo: AddAdditionalInfoDTO): Promise<string>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/activities/activities.module.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/activities/activities.module.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class ActivitiesModule {\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/activities/activities.service.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/activities/activities.service.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Model, Types } from 'mongoose';\nimport { User } from '../users/schema/user.schema';\nimport { CreateActivityDTO } from './dto/create-activity.dto';\nimport { Activities } from './schema/activities.schema';\nimport { ActivityCategories } from '../common/staticSchema/activityCategories.schema';\nimport { ActivityStatus } from '../common/staticSchema/activityStatus.schema';\nimport { ActivityThematicAreas } from '../common/staticSchema/activityThematicAreas.schema';\nimport { ActivityTimeframe } from '../common/staticSchema/activityTimeframe.schema';\nimport { ActivityTypes } from '../common/staticSchema/activityTypes.schema';\nimport { Modality } from '../common/staticSchema/modality.schema';\nimport { MelpService } from '../melp/melp.service';\nimport { EditActivityDTO } from './dto/edit-activity.dto';\nimport { CreateActivityProposalDTO } from './dto/create-activityProposal.dto';\nimport { NetworkService } from '../networks/network.service';\nimport { UserService } from '../users/user.service';\nimport { PartnerService } from '../partners/partner.service';\nimport { ActivityProposals } from './schema/activityProposals.schema';\nimport { AddFinancialDetailsDTO } from './dto/addFinancialDetails.dto';\nimport { CoordinationCost } from './schema/coordinationCost.schema';\nimport { TravelCost } from './schema/travelCost.schema';\nimport { LocationCost } from './schema/locationCost.schema';\nimport { OtherCost } from './schema/otherCost.schema';\nimport { AddAdditionalInfoDTO } from './dto/addAdditionalInfo.dto';\nimport { EditProposalDTO } from './dto/editProposal.dto';\nimport { ActivityScope } from '../common/staticSchema/activityScope.schema';\nimport { Workplan } from '../workplans/schema/workplan.schema';\nimport { WorkplanActivities } from '../workplans/schema/workplan_activities.schema';\nimport { Workbook, Worksheet } from 'exceljs';\nimport { Country } from '../common/staticSchema/country.schema';\nimport { OutputReport } from '../reports/schema/outputReport.schema';\nimport { ImpactStory } from '../impactStory/schema/impactStory.schema';\nimport { ActivityTargetGroup } from '../common/staticSchema/activityTargetGroup.schema';\nimport { ConfigService } from '@nestjs/config';\nexport declare class ActivitiesService {\n    private activityModel;\n    private activityProposalModel;\n    private activityCategoriesModel;\n    private activityThemeModel;\n    private activityTypesModel;\n    private modalityModel;\n    private activityStatusModel;\n    private activityScopeModel;\n    private activityTimeframeModel;\n    private proposalsModel;\n    private coordinationModel;\n    private travelModel;\n    private locationModel;\n    private otherModel;\n    private workplanModel;\n    private workplanActivitiesModel;\n    private countryModel;\n    private outputReportModel;\n    private impactStoryModel;\n    private activityTargetGroupModel;\n    private readonly melpService;\n    private readonly networkService;\n    private readonly userService;\n    private readonly partnerService;\n    private readonly configService;\n    constructor(activityModel: Model<Activities>, activityProposalModel: Model<ActivityProposals>, activityCategoriesModel: Model<ActivityCategories>, activityThemeModel: Model<ActivityThematicAreas>, activityTypesModel: Model<ActivityTypes>, modalityModel: Model<Modality>, activityStatusModel: Model<ActivityStatus>, activityScopeModel: Model<ActivityScope>, activityTimeframeModel: Model<ActivityTimeframe>, proposalsModel: Model<ActivityProposals>, coordinationModel: Model<CoordinationCost>, travelModel: Model<TravelCost>, locationModel: Model<LocationCost>, otherModel: Model<OtherCost>, workplanModel: Model<Workplan>, workplanActivitiesModel: Model<WorkplanActivities>, countryModel: Model<Country>, outputReportModel: Model<OutputReport>, impactStoryModel: Model<ImpactStory>, activityTargetGroupModel: Model<ActivityTargetGroup>, melpService: MelpService, networkService: NetworkService, userService: UserService, partnerService: PartnerService, configService: ConfigService);\n    getStaticDataWorkplanActivity(): Promise<{\n        categories: (ActivityCategories & {\n            _id: Types.ObjectId;\n        })[];\n        thematicArea: (import(\"mongoose\").Document<unknown, any, ActivityThematicAreas> & ActivityThematicAreas & {\n            _id: Types.ObjectId;\n        })[];\n        activityTypes: (import(\"mongoose\").Document<unknown, any, ActivityTypes> & ActivityTypes & {\n            _id: Types.ObjectId;\n        })[];\n        modality: (import(\"mongoose\").Document<unknown, any, Modality> & Modality & {\n            _id: Types.ObjectId;\n        })[];\n        activityStatus: (import(\"mongoose\").Document<unknown, any, ActivityStatus> & ActivityStatus & {\n            _id: Types.ObjectId;\n        })[];\n        implementationQuarter: (import(\"mongoose\").Document<unknown, any, ActivityTimeframe> & ActivityTimeframe & {\n            _id: Types.ObjectId;\n        })[];\n        countryList: (import(\"mongoose\").Document<unknown, any, Country> & Country & {\n            _id: Types.ObjectId;\n        })[];\n        activityScopeList: (import(\"mongoose\").Document<unknown, any, ActivityScope> & ActivityScope & {\n            _id: Types.ObjectId;\n        })[];\n        activityTargetGroupList: (import(\"mongoose\").Document<unknown, any, ActivityTargetGroup> & ActivityTargetGroup & {\n            _id: Types.ObjectId;\n        })[];\n    }>;\n    getInstituteNameAndStatusId(user: any): Promise<{\n        instituteName: any;\n        statusId: any;\n    }>;\n    createActivity(user: User, createActivityDTO: CreateActivityDTO, workplanCode: string): Promise<Activities & {\n        _id: Types.ObjectId;\n    }>;\n    getActivityObject(activity: Activities): Promise<{}>;\n    getActivityById(id: any): Promise<{}>;\n    viewActivityDetails(activityId: string): Promise<{\n        activtyData: {};\n        indicatorData: any[];\n    }>;\n    updateActivityById(activityId: string, editActivityDTO: EditActivityDTO, user: any): Promise<Activities & {\n        _id: Types.ObjectId;\n    }>;\n    getCategoryById(categoryId: any): Promise<ActivityCategories & {\n        _id: Types.ObjectId;\n    }>;\n    getActivityThematicAreaById(thematicAreaId: any): Promise<import(\"mongoose\").Document<unknown, any, ActivityThematicAreas> & ActivityThematicAreas & {\n        _id: Types.ObjectId;\n    }>;\n    getTypeOfActivityById(activityTypeId: any): Promise<import(\"mongoose\").Document<unknown, any, ActivityTypes> & ActivityTypes & {\n        _id: Types.ObjectId;\n    }>;\n    getModalityById(modalityId: any): Promise<import(\"mongoose\").Document<unknown, any, Modality> & Modality & {\n        _id: Types.ObjectId;\n    }>;\n    getTimeframeById(timeframeId: any): Promise<import(\"mongoose\").Document<unknown, any, ActivityTimeframe> & ActivityTimeframe & {\n        _id: Types.ObjectId;\n    }>;\n    getTimeframeByName(name: string): Promise<import(\"mongoose\").Document<unknown, any, ActivityTimeframe> & ActivityTimeframe & {\n        _id: Types.ObjectId;\n    }>;\n    getActivityScopeById(scopeId: any): Promise<import(\"mongoose\").Document<unknown, any, ActivityScope> & ActivityScope & {\n        _id: Types.ObjectId;\n    }>;\n    getActivityStatusById(statusId: any): Promise<import(\"mongoose\").Document<unknown, any, ActivityStatus> & ActivityStatus & {\n        _id: Types.ObjectId;\n    }>;\n    getCountryNameById(countryId: any): Promise<string>;\n    getActivityListByYear(year: number, user: any): Promise<{\n        activityProposalArray: any[];\n    }>;\n    getActivityListByYearForCapnet(year: number): Promise<{\n        activityProposalArray: any[];\n    }>;\n    getProposalActivityById(proposalId: any): Promise<ActivityProposals & {\n        _id: Types.ObjectId;\n    }>;\n    checkIfProposalExistsByProposalIdAsPerUserRole(activityProposalId: string, networkId: any, partnerId: any): Promise<ActivityProposals & {\n        _id: Types.ObjectId;\n    }>;\n    checkIfProposalExists(activityProposalId: string): Promise<ActivityProposals & {\n        _id: Types.ObjectId;\n    }>;\n    updateApprovedCount(count: number, activityProposalId: string): Promise<ActivityProposals & {\n        _id: Types.ObjectId;\n    }>;\n    checkIfActivityExistsForProposal(activityId: any): Promise<boolean>;\n    checkIfActivityAlreadyProposed(activityId: any): Promise<void>;\n    checkForSceneWiseFields(createProposal: any): Promise<void>;\n    updateProposalStatus(activityProposalId: string, statusId: any): Promise<ActivityProposals & {\n        _id: Types.ObjectId;\n    }>;\n    finalSaveProposal(activityProposalId: string, user: any): Promise<(ActivityProposals & {\n        _id: Types.ObjectId;\n    }) | {\n        isFirstTabFilled: boolean;\n        isSecondTabFilled: boolean;\n        isThirdTabFilled: boolean;\n    }>;\n    setSubmittedAtTimeOfProposal(activityProposalId: string, submittedAt: Date): Promise<ActivityProposals & {\n        _id: Types.ObjectId;\n    }>;\n    setApprovedAtTimeOfProposal(activityProposalId: string, approvedAt: Date): Promise<ActivityProposals & {\n        _id: Types.ObjectId;\n    }>;\n    createProposal(user: any, createProposal: CreateActivityProposalDTO): Promise<ActivityProposals & {\n        _id: Types.ObjectId;\n    }>;\n    editProposal(activityProposalId: string, user: any, editProposal: EditProposalDTO): Promise<ActivityProposals & {\n        _id: Types.ObjectId;\n    }>;\n    addFinancialDetails(activityProposalId: string, user: any, addFinancials: AddFinancialDetailsDTO): Promise<ActivityProposals & {\n        _id: Types.ObjectId;\n    }>;\n    addAdditionalInfo(activityProposalId: string, user: any, addtionalInfo: AddAdditionalInfoDTO): Promise<ActivityProposals & {\n        _id: Types.ObjectId;\n    }>;\n    removeProposal(activityProposalId: string, user: any): Promise<ActivityProposals & {\n        _id: Types.ObjectId;\n    }>;\n    viewProposal(activityProposalId: string, user: any): Promise<{\n        proposal: any;\n        coordinationCostList: (CoordinationCost & {\n            _id: Types.ObjectId;\n        })[];\n        travelCostList: (TravelCost & {\n            _id: Types.ObjectId;\n        })[];\n        locationCostList: (LocationCost & {\n            _id: Types.ObjectId;\n        })[];\n        otherCostList: (OtherCost & {\n            _id: Types.ObjectId;\n        })[];\n    }>;\n    commonFunctionForSearchSort(searchKeyword: string, sortKey: string, sortDirection: number): Promise<{\n        regex: RegExp;\n        sortQuery: {};\n    }>;\n    getImplementationStatusForActivities(proposal: any, approvedStatusId: any, year: number): Promise<any>;\n    getActivityTracker(user: any, year: number, searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number): Promise<{\n        proposals: any[];\n        totalProposalCount: any;\n        totalPageCount: number;\n    }>;\n    getArrayOfProposalObject(proposalsList: any): Promise<any[]>;\n    getListOfProposals(user: any, searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number, year: number): Promise<{\n        proposals: any[];\n        totalProposalCount: any;\n        totalPageCount: number;\n    }>;\n    viewAllNetworksProposals(searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number, year: number): Promise<{\n        proposals: any[];\n        totalProposalCount: number;\n        totalPageCount: number;\n    }>;\n    viewAllPartnersProposals(searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number, year: number): Promise<{\n        proposals: any[];\n        totalProposalCount: number;\n        totalPageCount: number;\n    }>;\n    worksheetCreation(proposalSheet: Worksheet, coordinationCostSheet: Worksheet, travelCostSheet: Worksheet, locationCostSheet: Worksheet, otherCostSheet: Worksheet): Promise<void>;\n    downloadActivityProposal(res: any, activityProposalId: string, proposalSheet: Worksheet, proposalCount: number): Promise<void>;\n    downloadCoordinationCosts(coordinationCostSheet: Worksheet, coordinationCostCount: number, activityCode: string, coordinationCost: CoordinationCost): Promise<void>;\n    downloadTravelCosts(travelCostSheet: Worksheet, travelCostCount: number, activityCode: string, travelCost: TravelCost): Promise<void>;\n    downloadLocationCosts(locationCostSheet: Worksheet, locationCostCount: number, activityCode: string, locationCost: LocationCost): Promise<void>;\n    downloadOtherCosts(otherCostSheet: Worksheet, otherCostCount: number, activityCode: string, otherCost: OtherCost): Promise<void>;\n    commonFunctionForMultipleDownloads(proposalList: ActivityProposals[], workbook: Workbook, year: number, res: any): Promise<void>;\n    individualProposalDownload(res: any, activityProposalId: string): Promise<void>;\n    multipleProposalDownload(res: any, year: number, user: any): Promise<void>;\n    generalUserMultipleProposalDownload(res: any, year: number, isNetworkProposal: boolean): Promise<void>;\n    getActivityCodeDropdownForOutputReport(year: number, user: any): Promise<(ActivityProposals & {\n        _id: Types.ObjectId;\n    })[]>;\n    getActivityCodeDropdownForOutputReportForCapNet(year: number, user: any): Promise<any>;\n    getActivityCodeDropdownForOutcomeReport(year: number, user: any): Promise<any[]>;\n    getActivityCodeDropdownForOutcomeReportForCapNet(year: number, user: any): Promise<any[]>;\n    getActivityByCode(code: string): Promise<ActivityProposals & {\n        _id: Types.ObjectId;\n    }>;\n    getProposalStatusWiseCountByYear(year: number, networkId: any, partnerId: any): Promise<{\n        approvedCount: number;\n        deniedCount: number;\n        submittedCount: number;\n        infoRequestedCount: number;\n    }>;\n    getProposalAndWorkplanImplementationStatusWiseCount(year: number, networkId: any, partnerId: any): Promise<{\n        activityManagement: {\n            proposalProposedCount: number;\n            proposalActiveCount: number;\n            proposalCompletedCount: number;\n            proposalDelayedCount: number;\n        };\n        workplan: {\n            workplanProposedCount: number;\n            workplanActiveCount: number;\n            workplanCompletedCount: number;\n            workplanDelayedCount: number;\n        };\n    }>;\n    getCountOfProposalsByYearAndUserRole(year: number, user: any): Promise<{\n        proposalCount: number;\n    }>;\n    updateImplementationStatusOfAllProposals(): Promise<void>;\n    checkIfActivityAlreadyProposedByActivityId(activityId: string): Promise<void>;\n    checkIfProposalIsForWorkplanActivity(year: number, user: any): Promise<ActivityProposals & {\n        _id: Types.ObjectId;\n    }>;\n    deleteWorkplanActivity(activityId: any): Promise<Activities & {\n        _id: Types.ObjectId;\n    }>;\n    removeCoordinationCost(coordinationCostId: string): Promise<CoordinationCost & {\n        _id: Types.ObjectId;\n    }>;\n    removeTravelCost(travelCostId: string): Promise<TravelCost & {\n        _id: Types.ObjectId;\n    }>;\n    removeLocationCost(locationCostId: string): Promise<LocationCost & {\n        _id: Types.ObjectId;\n    }>;\n    removeOtherCost(otherCostId: string): Promise<OtherCost & {\n        _id: Types.ObjectId;\n    }>;\n    containerName: string;\n    getBlobClient(imageName: string): Promise<import(\"@azure/storage-blob\").BlockBlobClient>;\n    deleteProposalFileFromAzure(filename: string, requestId: string, proposalId: any, user: any, addtionalInfo: AddAdditionalInfoDTO): Promise<void>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/activities/dto/addAdditionalInfo.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/activities/dto/addAdditionalInfo.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FileUploadDTO } from '../../reports/schema/outputReport.schema';\nexport declare class AddAdditionalInfoDTO {\n    addtionalInfo: FileUploadDTO;\n    additionalComments: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/activities/dto/addFinancialDetails.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/activities/dto/addFinancialDetails.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CoordinationCostDTO } from './coordinationCost.dto';\nimport { LocationCostDTO } from './locationCost.dto';\nimport { OtherCostDTO } from './otherCost.dto';\nimport { TravelCostDTO } from './travelCost.dto';\nexport declare class AddFinancialDetailsDTO {\n    coordinationCosts: CoordinationCostDTO[];\n    travelCosts: TravelCostDTO[];\n    locationCosts: LocationCostDTO[];\n    otherCosts: OtherCostDTO[];\n    requireCapnetFinancialContribution: boolean;\n    totalBudgetForActivity: number;\n    totalCapnetContribution: number;\n    totalPartnerContribution: number;\n    totalInkindContribution: number;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/activities/dto/baseActivity.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/activities/dto/baseActivity.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Types } from 'mongoose';\nexport declare class BaseActivityDTO {\n    year: number;\n    activityCode: string;\n    activityName: string;\n    focalPersonName: string;\n    resultId: Types.ObjectId;\n    indicatorId: Types.ObjectId[];\n    thematicAreaId: Types.ObjectId;\n    otherThematicArea: string;\n    activityTypeId: Types.ObjectId;\n    activityScopeId: Types.ObjectId;\n    otherActivityScope: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/activities/dto/budget.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/activities/dto/budget.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class BudgetDTO {\n    requireCapnetFinancialContribution: boolean;\n    totalBudgetForActivity: number;\n    totalCapnetContribution: number;\n    totalPartnerContribution: number;\n    totalInkindContribution: number;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/activities/dto/coordinationCost.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/activities/dto/coordinationCost.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FinancialDTO } from './financial.dto';\nexport declare class CoordinationCostDTO extends FinancialDTO {\n    coordination: string;\n    coordinationCostId: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/activities/dto/costs.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/activities/dto/costs.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CoordinationCostDTO } from \"./coordinationCost.dto\";\nimport { LocationCostDTO } from \"./locationCost.dto\";\nimport { OtherCostDTO } from \"./otherCost.dto\";\nimport { TravelCostDTO } from \"./travelCost.dto\";\nexport declare class CostsDTO {\n    coordinationCosts: CoordinationCostDTO[];\n    travelCosts: TravelCostDTO[];\n    locationCosts: LocationCostDTO[];\n    otherCosts: OtherCostDTO[];\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/activities/dto/create-activity.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/activities/dto/create-activity.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Types } from 'mongoose';\nimport { BaseActivityDTO } from './baseActivity.dto';\nexport declare class CreateActivityDTO extends BaseActivityDTO {\n    virtualCampusCode: string;\n    indicatorsObjectArray: any[];\n    categoryId: Types.ObjectId;\n    contractReferenceNumber: string;\n    modalityId: Types.ObjectId;\n    implementationQuarter: string;\n    dateOfImplementation: Date;\n    activityStatusId: Types.ObjectId;\n    potentialNetworkCollaboration: string;\n    potentialGWPCollaboration: string;\n    contributionToExpectedOutput: string;\n    totalContractValue: string;\n    totalActivityExpenditure: string;\n    totalCapnetAllocation: string;\n    partnersInKindContribution: string;\n    partnerContributionForAct: string;\n    partnerContributionToCapnet: string;\n    vcActivityTypes: string;\n    potentialPartnersForCapnet: string;\n    potentialPartnersForGeneralUsers: string[];\n    comments: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/activities/dto/create-activityProposal.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/activities/dto/create-activityProposal.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Types } from 'mongoose';\nimport { ActivityTargetGroup, NumberOfCourseModule } from '../schema/activityProposals.schema';\nimport { BaseActivityDTO } from './baseActivity.dto';\nexport declare class CreateActivityProposalDTO extends BaseActivityDTO {\n    activityId: Types.ObjectId;\n    proposedForCurrentYearWorkplan: boolean;\n    proposedStartDate: Date;\n    proposedEndDate: Date;\n    language: string;\n    activityTargetGroups: ActivityTargetGroup[];\n    otherActivityTargetGroups: string;\n    mainPartners: string;\n    aboutActivity: string;\n    expectedOutputs: string;\n    addressSustainableWaterManagement: string;\n    wereVulnerableGroupsInvolved: boolean;\n    vulnerableGroupsDetail: string;\n    isSocialIssuesIncluded: boolean;\n    socialIssuesDetail: string;\n    numberOfParticipantsEstimated: number;\n    typeOfOnlineCourse: string;\n    numberOfCourseModule: NumberOfCourseModule[];\n    totalCourseLength: number;\n    isWebinarIncluded: boolean;\n    facilitators: string;\n    countryId: Types.ObjectId;\n    city: string;\n    activityTypeObj: any;\n    indicatorObj: any[];\n    otherActivityType: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/activities/dto/edit-activity.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/activities/dto/edit-activity.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CreateActivityDTO } from './create-activity.dto';\ndeclare const EditActivityDTO_base: import(\"@nestjs/common\").Type<Partial<CreateActivityDTO>>;\nexport declare class EditActivityDTO extends EditActivityDTO_base {\n}\nexport {};\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/activities/dto/editProposal.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/activities/dto/editProposal.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CreateActivityProposalDTO } from './create-activityProposal.dto';\ndeclare const EditProposalDTO_base: import(\"@nestjs/common\").Type<Partial<CreateActivityProposalDTO>>;\nexport declare class EditProposalDTO extends EditProposalDTO_base {\n}\nexport {};\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/activities/dto/financial.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/activities/dto/financial.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class FinancialDTO {\n    budget: number;\n    amountPerUnit: number;\n    numberOfUnits: number;\n    capnetFinancialFunding: number;\n    networkFinancialFunding: number;\n    partnerFinancialFunding: number;\n    networkInKindFunding: number;\n    partnerInKindFunding: number;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/activities/dto/locationCost.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/activities/dto/locationCost.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FinancialDTO } from './financial.dto';\nexport declare class LocationCostDTO extends FinancialDTO {\n    location: string;\n    locationCostId: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/activities/dto/otherCost.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/activities/dto/otherCost.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FinancialDTO } from './financial.dto';\nexport declare class OtherCostDTO extends FinancialDTO {\n    other: string;\n    otherCostId: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/activities/dto/sceneA.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/activities/dto/sceneA.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class SceneADTO {\n    expectedOutputs: string;\n    addressSustainableWaterManagement: string;\n    wereVulnerableGroupsInvolved: boolean;\n    vulnerableGroupsDetail: string;\n    isSocialIssuesIncluded: boolean;\n    socialIssuesDetail: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/activities/dto/sceneB.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/activities/dto/sceneB.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class Scene_B_DTO {\n    numberOfParticipantsEstimated: number;\n    typeOfOnlineCourse: string;\n    totalCourseLength: number;\n    isWebinarIncluded: boolean;\n    facilitators: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/activities/dto/sceneC.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/activities/dto/sceneC.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Types } from \"mongoose\";\nexport declare class Scene_C_DTO {\n    numberOfParticipantsEstimated: number;\n    countryId: Types.ObjectId;\n    city: string;\n    typeOfOnlineCourse: string;\n    totalCourseLength: number;\n    isWebinarIncluded: boolean;\n    facilitators: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/activities/dto/sceneD.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/activities/dto/sceneD.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class Scene_D_DTO {\n    numberOfParticipantsEstimated: number;\n    facilitators: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/activities/dto/sceneE.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/activities/dto/sceneE.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Types } from \"mongoose\";\nexport declare class Scene_E_DTO {\n    numberOfParticipantsEstimated: number;\n    countryId: Types.ObjectId;\n    city: string;\n    facilitators: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/activities/dto/travelCost.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/activities/dto/travelCost.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FinancialDTO } from './financial.dto';\nexport declare class TravelCostDTO extends FinancialDTO {\n    travel: string;\n    travelCostId: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/activities/schema/activities.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/activities/schema/activities.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Types } from 'mongoose';\nimport { BaseActivity } from './baseActivity.schema';\nexport declare class Activities extends BaseActivity {\n    activityId: string;\n    statusId: Types.ObjectId;\n    virtualCampusCode: string;\n    institutionName: string;\n    indicatorsObjectArray: any[];\n    categoryId: Types.ObjectId;\n    contractReferenceNumber: string;\n    modalityId: Types.ObjectId;\n    implementationQuarter: string;\n    dateOfImplementation: Date;\n    activityStatusId: Types.ObjectId;\n    potentialPartnersForCapnet: string;\n    potentialPartnersForGeneralUsers: string;\n    potentialNetworkCollaboration: string;\n    potentialGWPCollaboration: string;\n    contributionToExpectedOutput: string;\n    totalContractValue: string;\n    totalActivityExpenditure: string;\n    totalCapnetAllocation: string;\n    partnersInkindContribution: string;\n    partnerContributionForAct: string;\n    partnerContributionToCapnet: string;\n    vcActivityTypes: string;\n    isDeleted: boolean;\n    createdAt?: Date;\n    updatedAt?: Date;\n    comments: string;\n}\nexport declare const ActivitiesSchema: import(\"mongoose\").Schema<Activities, import(\"mongoose\").Model<Activities, any, any, any, any>, {}, {}, {}, {}, \"type\", Activities>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/activities/schema/activityCategories.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/activities/schema/activityCategories.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Base } from '../../common/schema/base.schema';\nexport declare class ActivityCategories extends Base {\n    categoryName: string;\n}\nexport declare const ActivityCategoriesSchema: import(\"mongoose\").Schema<ActivityCategories, import(\"mongoose\").Model<ActivityCategories, any, any, any, any>, {}, {}, {}, {}, \"type\", ActivityCategories>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/activities/schema/activityProposals.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/activities/schema/activityProposals.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Types } from 'mongoose';\nimport { BaseActivity } from './baseActivity.schema';\nimport { FileUploadDTO } from '../../reports/schema/outputReport.schema';\nexport declare class ActivityProposals extends BaseActivity {\n    activityProposalId: string;\n    activityId: Types.ObjectId;\n    proposedForCurrentYearWorkplan: boolean;\n    isDeleted: boolean;\n    approvedCount: number;\n    instituteName: string;\n    statusId: Types.ObjectId;\n    proposedStartDate: Date;\n    proposedEndDate: Date;\n    language: string;\n    activityTargetGroups: ActivityTargetGroup[];\n    otherActivityTargetGroups: string;\n    mainPartners: string;\n    aboutActivity: string;\n    expectedOutputs: string;\n    addressSustainableWaterManagement: string;\n    wereVulnerableGroupsInvolved: boolean;\n    vulnerableGroupsDetail: string;\n    isSocialIssuesIncluded: boolean;\n    socialIssuesDetail: string;\n    numberOfParticipantsEstimated: number;\n    typeOfOnlineCourse: string;\n    numberOfCourseModule: NumberOfCourseModule[];\n    totalCourseLength: number;\n    isWebinarIncluded: boolean;\n    facilitators: string;\n    countryId: Types.ObjectId;\n    city: string;\n    createdAt?: Date;\n    updatedAt?: Date;\n    submittedAt: Date;\n    approvedAt: Date;\n    requireCapnetFinancialContribution: boolean;\n    totalBudgetForActivity: number;\n    totalCapnetContribution: number;\n    totalPartnerContribution: number;\n    totalInkindContribution: number;\n    addtionalInfo: FileUploadDTO;\n    additionalComments: string;\n    isOutputReportSubmitted: boolean;\n    implementationStatus: string;\n    isFirstTabFilled: boolean;\n    isSecondTabFilled: boolean;\n    isThirdTabFilled: boolean;\n    activityTypeObj: any;\n    indicatorObj: any[];\n    otherActivityType: string;\n}\nexport declare const ActivityProposalsSchema: import(\"mongoose\").Schema<ActivityProposals, import(\"mongoose\").Model<ActivityProposals, any, any, any, any>, {}, {}, {}, {}, \"type\", ActivityProposals>;\nexport interface ActivityTargetGroup {\n    key: string;\n    value: boolean;\n}\nexport interface NumberOfCourseModule {\n    moduleName: string;\n    moduleNumber: number;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/activities/schema/activityScope.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/activities/schema/activityScope.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nexport declare class ActivityScope {\n    activityScopeName: string;\n}\nexport declare const ActivityScopeSchema: import(\"mongoose\").Schema<ActivityScope, import(\"mongoose\").Model<ActivityScope, any, any, any, any>, {}, {}, {}, {}, \"type\", ActivityScope>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/activities/schema/activityStatus.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/activities/schema/activityStatus.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nexport declare class ActivityStatus {\n    activityStatusName: string;\n}\nexport declare const ActivityStatusSchema: import(\"mongoose\").Schema<ActivityStatus, import(\"mongoose\").Model<ActivityStatus, any, any, any, any>, {}, {}, {}, {}, \"type\", ActivityStatus>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/activities/schema/activityThematicAreas.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/activities/schema/activityThematicAreas.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nexport declare class ActivityThematicAreas {\n    thematicAreaName: string;\n}\nexport declare const ActivityThematicAreasSchema: import(\"mongoose\").Schema<ActivityThematicAreas, import(\"mongoose\").Model<ActivityThematicAreas, any, any, any, any>, {}, {}, {}, {}, \"type\", ActivityThematicAreas>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/activities/schema/activityTimeframe.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/activities/schema/activityTimeframe.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nexport declare class ActivityTimeframe {\n    quarter: string;\n}\nexport declare const ActivityTimeframeSchema: import(\"mongoose\").Schema<ActivityTimeframe, import(\"mongoose\").Model<ActivityTimeframe, any, any, any, any>, {}, {}, {}, {}, \"type\", ActivityTimeframe>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/activities/schema/activityTypes.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/activities/schema/activityTypes.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nexport declare class ActivityTypes {\n    activityTypeName: string;\n}\nexport declare const ActivityTypesSchema: import(\"mongoose\").Schema<ActivityTypes, import(\"mongoose\").Model<ActivityTypes, any, any, any, any>, {}, {}, {}, {}, \"type\", ActivityTypes>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/activities/schema/baseActivity.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/activities/schema/baseActivity.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Types } from 'mongoose';\nimport { Base } from '../../common/schema/base.schema';\nexport declare class BaseActivity extends Base {\n    year: number;\n    activityCode: string;\n    activityName: string;\n    focalPersonName: string;\n    resultId: Types.ObjectId;\n    indicatorId: Types.ObjectId[];\n    networkId: Types.ObjectId;\n    partnerId: Types.ObjectId;\n    thematicAreaId: Types.ObjectId;\n    otherThematicArea: string;\n    activityTypeId: Types.ObjectId;\n    activityTypeName: string;\n    activityScopeId: Types.ObjectId;\n    otherActivityScope: string;\n    isDeleted: boolean;\n    createdAt?: Date;\n    updatedAt?: Date;\n    isOutputReportSubmitted: boolean;\n}\nexport declare const BaseActivitySchema: import(\"mongoose\").Schema<BaseActivity, import(\"mongoose\").Model<BaseActivity, any, any, any, any>, {}, {}, {}, {}, \"type\", BaseActivity>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/activities/schema/coordinationCost.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/activities/schema/coordinationCost.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Financial } from './financial.schema';\nexport declare class CoordinationCost extends Financial {\n    coordinationCostId: string;\n    coordination: string;\n}\nexport declare const CoordinationCostSchema: import(\"mongoose\").Schema<CoordinationCost, import(\"mongoose\").Model<CoordinationCost, any, any, any, any>, {}, {}, {}, {}, \"type\", CoordinationCost>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/activities/schema/financial.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/activities/schema/financial.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Types } from 'mongoose';\nimport { Base } from '../../common/schema/base.schema';\nexport declare class Financial extends Base {\n    activityProposalId: Types.ObjectId;\n    budget: number;\n    amountPerUnit: number;\n    numberOfUnits: number;\n    capnetFinancialFunding: number;\n    networkFinancialFunding: number;\n    partnerFinancialFunding: number;\n    networkInKindFunding: number;\n    partnerInKindFunding: number;\n    isDeleted: boolean;\n}\nexport declare const FinancialSchema: import(\"mongoose\").Schema<Financial, import(\"mongoose\").Model<Financial, any, any, any, any>, {}, {}, {}, {}, \"type\", Financial>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/activities/schema/financials.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/activities/schema/financials.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Types } from \"mongoose\";\nexport declare class Financial {\n    activityProposalId: Types.ObjectId;\n    budget: number;\n    amountPerUnit: number;\n    numberOfUnits: number;\n    capnetFinancialFunding: number;\n    networkFinancialFunding: number;\n    partnerFinancialFunding: number;\n    networkInKindFunding: number;\n    partnerInKindFunding: number;\n}\nexport declare const FinancialSchema: import(\"mongoose\").Schema<Financial, import(\"mongoose\").Model<Financial, any, any, any, any>, {}, {}, {}, {}, \"type\", Financial>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/activities/schema/locationCost.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/activities/schema/locationCost.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Financial } from './financial.schema';\nexport declare class LocationCost extends Financial {\n    locationCostId: string;\n    location: string;\n}\nexport declare const LocationCostSchema: import(\"mongoose\").Schema<LocationCost, import(\"mongoose\").Model<LocationCost, any, any, any, any>, {}, {}, {}, {}, \"type\", LocationCost>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/activities/schema/materialCost.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/activities/schema/materialCost.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/activities/schema/modality.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/activities/schema/modality.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nexport declare class Modality {\n    modalityName: string;\n}\nexport declare const ModalitySchema: import(\"mongoose\").Schema<Modality, import(\"mongoose\").Model<Modality, any, any, any, any>, {}, {}, {}, {}, \"type\", Modality>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/activities/schema/otherCost.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/activities/schema/otherCost.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Financial } from './financial.schema';\nexport declare class OtherCost extends Financial {\n    otherCostId: string;\n    other: string;\n}\nexport declare const OtherCostSchema: import(\"mongoose\").Schema<OtherCost, import(\"mongoose\").Model<OtherCost, any, any, any, any>, {}, {}, {}, {}, \"type\", OtherCost>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/activities/schema/travelCost.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/activities/schema/travelCost.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Financial } from './financial.schema';\nexport declare class TravelCost extends Financial {\n    travelCostId: string;\n    travel: string;\n}\nexport declare const TravelCostSchema: import(\"mongoose\").Schema<TravelCost, import(\"mongoose\").Model<TravelCost, any, any, any, any>, {}, {}, {}, {}, \"type\", TravelCost>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/app.controller.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/app.controller.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AppService } from './app.service';\nexport declare class AppController {\n    private readonly appService;\n    constructor(appService: AppService);\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/app.module.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/app.module.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class AppModule {\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/app.service.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/app.service.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class AppService {\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/approvalHierarchy/approvalHierarchy.controller.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/approvalHierarchy/approvalHierarchy.controller.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { ApprovalHierarchyService } from './approvalHierarchy.service';\nimport CreateHierarchyDto from './dto/createHierarchy.dto';\nimport SendForApprovalDto from './dto/sendForApproval.dto';\nimport DenyRequestDto from './dto/denyRequest.dto';\nexport declare class ApprovalHierarchyController {\n    private readonly approvalHierarchyService;\n    constructor(approvalHierarchyService: ApprovalHierarchyService);\n    addApprovers(approval: CreateHierarchyDto): Promise<{\n        message: string;\n    }>;\n    getApprovers(approvalType: string): Promise<any[]>;\n    sendForApproval(sendForApprovalDto: SendForApprovalDto, req: any): Promise<void>;\n    sendProposalForApproval(sendForApprovalDto: SendForApprovalDto, req: any): Promise<void>;\n    sendMelpForApproval(sendForApprovalDto: SendForApprovalDto, req: any): Promise<void>;\n    sendImpactStoryForApproval(request: any, sendForApprovalDto: SendForApprovalDto): Promise<void>;\n    sendOutputReportForApproval(request: any, sendForApprovalDto: SendForApprovalDto): Promise<void>;\n    sendOutcomeReportForApproval(request: any, sendForApprovalDto: SendForApprovalDto): Promise<void>;\n    sendProgressReportForApproval(request: any, sendForApprovalDto: SendForApprovalDto): Promise<{\n        message: string;\n    }>;\n    sendAnnualReportForApproval(request: any, sendForApprovalDto: SendForApprovalDto): Promise<{\n        message: string;\n    }>;\n    proposalRequestForInformation(requestForInformationDto: DenyRequestDto, request: any): Promise<void>;\n    melpRequestForInformation(requestForInformationDto: DenyRequestDto, request: any): Promise<void>;\n    workplanRequestForInformation(requestForInformationDto: DenyRequestDto, request: any): Promise<void>;\n    impactStoryRequestForInformation(requestForInformationDto: DenyRequestDto, request: any): Promise<void>;\n    outputReportRequestForInformation(requestForInformationDto: DenyRequestDto, request: any): Promise<void>;\n    outcomeReportRequestForInformation(requestForInformationDto: DenyRequestDto, request: any): Promise<void>;\n    progressReportRequestForInformation(requestForInformationDto: DenyRequestDto, request: any): Promise<void>;\n    annualReportRequestForInformation(requestForInformationDto: DenyRequestDto, request: any): Promise<void>;\n    denyProposal(denyRequestDto: DenyRequestDto, req: any): Promise<void>;\n    denyMelp(denyRequestDto: DenyRequestDto, req: any): Promise<void>;\n    denyWorkplan(denyRequestDto: DenyRequestDto, req: any): Promise<void>;\n    denyImpactStory(denyRequestDto: DenyRequestDto, req: any): Promise<void>;\n    denyOutputReport(denyRequestDto: DenyRequestDto, req: any): Promise<void>;\n    denyOutcomeReport(denyRequestDto: DenyRequestDto, req: any): Promise<void>;\n    denyProgressReport(denyRequestDto: DenyRequestDto, req: any): Promise<void>;\n    denyAnnualReport(denyRequestDto: DenyRequestDto, req: any): Promise<void>;\n    approveWorkplan(workplanId: string, req: any): Promise<import(\"../workplans/schema/workplan.schema\").Workplan & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    approveMelp(melpId: string, req: any): Promise<import(\"../melp/schema/melp.schema\").Melp & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    approveProposal(activityProposalId: string, req: any): Promise<import(\"../activities/schema/activityProposals.schema\").ActivityProposals & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    approveImpactStory(impactStoryId: string, req: any): Promise<void>;\n    approveOutputReport(reportId: string, req: any): Promise<import(\"../reports/schema/outputReport.schema\").OutputReport & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    approveProgressReport(progressReportId: string, req: any): Promise<import(\"../networkReporting/schema/progressReport.schema\").ProgressReport & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    approveOutcomeReport(reportId: string, req: any): Promise<import(\"../reports/schema/outcomeReport.schema\").OutcomeReport & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    approveAnnualReport(annualReportId: string, req: any): Promise<import(\"../networkReporting/schema/annualReport.schema\").AnnualReport & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/approvalHierarchy/approvalHierarchy.module.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/approvalHierarchy/approvalHierarchy.module.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class ApprovalHierarchyModule {\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/approvalHierarchy/approvalHierarchy.service.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/approvalHierarchy/approvalHierarchy.service.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Model, Types } from 'mongoose';\nimport { MailService } from '../mail/mail.service';\nimport { WorkplanService } from '../workplans/workplan.service';\nimport { UserService } from '../users/user.service';\nimport CreateHierarchyDto from './dto/createHierarchy.dto';\nimport SendForApprovalDto from './dto/sendForApproval.dto';\nimport { ApprovalHierarchy } from './schema/approvalHierarchy.schema';\nimport { ApprovalType } from './schema/approvalTypes.schema';\nimport { MelpService } from '../melp/melp.service';\nimport { User } from '../users/schema/user.schema';\nimport { ApprovalRequests } from './schema/approvalRequests.schema';\nimport { ApprovalDetails } from './schema/approvalDetails.schema';\nimport DenyRequestDto from './dto/denyRequest.dto';\nimport { WorkplanActivities } from '../workplans/schema/workplan_activities.schema';\nimport { Activities } from '../activities/schema/activities.schema';\nimport { ActivitiesService } from '../activities/activities.service';\nimport { ImpactStoryService } from '../impactStory/impactStory.service';\nimport { ReportsService } from '../reports/reports.service';\nimport { NetworkReportingService } from '../networkReporting/networkReporting.service';\nexport declare class ApprovalHierarchyService {\n    private readonly approvalTypeModel;\n    private readonly approvalHierarchyModel;\n    private readonly approvalRequestsModel;\n    private readonly approvalDetailsModel;\n    private workplanActivitiesModel;\n    private activityModel;\n    private readonly userService;\n    private readonly mailService;\n    private readonly workplanService;\n    private readonly melpService;\n    private readonly activityService;\n    private readonly impactStoryService;\n    private readonly reportsService;\n    private readonly networkReporting;\n    constructor(approvalTypeModel: Model<ApprovalType>, approvalHierarchyModel: Model<ApprovalHierarchy>, approvalRequestsModel: Model<ApprovalRequests>, approvalDetailsModel: Model<ApprovalDetails>, workplanActivitiesModel: Model<WorkplanActivities>, activityModel: Model<Activities>, userService: UserService, mailService: MailService, workplanService: WorkplanService, melpService: MelpService, activityService: ActivitiesService, impactStoryService: ImpactStoryService, reportsService: ReportsService, networkReporting: NetworkReportingService);\n    getApprovalTypeId(typeName: string): Promise<any>;\n    addApprovers(approvalHierarchy: CreateHierarchyDto): Promise<{\n        message: string;\n    }>;\n    getApprovers(approvalType: string): Promise<any[]>;\n    updateApprovalDetails(approvalRequestId: any, approvalHierarchyId: any): Promise<void>;\n    commonFunctionForSendingMailOfInfoRequestedAndDenial(hierarchyData: any, entityCode: string, approvalType: string, reasonDto: DenyRequestDto, isDenialMail: boolean, user: any): Promise<void>;\n    proposalRequestForInformation(requestForInformationDto: DenyRequestDto, user: User): Promise<void>;\n    melpRequestForInformation(requestForInformationDto: DenyRequestDto, user: User): Promise<void>;\n    workplanRequestForInformation(requestForInformationDto: DenyRequestDto, user: User): Promise<void>;\n    impactStoryRequestForInformation(requestForInformationDto: DenyRequestDto, user: User): Promise<void>;\n    outputReportRequestForInformation(requestForInformationDto: DenyRequestDto, user: User): Promise<void>;\n    outcomeReportRequestForInformation(requestForInformationDto: DenyRequestDto, user: User): Promise<void>;\n    progressReportRequestForInformation(requestForInformationDto: DenyRequestDto, user: User): Promise<void>;\n    annualReportRequestForInformation(requestForInformationDto: DenyRequestDto, user: User): Promise<void>;\n    commonFunctionForSendingMailOfSendForApproval(approvalTypeId: any, entityToBeApprovedId: string, entityCode: string, approvalType: string, user: any): Promise<ApprovalRequests & {\n        _id: Types.ObjectId;\n    }>;\n    commonFunctionForSendingMailOfResubmitted(approvedCount: number, approvalTypeId: any, entityCode: string, approvalType: string, resubmittedStatusId: Types.ObjectId, updatedRequest: any, user: any): Promise<void>;\n    sendProposalForApproval(sendForApprovalDto: SendForApprovalDto, user: User): Promise<void>;\n    sendMelpForApproval(sendForApprovalDto: SendForApprovalDto, user: User): Promise<void>;\n    sendWorkplanForApproval(sendForApprovalDto: SendForApprovalDto, user: User): Promise<void>;\n    sendImpactStoryForApproval(sendForApprovalDto: SendForApprovalDto, user: User): Promise<void>;\n    sendOutputReportForApproval(sendForApprovalDto: SendForApprovalDto, user: User): Promise<void>;\n    sendProgressReportForApproval(sendForApprovalDto: SendForApprovalDto, user: User): Promise<{\n        message: string;\n    }>;\n    sendAnnualReportForApproval(sendForApprovalDto: SendForApprovalDto, user: User): Promise<{\n        message: string;\n    }>;\n    sendOutcomeReportForApproval(sendForApprovalDto: SendForApprovalDto, user: User): Promise<void>;\n    denyProposal(denyRequestDto: DenyRequestDto, user: User): Promise<void>;\n    denyMelp(denyRequestDto: DenyRequestDto, user: User): Promise<void>;\n    denyWorkplan(denyRequestDto: DenyRequestDto, user: User): Promise<void>;\n    denyImpactStory(denyRequestDto: DenyRequestDto, user: User): Promise<void>;\n    denyOutputReport(denyRequestDto: DenyRequestDto, user: User): Promise<void>;\n    denyOutcomeReport(denyRequestDto: DenyRequestDto, user: User): Promise<void>;\n    denyProgressReport(denyRequestDto: DenyRequestDto, user: User): Promise<void>;\n    denyAnnualReport(denyRequestDto: DenyRequestDto, user: User): Promise<void>;\n    getApprovalRequestAndApprovers(approvalTypeId: any, entityToBeApprovedId: string): Promise<{\n        foundApprovalRequest: ApprovalRequests & {\n            _id: Types.ObjectId;\n        };\n        foundApprovers: (ApprovalHierarchy & {\n            _id: Types.ObjectId;\n        })[];\n    }>;\n    updateApprovalDetailsRecord(foundApprovalRequest: any): Promise<ApprovalDetails & {\n        _id: Types.ObjectId;\n    }>;\n    commonFunctionForSendingApprovalMail(foundUser: User, approvalHierarchyId: any, updatedRecord: ApprovalDetails, receivedForApprovalId: any, foundApprovalRequest: ApprovalRequests, entityCode: string, approvalType: string): Promise<Date>;\n    commonFunctionToCheckPerviousLevelApproval(foundApprovalRequest: any, foundApprovers: any, temp: any, approvedStatusId: any): Promise<void>;\n    approveWorkplan(workplanId: string, user: any): Promise<import(\"../workplans/schema/workplan.schema\").Workplan & {\n        _id: Types.ObjectId;\n    }>;\n    approveMelp(melpId: string, user: any): Promise<import(\"../melp/schema/melp.schema\").Melp & {\n        _id: Types.ObjectId;\n    }>;\n    approveProposal(activityProposalId: string, user: any): Promise<import(\"../activities/schema/activityProposals.schema\").ActivityProposals & {\n        _id: Types.ObjectId;\n    }>;\n    approveImpactStory(impactStoryId: string, user: any): Promise<void>;\n    approveOutputReport(reportId: string, user: any): Promise<import(\"../reports/schema/outputReport.schema\").OutputReport & {\n        _id: Types.ObjectId;\n    }>;\n    approveOutcomeReport(reportId: string, user: any): Promise<import(\"../reports/schema/outcomeReport.schema\").OutcomeReport & {\n        _id: Types.ObjectId;\n    }>;\n    approveProgressReport(progressReportId: string, user: any): Promise<import(\"../networkReporting/schema/progressReport.schema\").ProgressReport & {\n        _id: Types.ObjectId;\n    }>;\n    approveAnnualReport(annualReportId: string, user: any): Promise<import(\"../networkReporting/schema/annualReport.schema\").AnnualReport & {\n        _id: Types.ObjectId;\n    }>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/approvalHierarchy/dto/craeteHierarchy.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/approvalHierarchy/dto/craeteHierarchy.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/approvalHierarchy/dto/createHierarchy.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/approvalHierarchy/dto/createHierarchy.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class CreateHierarchyDto {\n    approvalTypeName: string;\n    createHierarchy: HierarchyLevel[];\n}\nexport default CreateHierarchyDto;\ninterface HierarchyLevel {\n    hierarchyLevel: number;\n    userId: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/approvalHierarchy/dto/denyRequest.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/approvalHierarchy/dto/denyRequest.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class DenyRequestDto {\n    approvalTypeName: string;\n    entityToBeApprovedId: string;\n    reason: string;\n}\nexport default DenyRequestDto;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/approvalHierarchy/dto/sendForApproval.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/approvalHierarchy/dto/sendForApproval.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class SendForApprovalDto {\n    approvalTypeName: string;\n    entityToBeApprovedId: string;\n}\nexport default SendForApprovalDto;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/approvalHierarchy/enum/approvalTypes.enum.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/approvalHierarchy/enum/approvalTypes.enum.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare enum ApprovalTypeEnum {\n    MELP = \"melp\",\n    PROPOSAL = \"proposal\",\n    WORKPLAN = \"workplan\",\n    REPORTS = \"activityReports\",\n    IMPACTSTORIES = \"impactStories\"\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/approvalHierarchy/schema/approvalDetails.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/approvalHierarchy/schema/approvalDetails.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Types } from 'mongoose';\nimport { Base } from '../../common/schema/base.schema';\nexport declare class ApprovalDetails extends Base {\n    appprovalDetailsId: string;\n    approvalRequestId: Types.ObjectId;\n    approvalHierarchyId: Types.ObjectId;\n    statusId: Types.ObjectId;\n    requestReceivedDate: Date;\n    actiontakenDate: Date;\n}\nexport declare const ApprovalDetailsSchema: import(\"mongoose\").Schema<ApprovalDetails, import(\"mongoose\").Model<ApprovalDetails, any, any, any, any>, {}, {}, {}, {}, \"type\", ApprovalDetails>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/approvalHierarchy/schema/approvalHierarchy.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/approvalHierarchy/schema/approvalHierarchy.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Document, Types } from 'mongoose';\nexport declare class ApprovalHierarchy extends Document {\n    approvalHierarchyId: string;\n    hierarchyLevel: number;\n    userId: Types.ObjectId;\n    approvalTypeId: Types.ObjectId;\n}\nexport declare const ApprovalHierarchySchema: import(\"mongoose\").Schema<ApprovalHierarchy, import(\"mongoose\").Model<ApprovalHierarchy, any, any, any, any>, {}, {}, {}, {}, \"type\", ApprovalHierarchy>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/approvalHierarchy/schema/approvalRequests.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/approvalHierarchy/schema/approvalRequests.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Types } from 'mongoose';\nimport { Base } from '../../common/schema/base.schema';\nexport declare class ApprovalRequests extends Base {\n    approvalRequestId: string;\n    approvalTypeId: Types.ObjectId;\n    requestedBy: Types.ObjectId;\n    requestedDate: Date;\n    entityToBeApprovedId: string;\n}\nexport declare const ApprovalRequestsSchema: import(\"mongoose\").Schema<ApprovalRequests, import(\"mongoose\").Model<ApprovalRequests, any, any, any, any>, {}, {}, {}, {}, \"type\", ApprovalRequests>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/approvalHierarchy/schema/approvalTypes.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/approvalHierarchy/schema/approvalTypes.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Document } from 'mongoose';\nimport { ApprovalTypeEnum } from '../enum/approvalTypes.enum';\nexport declare class ApprovalType extends Document {\n    typeName: ApprovalTypeEnum;\n}\nexport declare const ApprovalTypeSchema: import(\"mongoose\").Schema<ApprovalType, import(\"mongoose\").Model<ApprovalType, any, any, any, any>, {}, {}, {}, {}, \"type\", ApprovalType>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/auth/auth.controller.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/auth/auth.controller.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AuthService } from './auth.service';\nimport RequestWithUser, { UserService } from '../users/user.service';\nimport { MailService } from '../mail/mail.service';\nimport { CapnetUserDTO } from '../users/dto/create-capnetUser.dto';\nimport { User } from '../users/schema/user.schema';\nimport { PartnerUserDTO } from '../users/dto/create-partnerUser.dto';\nimport { NetworkUserDTO } from '../users/dto/create-networkUser.dto';\nimport ConfirmEmailDto from '../mail/dto/confirmEmail.dto';\nimport SetPasswordDto from './dto/setPassword.dto';\nimport { Response as res } from 'express';\nimport LogInDto from './dto/logIn.dto';\nimport { NetworkService } from '../networks/network.service';\nimport { PartnerService } from '../partners/partner.service';\nexport declare class AuthController {\n    private readonly userService;\n    private readonly emailConfirmationService;\n    private readonly authService;\n    private readonly networkService;\n    private readonly partnerService;\n    constructor(userService: UserService, emailConfirmationService: MailService, authService: AuthService, networkService: NetworkService, partnerService: PartnerService);\n    registerCapnetSecretariatUser(capnetUser: CapnetUserDTO): Promise<User>;\n    registerCapnetGuestUser(guestUser: CapnetUserDTO): Promise<User>;\n    registerCapnetPartnerUser(partnerUser: PartnerUserDTO): Promise<User>;\n    registerCapnetNetworkUser(networkUser: NetworkUserDTO): Promise<User & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    regenerateLinkOnTokenExpiration(user: any): Promise<void>;\n    confirm(confirmationData: ConfirmEmailDto): Promise<User & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    setupPassword(setPasswordDto: SetPasswordDto): Promise<User & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    setupPasswordAfterForgot(setPasswordDto: SetPasswordDto): Promise<User & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    forgetPassword(data: any): Promise<void>;\n    setupNewPassword(setPasswordDto: SetPasswordDto): Promise<User & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    getAbbreviation(user: any): Promise<any>;\n    logIn(userDetail: LogInDto, request: RequestWithUser, response: res): Promise<{\n        message: string;\n        statusCode: number;\n        userData: User;\n    }>;\n    logOut(request: RequestWithUser, response: res): Promise<res<any, Record<string, any>>>;\n    authenticate(request: RequestWithUser): Promise<User>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/auth/auth.module.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/auth/auth.module.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class AuthModule {\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/auth/auth.service.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/auth/auth.service.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { UserService } from '../users/user.service';\nexport declare class AuthService {\n    private readonly userService;\n    private readonly jwtService;\n    private readonly configService;\n    constructor(userService: UserService, jwtService: JwtService, configService: ConfigService);\n    getCookieWithJwtToken(userId: string): string;\n    setupPassword(email: string, password: string): Promise<import(\"../users/schema/user.schema\").User & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    setupPasswordAfterForgot(email: string, password: string): Promise<import(\"../users/schema/user.schema\").User & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    setupNewPassword(email: string, password: string): Promise<import(\"../users/schema/user.schema\").User & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    getAuthenticatedUser(email: string, plainTextPassword: string): Promise<import(\"../users/schema/user.schema\").User & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    private verifyPassword;\n    getCookieForLogOut(): string;\n}\nexport interface TokenPayload {\n    userId: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/auth/constants.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/auth/constants.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare const jwtConstants: {\n    secret: string;\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/auth/dto/logIn.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/auth/dto/logIn.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class LogInDto {\n    email: string;\n    password: string;\n}\nexport default LogInDto;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/auth/dto/setPassword.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/auth/dto/setPassword.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class SetPasswordDto {\n    token: string;\n    password: string;\n}\nexport default SetPasswordDto;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/auth/guards/jwt-auth.guard.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/auth/guards/jwt-auth.guard.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"declare const JwtAuthGuard_base: import(\"@nestjs/passport\").Type<import(\"@nestjs/passport\").IAuthGuard>;\nexport declare class JwtAuthGuard extends JwtAuthGuard_base {\n}\nexport {};\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/auth/guards/localAuthentication.guard.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/auth/guards/localAuthentication.guard.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"declare const LocalAuthenticationGuard_base: import(\"@nestjs/passport\").Type<import(\"@nestjs/passport\").IAuthGuard>;\nexport declare class LocalAuthenticationGuard extends LocalAuthenticationGuard_base {\n}\nexport {};\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/auth/guards/roles.guard.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/auth/guards/roles.guard.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/auth/jwt.strategy.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/auth/jwt.strategy.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { UserService } from '../users/user.service';\nimport { TokenPayload } from './auth.service';\ndeclare const JwtStrategy_base: new (...args: any[]) => Strategy;\nexport declare class JwtStrategy extends JwtStrategy_base {\n    private readonly configService;\n    private readonly userService;\n    constructor(configService: ConfigService, userService: UserService);\n    validate(payload: TokenPayload): Promise<import(\"../users/schema/user.schema\").User & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n}\nexport {};\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/auth/local.strategy.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/auth/local.strategy.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AuthService } from './auth.service';\nimport { User } from '../users/schema/user.schema';\ndeclare const LocalStrategy_base: new (...args: any[]) => any;\nexport declare class LocalStrategy extends LocalStrategy_base {\n    private authService;\n    constructor(authService: AuthService);\n    validate(email: string, password: string): Promise<User>;\n}\nexport {};\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/controller/invoice.controller.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/controller/invoice.controller.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/decorators/roles.decorator.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/decorators/roles.decorator.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Role } from '../../users/enum/role.enum';\nexport declare const Roles: (...roles: Role[]) => import(\"@nestjs/common\").CustomDecorator<string>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/enum/activityType.enum.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/enum/activityType.enum.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare enum TypeOfActivity {\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/enum/capnet.enum.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/enum/capnet.enum.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare enum CapnetEnum {\n    CAPNET = \"CAP-NET\"\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/enum/implementationStatus.enum.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/enum/implementationStatus.enum.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare enum ImplementationStatusEnum {\n    ACTIVE = \"Active\",\n    DELAYED = \"Delayed\",\n    COMPLETED = \"Completed\",\n    PROPOSED = \"Proposed\"\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/enum/status.enum.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/enum/status.enum.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare enum StatusEnum {\n    REGISTERED = \"Registered\",\n    VERIFIED = \"Verified\",\n    APPROVED = \"Approved\",\n    DENIED = \"Denied\",\n    IN_PROGRESS = \"In Progress\",\n    SUBMITTED = \"Submitted\",\n    RECEIVED_FOR_APPROVAL = \"Received for Approval\",\n    INFORMATION_REQUESTED = \"Information Requested\",\n    UNPUBLISHED = \"Unpublished\",\n    RESUBMITTED = \"Resubmitted\",\n    PUBLISHED = \"Published\"\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/enum/typeOfActivity.enum.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/enum/typeOfActivity.enum.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare enum TypeOfActivityeNUM {\n    OT_VC = \"Online Training (Virtual Campus)\",\n    OT_OTHER = \"Online Training (Other)\",\n    BT_VC = \"Blended Training (Virtual Campus)\",\n    BT_OTHER = \"Blended Training (Other)\",\n    ONSITE = \"Onsite Training\",\n    TOT_VC = \"Online TOT (Virtual Campus)\",\n    TOT_OTHER = \"Online TOT (Other)\",\n    BTOT_VC = \"Blended TOT (Virtual Campus)\",\n    BTOT_OTHER = \"Blended TOT (Other)\",\n    TOT = \"Onsite TOT\",\n    WEBINAR = \"Webinar\",\n    CS = \"Case Study\",\n    MATERIAL = \"Material Dev/Rev\"\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/schema/activityLog.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/schema/activityLog.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Document, Types } from 'mongoose';\nexport declare class ActivityLog extends Document {\n    userId: Types.ObjectId;\n    name: string;\n    networkId: Types.ObjectId;\n    partnerId: Types.ObjectId;\n    instituteName: string;\n    description: string;\n    timeStamp: Date;\n}\nexport declare const ActivityLogSchema: import(\"mongoose\").Schema<ActivityLog, import(\"mongoose\").Model<ActivityLog, any, any, any, any>, {}, {}, {}, {}, \"type\", ActivityLog>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/schema/base.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/schema/base.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Document, Types } from 'mongoose';\nexport declare class Base extends Document {\n    createdBy: Types.ObjectId;\n    updatedBy: Types.ObjectId;\n    createdAt?: Date;\n    updatedAt?: Date;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/schema/configuration.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/schema/configuration.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Document } from 'mongoose';\nexport declare class Configuration extends Document {\n    configurationName: string;\n    configurationValue: number;\n}\nexport declare const ConfigurationSchema: import(\"mongoose\").Schema<Configuration, import(\"mongoose\").Model<Configuration, any, any, any, any>, {}, {}, {}, {}, \"type\", Configuration>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/schema/invoice.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/schema/invoice.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Types } from 'mongoose';\nimport { Base } from './base.schema';\nexport declare class Invoice extends Base {\n    invoiceNumber: string;\n    name: string;\n    address: string;\n    hostInstitute: string;\n    typeOfPayment: string;\n    paymentTerms: string;\n    dueDate: Date;\n    accountName: string;\n    accountNumber: number;\n    bankAddress: string;\n    swiftCode: string;\n    emailAddress: string;\n    outputReportId: Types.ObjectId;\n    outcomeReportId: Types.ObjectId;\n    progressReportId: Types.ObjectId;\n    annualReportId: Types.ObjectId;\n    networkId: Types.ObjectId;\n    partnerId: Types.ObjectId;\n    isDeleted: boolean;\n    createdAt?: Date;\n    updatedAt?: Date;\n    invoiceTo: string;\n    priceAndQtyArray: PriceAndQty[];\n    totalOfUnitPrice: string;\n    totalOfLineTotal: string;\n}\nexport declare const InvoiceSchema: import(\"mongoose\").Schema<Invoice, import(\"mongoose\").Model<Invoice, any, any, any, any>, {}, {}, {}, {}, \"type\", Invoice>;\nexport interface PriceAndQty {\n    qty: number;\n    description: string;\n    unitPrice: number;\n    lineTotal: number;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/schema/status.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/schema/status.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Document } from 'mongoose';\nexport declare class Status extends Document {\n    statusName: string;\n}\nexport declare const StatusSchema: import(\"mongoose\").Schema<Status, import(\"mongoose\").Model<Status, any, any, any, any>, {}, {}, {}, {}, \"type\", Status>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/schemas/base.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/schemas/base.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Document } from 'mongoose';\nexport declare class Base extends Document {\n    createdBy: string;\n    updatedBy: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/schemas/config.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/schemas/config.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indizes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Document } from 'mongoose';\nexport declare type ConfigurationDocument = Configuration & Document;\nexport declare class Configuration {\n    configurationName: string;\n    configurationValue: number;\n    createdBy: string;\n    updatedBy: string;\n}\nexport declare const ConfigurationSchema: import(\"mongoose\").Schema<Configuration, import(\"mongoose\").Model<Configuration, any, any, any, any>, {}, {}, any, {}, \"type\", Configuration>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/schemas/configuration.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/schemas/configuration.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Document } from 'mongoose';\nexport declare class Configuration extends Document {\n    configurationName: string;\n    configurationValue: number;\n}\nexport declare const ConfigurationSchema: import(\"mongoose\").Schema<Configuration, import(\"mongoose\").Model<Configuration, any, any, any, any>, {}, {}, {}, {}, \"type\", Configuration>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/service/invoice.service.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/service/invoice.service.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Model } from 'mongoose';\nimport { Invoice } from '../../networkReporting/schema/invoice.schema';\nexport declare class InvoiceService {\n    private invoiceModel;\n    constructor(invoiceModel: Model<Invoice>);\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/staticSchema/activityCategories.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/staticSchema/activityCategories.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Base } from '../schema/base.schema';\nexport declare class ActivityCategories extends Base {\n    categoryName: string;\n}\nexport declare const ActivityCategoriesSchema: import(\"mongoose\").Schema<ActivityCategories, import(\"mongoose\").Model<ActivityCategories, any, any, any, any>, {}, {}, {}, {}, \"type\", ActivityCategories>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/staticSchema/activityScope.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/staticSchema/activityScope.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nexport declare class ActivityScope {\n    activityScopeName: string;\n}\nexport declare const ActivityScopeSchema: import(\"mongoose\").Schema<ActivityScope, import(\"mongoose\").Model<ActivityScope, any, any, any, any>, {}, {}, {}, {}, \"type\", ActivityScope>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/staticSchema/activityStatus.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/staticSchema/activityStatus.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nexport declare class ActivityStatus {\n    activityStatusName: string;\n}\nexport declare const ActivityStatusSchema: import(\"mongoose\").Schema<ActivityStatus, import(\"mongoose\").Model<ActivityStatus, any, any, any, any>, {}, {}, {}, {}, \"type\", ActivityStatus>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/staticSchema/activityTargetGroup.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/staticSchema/activityTargetGroup.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nexport declare class ActivityTargetGroup {\n    targetGroup: string;\n}\nexport declare const ActivityTargetGroupSchema: import(\"mongoose\").Schema<ActivityTargetGroup, import(\"mongoose\").Model<ActivityTargetGroup, any, any, any, any>, {}, {}, {}, {}, \"type\", ActivityTargetGroup>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/staticSchema/activityThematicAreas.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/staticSchema/activityThematicAreas.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nexport declare class ActivityThematicAreas {\n    thematicAreaName: string;\n}\nexport declare const ActivityThematicAreasSchema: import(\"mongoose\").Schema<ActivityThematicAreas, import(\"mongoose\").Model<ActivityThematicAreas, any, any, any, any>, {}, {}, {}, {}, \"type\", ActivityThematicAreas>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/staticSchema/activityTimeframe.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/staticSchema/activityTimeframe.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nexport declare class ActivityTimeframe {\n    quarter: string;\n}\nexport declare const ActivityTimeframeSchema: import(\"mongoose\").Schema<ActivityTimeframe, import(\"mongoose\").Model<ActivityTimeframe, any, any, any, any>, {}, {}, {}, {}, \"type\", ActivityTimeframe>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/staticSchema/activityTypes.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/staticSchema/activityTypes.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nexport declare class ActivityTypes {\n    activityTypeName: string;\n}\nexport declare const ActivityTypesSchema: import(\"mongoose\").Schema<ActivityTypes, import(\"mongoose\").Model<ActivityTypes, any, any, any, any>, {}, {}, {}, {}, \"type\", ActivityTypes>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/staticSchema/ageGroup.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/staticSchema/ageGroup.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nexport declare class AgeGroup {\n    ageGroup: string;\n    translationKey: string;\n}\nexport declare const AgeGroupSchema: import(\"mongoose\").Schema<AgeGroup, import(\"mongoose\").Model<AgeGroup, any, any, any, any>, {}, {}, {}, {}, \"type\", AgeGroup>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/staticSchema/beneficiality.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/staticSchema/beneficiality.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nexport declare class Beneficiality {\n    beneficiality: string;\n    translationKey: string;\n}\nexport declare const BeneficialitySchema: import(\"mongoose\").Schema<Beneficiality, import(\"mongoose\").Model<Beneficiality, any, any, any, any>, {}, {}, {}, {}, \"type\", Beneficiality>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/staticSchema/boundaryLevelOfChange.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/staticSchema/boundaryLevelOfChange.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nexport declare class BoundaryLevelOfChange {\n    boundaryLevelOfChange: string;\n    translationKey: string;\n}\nexport declare const BoundaryLevelOfChangeSchema: import(\"mongoose\").Schema<BoundaryLevelOfChange, import(\"mongoose\").Model<BoundaryLevelOfChange, any, any, any, any>, {}, {}, {}, {}, \"type\", BoundaryLevelOfChange>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/staticSchema/country.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/staticSchema/country.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nexport declare class Country {\n    country: string;\n    translationKey: string;\n}\nexport declare const CountrySchema: import(\"mongoose\").Schema<Country, import(\"mongoose\").Model<Country, any, any, any, any>, {}, {}, {}, {}, \"type\", Country>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/staticSchema/courseMainObjectives.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/staticSchema/courseMainObjectives.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nexport declare class CourseMainObjectives {\n    objective: string;\n    translationKey: string;\n}\nexport declare const CourseMainObjectivesSchema: import(\"mongoose\").Schema<CourseMainObjectives, import(\"mongoose\").Model<CourseMainObjectives, any, any, any, any>, {}, {}, {}, {}, \"type\", CourseMainObjectives>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/staticSchema/degreeOfNewKnowledge.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/staticSchema/degreeOfNewKnowledge.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nexport declare class DegreeOfNewKnowledge {\n    degreeOfNewKnowledge: string;\n    translationKey: string;\n}\nexport declare const DegreeOfNewKnowledgeSchema: import(\"mongoose\").Schema<DegreeOfNewKnowledge, import(\"mongoose\").Model<DegreeOfNewKnowledge, any, any, any, any>, {}, {}, {}, {}, \"type\", DegreeOfNewKnowledge>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/staticSchema/expectation.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/staticSchema/expectation.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nexport declare class Expectation {\n    expectation: string;\n    translationKey: string;\n}\nexport declare const ExpectationSchema: import(\"mongoose\").Schema<Expectation, import(\"mongoose\").Model<Expectation, any, any, any, any>, {}, {}, {}, {}, \"type\", Expectation>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/staticSchema/expertiseAreaOrThematicFocus.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/staticSchema/expertiseAreaOrThematicFocus.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nexport declare class ExpertiseAreaOrThematicFocus {\n    expertiseAreaOrThematicFocus: string;\n}\nexport declare const ExpertiseAreaOrThematicFocusSchema: import(\"mongoose\").Schema<ExpertiseAreaOrThematicFocus, import(\"mongoose\").Model<ExpertiseAreaOrThematicFocus, any, any, any, any>, {}, {}, {}, {}, \"type\", ExpertiseAreaOrThematicFocus>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/staticSchema/gender.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/staticSchema/gender.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nexport declare class Gender {\n    gender: string;\n    translationKey: string;\n}\nexport declare const GenderSchema: import(\"mongoose\").Schema<Gender, import(\"mongoose\").Model<Gender, any, any, any, any>, {}, {}, {}, {}, \"type\", Gender>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/staticSchema/knowledgeApplication.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/staticSchema/knowledgeApplication.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nexport declare class KnowledgeApplication {\n    knowledgeApplication: string;\n    translationKey: string;\n}\nexport declare const KnowledgeApplicationSchema: import(\"mongoose\").Schema<KnowledgeApplication, import(\"mongoose\").Model<KnowledgeApplication, any, any, any, any>, {}, {}, {}, {}, \"type\", KnowledgeApplication>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/staticSchema/knowledgeGained.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/staticSchema/knowledgeGained.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nexport declare class KnowledgeGained {\n    knowledgeGained: string;\n    translationKey: string;\n}\nexport declare const KnowledgeGainedSchema: import(\"mongoose\").Schema<KnowledgeGained, import(\"mongoose\").Model<KnowledgeGained, any, any, any, any>, {}, {}, {}, {}, \"type\", KnowledgeGained>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/staticSchema/knowledgeSharing.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/staticSchema/knowledgeSharing.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nexport declare class KnowledgeSharing {\n    knowledgeSharing: string;\n    translationKey: string;\n}\nexport declare const KnowledgeSharingSchema: import(\"mongoose\").Schema<KnowledgeSharing, import(\"mongoose\").Model<KnowledgeSharing, any, any, any, any>, {}, {}, {}, {}, \"type\", KnowledgeSharing>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/staticSchema/modality.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/staticSchema/modality.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nexport declare class Modality {\n    modalityName: string;\n    translationKey: string;\n}\nexport declare const ModalitySchema: import(\"mongoose\").Schema<Modality, import(\"mongoose\").Model<Modality, any, any, any, any>, {}, {}, {}, {}, \"type\", Modality>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/staticSchema/priority.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/staticSchema/priority.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Document } from 'mongoose';\nexport declare class Priority extends Document {\n    priority: string;\n    translationKey: string;\n}\nexport declare const PrioritySchema: import(\"mongoose\").Schema<Priority, import(\"mongoose\").Model<Priority, any, any, any, any>, {}, {}, {}, {}, \"type\", Priority>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/staticSchema/progressMonitoring.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/staticSchema/progressMonitoring.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Document } from 'mongoose';\nexport declare class ProgressMonitoring extends Document {\n    progressMonitoring: string;\n    translationKey: string;\n}\nexport declare const ProgressMonitoringSchema: import(\"mongoose\").Schema<ProgressMonitoring, import(\"mongoose\").Model<ProgressMonitoring, any, any, any, any>, {}, {}, {}, {}, \"type\", ProgressMonitoring>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/staticSchema/region.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/staticSchema/region.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nexport declare class Region {\n    region: string;\n    translationKey: string;\n}\nexport declare const RegionSchema: import(\"mongoose\").Schema<Region, import(\"mongoose\").Model<Region, any, any, any, any>, {}, {}, {}, {}, \"type\", Region>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/staticSchema/relevance.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/staticSchema/relevance.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nexport declare class Relevance {\n    relevance: string;\n    translationKey: string;\n}\nexport declare const RelevanceSchema: import(\"mongoose\").Schema<Relevance, import(\"mongoose\").Model<Relevance, any, any, any, any>, {}, {}, {}, {}, \"type\", Relevance>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/staticSchema/scopeOfWork.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/staticSchema/scopeOfWork.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nexport declare class ScopeOfWork {\n    scopeOfWork: string;\n    translationKey: string;\n}\nexport declare const ScopeOfWorkSchema: import(\"mongoose\").Schema<ScopeOfWork, import(\"mongoose\").Model<ScopeOfWork, any, any, any, any>, {}, {}, {}, {}, \"type\", ScopeOfWork>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/staticSchema/thematicAreaOfChange.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/staticSchema/thematicAreaOfChange.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nexport declare class ThematicAreaOfChange {\n    thematicAreaOfChange: string;\n    translationKey: string;\n}\nexport declare const ThematicAreaOfChangeSchema: import(\"mongoose\").Schema<ThematicAreaOfChange, import(\"mongoose\").Model<ThematicAreaOfChange, any, any, any, any>, {}, {}, {}, {}, \"type\", ThematicAreaOfChange>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/staticSchema/typeOfChangeObserved.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/staticSchema/typeOfChangeObserved.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nexport declare class TypeOfChangeObserved {\n    typeOfChangeObserved: string;\n    translationKey: string;\n}\nexport declare const TypeOfChangeObservedSchema: import(\"mongoose\").Schema<TypeOfChangeObserved, import(\"mongoose\").Model<TypeOfChangeObserved, any, any, any, any>, {}, {}, {}, {}, \"type\", TypeOfChangeObserved>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/staticSchema/typeOfInfluence.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/staticSchema/typeOfInfluence.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nexport declare class TypeOfInfluence {\n    typeOfInfluence: string;\n}\nexport declare const TypeOfInfluenceSchema: import(\"mongoose\").Schema<TypeOfInfluence, import(\"mongoose\").Model<TypeOfInfluence, any, any, any, any>, {}, {}, {}, {}, \"type\", TypeOfInfluence>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/staticSchema/typeOfInstitution.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/staticSchema/typeOfInstitution.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nexport declare class TypeOfInstitution {\n    typeOfInstitution: string;\n    translationKey: string;\n}\nexport declare const TypeOfInstitutionSchema: import(\"mongoose\").Schema<TypeOfInstitution, import(\"mongoose\").Model<TypeOfInstitution, any, any, any, any>, {}, {}, {}, {}, \"type\", TypeOfInstitution>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/common/staticSchema/typeOfMemberShip.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/common/staticSchema/typeOfMemberShip.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nexport declare class TypeOfMembership {\n    typeOfMembership: string;\n}\nexport declare const TypeOfMembershipSchema: import(\"mongoose\").Schema<TypeOfMembership, import(\"mongoose\").Model<TypeOfMembership, any, any, any, any>, {}, {}, {}, {}, \"type\", TypeOfMembership>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/dashboard/dashboard.controller.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/dashboard/dashboard.controller.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { DashboardService } from './dashboard.service';\nexport declare class DashboardController {\n    private dashboardService;\n    constructor(dashboardService: DashboardService);\n    getIndicatorMonitoring(year: number, networkId: any, partnerId: any): Promise<{\n        indicatorsCount: number;\n    }>;\n    getProgressMarkersMonitoring(year: number, networkId: any, partnerId: any, isQ2: boolean): Promise<{\n        lowPMCount: number;\n        mediumPMCount: number;\n        highPMCount: number;\n    }>;\n    getActivityManagement(year: number, networkId: any, partnerId: any): Promise<{\n        activityManagement: {\n            proposalProposedCount: number;\n            proposalActiveCount: number;\n            proposalCompletedCount: number;\n            proposalDelayedCount: number;\n        };\n        workplan: {\n            workplanProposedCount: number;\n            workplanActiveCount: number;\n            workplanCompletedCount: number;\n            workplanDelayedCount: number;\n        };\n    }>;\n    getProposalSummary(year: number, networkId: any, partnerId: any): Promise<{\n        approvedCount: number;\n        deniedCount: number;\n        submittedCount: number;\n        infoRequestedCount: number;\n    }>;\n    getActivityReportSummary(year: number, networkId: any, partnerId: any): Promise<{\n        outputSubmittedCount: number;\n        outputApprovedCount: number;\n        outputDeniedCount: number;\n        outputInfoRequestedCount: number;\n        outcomeSubmittedCount: number;\n        outcomeApprovedCount: number;\n        outcomeDeniedCount: number;\n        outcomeInfoRequestedCount: number;\n    }>;\n    getSurveySummary(request: any, year: number): Promise<{\n        entrySurveyResponseCount: number;\n        exitSurveyResponseCount: number;\n        outcomeSurveyResponseCount: number;\n    }>;\n    getParticipationInfoSummary(request: any, year: number): Promise<{\n        manCount: number;\n        womanCount: number;\n        otherCount: number;\n        notSayCount: number;\n        genderCount: number;\n        below18Count: number;\n        below25Count: number;\n        below65Count: number;\n        above65Count: number;\n        ageCount: number;\n        americaRegionCount: number;\n        asiaRegionCount: number;\n        africaRegionCount: number;\n        arabRegionCount: number;\n        europeRegionCount: number;\n        regionCount: number;\n        govtCount: number;\n        unCount: number;\n        ngoCount: number;\n        academiaCount: number;\n        riverCount: number;\n        waterUtilityCount: number;\n        privateCount: number;\n        independentCount: number;\n        typeOfInstitutionCount: number;\n    }>;\n    getOutputInformation(request: any, year: number): Promise<{\n        degreeOfKnowledge: {\n            veryHighKnowledgeCount: number;\n            highKnowledgeCount: number;\n            mediumKnowledgeCount: number;\n            lowKnowledgeCount: number;\n            noKnowledgeCount: number;\n        };\n        levelOfBenefits: {\n            veryBeneficialCount: number;\n            somewhatBeneficialCount: number;\n            notBeneficialCount: number;\n        };\n        levelOfRelevance: {\n            extremelyRelevantCount: number;\n            relevantCount: number;\n            slightlyRelevantCount: number;\n            notRelevantCount: number;\n        };\n        levelOfExpectation: {\n            exceededExpectationCount: number;\n            partialExpectationCount: number;\n            fullExpectationCount: number;\n            noExpectationCount: number;\n        };\n        knowledgeApplication: {\n            instituteKnowledgeCount: number;\n            outsideKnowledgeCount: number;\n            waterSectorKnowledgeCount: number;\n            educationPurposeKnowledgeCount: number;\n            communityChangesKnowledgeCount: number;\n            policyChangesKnowledgeCount: number;\n            waterPloicyKnowledgeCount: number;\n            notApplyKnowledgeCount: number;\n        };\n    }>;\n    getOutcomeInformation(request: any, year: number): Promise<{\n        knowledgeApplied: {\n            raisingAwarenessCount: number;\n            routineWorkKnowledgeCount: number;\n            educationPurposeKnowledgeCount: number;\n            waterProjectCount: number;\n            technologyInnovationCount: number;\n            sdgCount: number;\n            waterPolicyCount: number;\n        };\n        relevantInstitutionalChange: {\n            govtCount: number;\n            unCount: number;\n            ngoCount: number;\n            academiaCount: number;\n            riverCount: number;\n            waterUtilityCount: number;\n            privateCount: number;\n            independentCount: number;\n            totalRelevantInstitutionalChangeCount: number;\n        };\n        countriesRelevantInstitutionalChange: {\n            countriesCount: number;\n        };\n    }>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/dashboard/dashboard.module.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/dashboard/dashboard.module.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class DashboardModule {\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/dashboard/dashboard.service.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/dashboard/dashboard.service.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ActivitiesService } from '../activities/activities.service';\nimport { ReportsService } from '../reports/reports.service';\nimport { MelpService } from '../melp/melp.service';\nimport { StaticSurveyService } from '../staticSurveys/staticSurvey.service';\nexport declare class DashboardService {\n    private readonly melpService;\n    private readonly staticSurveyService;\n    private readonly reportsService;\n    private readonly proposalService;\n    constructor(melpService: MelpService, staticSurveyService: StaticSurveyService, reportsService: ReportsService, proposalService: ActivitiesService);\n    getIndicatorMonitoring(year: number, networkId: any, partnerId: any): Promise<{\n        indicatorsCount: number;\n    }>;\n    getProgressMarkersMonitoring(year: number, isQ2: boolean, networkId: any, partnerId: any): Promise<{\n        lowPMCount: number;\n        mediumPMCount: number;\n        highPMCount: number;\n    }>;\n    getActivityManagement(year: number, networkId: any, partnerId: any): Promise<{\n        activityManagement: {\n            proposalProposedCount: number;\n            proposalActiveCount: number;\n            proposalCompletedCount: number;\n            proposalDelayedCount: number;\n        };\n        workplan: {\n            workplanProposedCount: number;\n            workplanActiveCount: number;\n            workplanCompletedCount: number;\n            workplanDelayedCount: number;\n        };\n    }>;\n    getProposalSummary(year: number, networkId: any, partnerId: any): Promise<{\n        approvedCount: number;\n        deniedCount: number;\n        submittedCount: number;\n        infoRequestedCount: number;\n    }>;\n    getActivityReportSummary(year: number, networkId: any, partnerId: any): Promise<{\n        outputSubmittedCount: number;\n        outputApprovedCount: number;\n        outputDeniedCount: number;\n        outputInfoRequestedCount: number;\n        outcomeSubmittedCount: number;\n        outcomeApprovedCount: number;\n        outcomeDeniedCount: number;\n        outcomeInfoRequestedCount: number;\n    }>;\n    getSurveySummary(year: number, user: any): Promise<{\n        entrySurveyResponseCount: number;\n        exitSurveyResponseCount: number;\n        outcomeSurveyResponseCount: number;\n    }>;\n    getParticipationInfoSummary(year: number, user: any): Promise<{\n        manCount: number;\n        womanCount: number;\n        otherCount: number;\n        notSayCount: number;\n        genderCount: number;\n        below18Count: number;\n        below25Count: number;\n        below65Count: number;\n        above65Count: number;\n        ageCount: number;\n        americaRegionCount: number;\n        asiaRegionCount: number;\n        africaRegionCount: number;\n        arabRegionCount: number;\n        europeRegionCount: number;\n        regionCount: number;\n        govtCount: number;\n        unCount: number;\n        ngoCount: number;\n        academiaCount: number;\n        riverCount: number;\n        waterUtilityCount: number;\n        privateCount: number;\n        independentCount: number;\n        typeOfInstitutionCount: number;\n    }>;\n    getOutputInformation(year: number, user: any): Promise<{\n        degreeOfKnowledge: {\n            veryHighKnowledgeCount: number;\n            highKnowledgeCount: number;\n            mediumKnowledgeCount: number;\n            lowKnowledgeCount: number;\n            noKnowledgeCount: number;\n        };\n        levelOfBenefits: {\n            veryBeneficialCount: number;\n            somewhatBeneficialCount: number;\n            notBeneficialCount: number;\n        };\n        levelOfRelevance: {\n            extremelyRelevantCount: number;\n            relevantCount: number;\n            slightlyRelevantCount: number;\n            notRelevantCount: number;\n        };\n        levelOfExpectation: {\n            exceededExpectationCount: number;\n            partialExpectationCount: number;\n            fullExpectationCount: number;\n            noExpectationCount: number;\n        };\n        knowledgeApplication: {\n            instituteKnowledgeCount: number;\n            outsideKnowledgeCount: number;\n            waterSectorKnowledgeCount: number;\n            educationPurposeKnowledgeCount: number;\n            communityChangesKnowledgeCount: number;\n            policyChangesKnowledgeCount: number;\n            waterPloicyKnowledgeCount: number;\n            notApplyKnowledgeCount: number;\n        };\n    }>;\n    getOutcomeInformation(year: number, user: any): Promise<{\n        knowledgeApplied: {\n            raisingAwarenessCount: number;\n            routineWorkKnowledgeCount: number;\n            educationPurposeKnowledgeCount: number;\n            waterProjectCount: number;\n            technologyInnovationCount: number;\n            sdgCount: number;\n            waterPolicyCount: number;\n        };\n        relevantInstitutionalChange: {\n            govtCount: number;\n            unCount: number;\n            ngoCount: number;\n            academiaCount: number;\n            riverCount: number;\n            waterUtilityCount: number;\n            privateCount: number;\n            independentCount: number;\n            totalRelevantInstitutionalChangeCount: number;\n        };\n        countriesRelevantInstitutionalChange: {\n            countriesCount: number;\n        };\n    }>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/impactStories/impactStory.module.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/impactStories/impactStory.module.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/impactStory/dto/activityIdList.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/impactStory/dto/activityIdList.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Types } from 'mongoose';\nexport declare class ActivityIdListDto {\n    activityIds: [Types.ObjectId];\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/impactStory/dto/addImpactStory.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/impactStory/dto/addImpactStory.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Types } from 'mongoose';\nexport declare class AddImpactStoryDTO {\n    impactStoryCode: string;\n    storyTitle: string;\n    focalPersonId: Types.ObjectId;\n    informationCollectionMedium: string;\n    whatChangeObserved: string;\n    capnetInfluenceOnChange: string;\n    effectOnInstitution: string;\n    significantChange: string;\n    howChangeWasOccured: string;\n    changeOccuredPeriod: string;\n    typeOfChangeId: Types.ObjectId[];\n    otherTypeOfChange: string;\n    boundaryLevelOfChangeId: Types.ObjectId[];\n    otherBoundaryLevelOfChange: string;\n    thematicAreaOfChangeId: Types.ObjectId[];\n    otherThematicAreaOfChange: string;\n    keyPartners: string;\n    isParticipantAStoryteller: boolean;\n    storyTellerContactedMedium: string;\n    hasGivenConsent: boolean;\n    isAnonymous: boolean;\n    storyTellerFirstName: string;\n    storyTellerLastName: string;\n    storyTellerEmail: string;\n    storyTellerGenderId: Types.ObjectId;\n    storyTellerGenderPronounPreference: string;\n    storyTellerAgeGroupId: Types.ObjectId;\n    nationality: string;\n    typeOfInstitutionId: Types.ObjectId;\n    nameOfInstitution: string;\n    positionInInstitution: string;\n    isNetworkMember: boolean;\n    affiliatedNetworkId: Types.ObjectId;\n    informationSignificance: string;\n    missingInformation: string;\n    nextActions: string;\n    additionalComments: string;\n    hasStoryOfChange: boolean;\n    storyOfChangeDraft: string;\n    linksToSourcesOfInformation: string;\n    angle: string;\n    title: string;\n    outline: string;\n    storyDraft: string;\n    storyHighlight: string;\n    storyQuote: string;\n    dynamicMaterial: string;\n    publishWhere: string;\n    publishWhen: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/impactStory/dto/addStoryCreation.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/impactStory/dto/addStoryCreation.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class AddStoryCreationDTO {\n    angle: string;\n    title: string;\n    outline: string;\n    storyDraft: string;\n    storyHighlight: string;\n    storyQuote: string;\n    dynamicMaterial: string;\n    publishWhere: string;\n    publishWhen: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/impactStory/dto/addStoryInfo.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/impactStory/dto/addStoryInfo.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Types } from 'mongoose';\nimport { BoundaryLevelOfChange, ObjectArray, ThematicAreaOfChange, TypeOfChange } from '../schema/impactStory.schema';\nexport declare class AddStoryInfoDTO {\n    year: string;\n    impactStoryCode: string;\n    storyTitle: string;\n    focalPersonId: Types.ObjectId;\n    proposalId: Types.ObjectId[];\n    proposalList: ObjectArray[];\n    informationCollectionMedium: string;\n    whatChangeObserved: string;\n    capnetInfluenceOnChange: string;\n    effectOnInstitution: string;\n    significantChange: string;\n    howChangeWasOccured: string;\n    changeOccuredPeriod: string;\n    typeOfChange: TypeOfChange[];\n    otherTypeOfChange: string;\n    indicatorId: Types.ObjectId[];\n    indicatorList: ObjectArray[];\n    boundaryLevelOfChange: BoundaryLevelOfChange[];\n    otherBoundaryLevelOfChange: string;\n    thematicAreaOfChange: ThematicAreaOfChange[];\n    otherThematicAreaOfChange: string;\n    keyPartners: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/impactStory/dto/addStorySelection.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/impactStory/dto/addStorySelection.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FileUploadDTO } from '../../reports/schema/outputReport.schema';\nexport declare class AddStorySelectionDTO {\n    informationSignificance: string;\n    missingInformation: string;\n    nextActions: string;\n    additionalComments: string;\n    hasStoryOfChange: boolean;\n    storyOfChangeDraft: FileUploadDTO;\n    linksToSourcesOfInformation: FileUploadDTO[];\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/impactStory/dto/addStorytellerInfo.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/impactStory/dto/addStorytellerInfo.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Types } from 'mongoose';\nexport declare class AddStorytellerInfoDTO {\n    isParticipantAStoryteller: boolean;\n    storyTellerContactedMedium: string;\n    otherContactMedium: string;\n    hasGivenConsent: boolean;\n    isAnonymous: boolean;\n    storyTellerFirstName: string;\n    storyTellerLastName: string;\n    storyTellerEmail: string;\n    storyTellerGenderId: Types.ObjectId;\n    storyTellerGenderPronounPreference: string;\n    otherGenderPronounPreference: string;\n    storyTellerAgeGroupId: Types.ObjectId;\n    nationality: string;\n    typeOfInstitutionId: Types.ObjectId;\n    nameOfInstitution: string;\n    positionInInstitution: string;\n    isNetworkMember: boolean;\n    affiliatedNetworkId: Types.ObjectId;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/impactStory/dto/editStoryCreation.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/impactStory/dto/editStoryCreation.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AddStoryCreationDTO } from \"./addStoryCreation.dto\";\ndeclare const EditStoryCreationDTO_base: import(\"@nestjs/common\").Type<Partial<AddStoryCreationDTO>>;\nexport declare class EditStoryCreationDTO extends EditStoryCreationDTO_base {\n}\nexport {};\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/impactStory/dto/editStoryInfo.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/impactStory/dto/editStoryInfo.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AddStoryInfoDTO } from './addStoryInfo.dto';\ndeclare const EditStoryInfoDTO_base: import(\"@nestjs/common\").Type<Partial<AddStoryInfoDTO>>;\nexport declare class EditStoryInfoDTO extends EditStoryInfoDTO_base {\n}\nexport {};\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/impactStory/dto/editStorySelection.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/impactStory/dto/editStorySelection.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AddStorySelectionDTO } from './addStorySelection.dto';\ndeclare const EditStorySelectionDTO_base: import(\"@nestjs/common\").Type<Partial<AddStorySelectionDTO>>;\nexport declare class EditStorySelectionDTO extends EditStorySelectionDTO_base {\n}\nexport {};\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/impactStory/dto/editStorytellerInfo.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/impactStory/dto/editStorytellerInfo.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AddStorytellerInfoDTO } from './addStorytellerInfo.dto';\ndeclare const EditStorytellerInfoDTO_base: import(\"@nestjs/common\").Type<Partial<AddStorytellerInfoDTO>>;\nexport declare class EditStorytellerInfoDTO extends EditStorytellerInfoDTO_base {\n}\nexport {};\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/impactStory/dto/proposalIdList.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/impactStory/dto/proposalIdList.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Types } from 'mongoose';\nexport declare class ProposalIdListDto {\n    proposalIds: [Types.ObjectId];\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/impactStory/impactStory.controller.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/impactStory/impactStory.controller.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport RequestWithUser from '../users/user.service';\nimport { ProposalIdListDto } from './dto/proposalIdList.dto';\nimport { AddStoryCreationDTO } from './dto/addStoryCreation.dto';\nimport { AddStoryInfoDTO } from './dto/addStoryInfo.dto';\nimport { AddStorySelectionDTO } from './dto/addStorySelection.dto';\nimport { AddStorytellerInfoDTO } from './dto/addStorytellerInfo.dto';\nimport { EditStoryInfoDTO } from './dto/editStoryInfo.dto';\nimport { EditStorytellerInfoDTO } from './dto/editStorytellerInfo.dto';\nimport { ImpactStoryService } from './impactStory.service';\nexport declare class ImpactStoryController {\n    private readonly impactStoryService;\n    constructor(impactStoryService: ImpactStoryService);\n    getStaticDataTables(): Promise<{\n        genderList: (import(\"mongoose\").Document<unknown, any, import(\"../common/staticSchema/gender.schema\").Gender> & import(\"../common/staticSchema/gender.schema\").Gender & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        ageGroupList: (import(\"mongoose\").Document<unknown, any, import(\"../common/staticSchema/ageGroup.schema\").AgeGroup> & import(\"../common/staticSchema/ageGroup.schema\").AgeGroup & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        typeOfInstitutionList: (import(\"mongoose\").Document<unknown, any, import(\"../common/staticSchema/typeOfInstitution.schema\").TypeOfInstitution> & import(\"../common/staticSchema/typeOfInstitution.schema\").TypeOfInstitution & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        networkList: (import(\"../networks/schema/network.schema\").Network & import(\"mongoose\").Document<any, any, any> & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        typeOfChangeObservedList: (import(\"mongoose\").Document<unknown, any, import(\"../common/staticSchema/typeOfChangeObserved.schema\").TypeOfChangeObserved> & import(\"../common/staticSchema/typeOfChangeObserved.schema\").TypeOfChangeObserved & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        boundaryLevelOfChangeList: (import(\"mongoose\").Document<unknown, any, import(\"../common/staticSchema/boundaryLevelOfChange.schema\").BoundaryLevelOfChange> & import(\"../common/staticSchema/boundaryLevelOfChange.schema\").BoundaryLevelOfChange & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        thematicAreaOfChangeList: (import(\"mongoose\").Document<unknown, any, import(\"../common/staticSchema/thematicAreaOfChange.schema\").ThematicAreaOfChange> & import(\"../common/staticSchema/thematicAreaOfChange.schema\").ThematicAreaOfChange & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n    }>;\n    getCountOfImpactStory(year: number, request: any): Promise<number>;\n    getProposalActivityList(year: number, request: any): Promise<{\n        proposalActivityList: any[];\n    }>;\n    getProposalActivityListForCapnet(year: number): Promise<{\n        proposalActivityList: any[];\n    }>;\n    getIndicatorsListByProposalId(proposalIdList: ProposalIdListDto): Promise<any[]>;\n    getListOfImpactStories(request: RequestWithUser, searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number, year: number): Promise<{\n        impactStories: any[];\n        totalImpactStoryCount: any;\n        totalPageCount: number;\n    }>;\n    getImpactStoryInfo(request: RequestWithUser, impactStoryId: string): Promise<import(\"./schema/impactStory.schema\").ImpactStory & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    addImpactStoryInfo(addImpactStoryInfo: AddStoryInfoDTO, request: RequestWithUser): Promise<import(\"./schema/impactStory.schema\").ImpactStory & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    updateImpactStoryInfo(updateStoryInfo: EditStoryInfoDTO, request: RequestWithUser, impactStoryId: string): Promise<import(\"./schema/impactStory.schema\").ImpactStory & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    addOrEditStorytellerInfo(addOrEditStorytellerInfo: AddStorytellerInfoDTO | EditStorytellerInfoDTO, request: RequestWithUser, impactStoryId: string): Promise<import(\"./schema/impactStory.schema\").ImpactStory & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    addorEditStorySelection(addStorySelection: AddStorySelectionDTO, request: RequestWithUser, impactStoryId: string): Promise<import(\"./schema/impactStory.schema\").ImpactStory & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    addOrEditStoryCreation(addOrEditStoryCreation: AddStoryCreationDTO, request: RequestWithUser, impactStoryId: string): Promise<import(\"./schema/impactStory.schema\").ImpactStory & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    removeImpactStory(request: RequestWithUser, impactStoryId: string): Promise<any>;\n    individualDownload(res: any, impactStoryId: string): Promise<void>;\n    multipleDownload(res: any, year: number, request: any): Promise<void>;\n    generalUserMultipleDownload(year: number, network: boolean, res: any): Promise<void>;\n    viewAllNetworksImpactStory(searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number, year: number): Promise<{\n        impactStories: any[];\n        impactStoryCount: number;\n        totalPageCount: number;\n    }>;\n    viewAllPartnersImpactStory(searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number, year: number): Promise<{\n        impactStories: any[];\n        impactStoryCount: number;\n        totalPageCount: number;\n    }>;\n    finalSaveImpactStory(impactStoryId: string, request: any): Promise<(import(\"./schema/impactStory.schema\").ImpactStory & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }) | {\n        isStoryInfoTabFilled: boolean;\n        isStoryTellerTabFilled: boolean;\n        isStorySelectionTabFilled: boolean;\n    }>;\n    uploadStoryFiles(file: any): Promise<any[]>;\n    deleteImpactStoryFromAzure(filename: string, requestId: string, fieldKey: string, impactStoryId: string): Promise<string>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/impactStory/impactStory.module.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/impactStory/impactStory.module.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class ImpactStoryModule {\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/impactStory/impactStory.service.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/impactStory/impactStory.service.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Model, Types } from 'mongoose';\nimport { ActivitiesService } from '../activities/activities.service';\nimport { AgeGroup } from '../common/staticSchema/ageGroup.schema';\nimport { Gender } from '../common/staticSchema/gender.schema';\nimport { TypeOfInstitution } from '../common/staticSchema/typeOfInstitution.schema';\nimport { NetworkService } from '../networks/network.service';\nimport { PartnerService } from '../partners/partner.service';\nimport { ImpactStory } from './schema/impactStory.schema';\nimport { AddStoryInfoDTO } from './dto/addStoryInfo.dto';\nimport { AddStorytellerInfoDTO } from './dto/addStorytellerInfo.dto';\nimport { AddStorySelectionDTO } from './dto/addStorySelection.dto';\nimport { AddStoryCreationDTO } from './dto/addStoryCreation.dto';\nimport { UserService } from '../users/user.service';\nimport { TypeOfChangeObserved } from '../common/staticSchema/typeOfChangeObserved.schema';\nimport { EditStoryInfoDTO } from './dto/editStoryInfo.dto';\nimport { EditStorytellerInfoDTO } from './dto/editStorytellerInfo.dto';\nimport { ApprovalRequests } from '../approvalHierarchy/schema/approvalRequests.schema';\nimport { ApprovalHierarchy } from '../approvalHierarchy/schema/approvalHierarchy.schema';\nimport { MailService } from '../mail/mail.service';\nimport { ApprovalDetails } from '../approvalHierarchy/schema/approvalDetails.schema';\nimport { Worksheet } from 'exceljs';\nimport { StaticSurveyService } from '../staticSurveys/staticSurvey.service';\nimport { ProposalIdListDto } from './dto/proposalIdList.dto';\nimport { MelpService } from '../melp/melp.service';\nimport { ReportsService } from '../reports/reports.service';\nimport { BoundaryLevelOfChange } from '../common/staticSchema/boundaryLevelOfChange.schema';\nimport { ThematicAreaOfChange } from '../common/staticSchema/thematicAreaOfChange.schema';\nimport { ConfigService } from '@nestjs/config';\nexport declare class ImpactStoryService {\n    private impactStoryModel;\n    private typeOfChangeObservedModel;\n    private genderModel;\n    private ageGroupModel;\n    private typeOfInstitutionModel;\n    private boundaryLevelOfChangeModel;\n    private thematicAreaOfChangeModel;\n    private readonly approvalRequestsModel;\n    private readonly approvalHierarchyModel;\n    private readonly approvalDetailsModel;\n    private readonly networkService;\n    private readonly partnerService;\n    private readonly activityService;\n    private readonly userService;\n    private readonly configService;\n    private readonly mailService;\n    private readonly staticSurveyService;\n    private readonly melpService;\n    private readonly reportsService;\n    constructor(impactStoryModel: Model<ImpactStory>, typeOfChangeObservedModel: Model<TypeOfChangeObserved>, genderModel: Model<Gender>, ageGroupModel: Model<AgeGroup>, typeOfInstitutionModel: Model<TypeOfInstitution>, boundaryLevelOfChangeModel: Model<BoundaryLevelOfChange>, thematicAreaOfChangeModel: Model<ThematicAreaOfChange>, approvalRequestsModel: Model<ApprovalRequests>, approvalHierarchyModel: Model<ApprovalHierarchy>, approvalDetailsModel: Model<ApprovalDetails>, networkService: NetworkService, partnerService: PartnerService, activityService: ActivitiesService, userService: UserService, configService: ConfigService, mailService: MailService, staticSurveyService: StaticSurveyService, melpService: MelpService, reportsService: ReportsService);\n    checkIfStoryExists(impactStoryId: string, networkId: any, partnerId: any): Promise<ImpactStory & {\n        _id: Types.ObjectId;\n    }>;\n    getStaticDataTables(): Promise<{\n        genderList: (import(\"mongoose\").Document<unknown, any, Gender> & Gender & {\n            _id: Types.ObjectId;\n        })[];\n        ageGroupList: (import(\"mongoose\").Document<unknown, any, AgeGroup> & AgeGroup & {\n            _id: Types.ObjectId;\n        })[];\n        typeOfInstitutionList: (import(\"mongoose\").Document<unknown, any, TypeOfInstitution> & TypeOfInstitution & {\n            _id: Types.ObjectId;\n        })[];\n        networkList: (import(\"../networks/schema/network.schema\").Network & import(\"mongoose\").Document<any, any, any> & {\n            _id: Types.ObjectId;\n        })[];\n        typeOfChangeObservedList: (import(\"mongoose\").Document<unknown, any, TypeOfChangeObserved> & TypeOfChangeObserved & {\n            _id: Types.ObjectId;\n        })[];\n        boundaryLevelOfChangeList: (import(\"mongoose\").Document<unknown, any, BoundaryLevelOfChange> & BoundaryLevelOfChange & {\n            _id: Types.ObjectId;\n        })[];\n        thematicAreaOfChangeList: (import(\"mongoose\").Document<unknown, any, ThematicAreaOfChange> & ThematicAreaOfChange & {\n            _id: Types.ObjectId;\n        })[];\n    }>;\n    getCountOfImpactStory(year: number, user: any): Promise<number>;\n    getProposalActivityList(year: number, user: any): Promise<{\n        proposalActivityList: any[];\n    }>;\n    getProposalActivityListForCapnet(year: number): Promise<{\n        proposalActivityList: any[];\n    }>;\n    getIndicatorsListByProposalId(proposalIdList: ProposalIdListDto): Promise<any[]>;\n    commonFunctionForSearchSort(searchKeyword: string, sortKey: string, sortDirection: number): Promise<{\n        regex: RegExp;\n        sortQuery: {};\n    }>;\n    getImpactStoryById(impactStoryId: string): Promise<ImpactStory & {\n        _id: Types.ObjectId;\n    }>;\n    getArrayOfImpactStoryObject(impactStoryList: any): Promise<any[]>;\n    updateApprovedCount(count: number, impactStoryId: string): Promise<ImpactStory & {\n        _id: Types.ObjectId;\n    }>;\n    getListOfImpactStories(user: any, year: number, searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number): Promise<{\n        impactStories: any[];\n        totalImpactStoryCount: any;\n        totalPageCount: number;\n    }>;\n    getImpactStoryInfo(impactStoryId: string, user: any): Promise<ImpactStory & {\n        _id: Types.ObjectId;\n    }>;\n    addImpactStoryInfo(addImpactStoryInfo: AddStoryInfoDTO, user: any): Promise<ImpactStory & {\n        _id: Types.ObjectId;\n    }>;\n    setSubmittedAtTime(impactStoryId: string, submittedAt: Date): Promise<ImpactStory & {\n        _id: Types.ObjectId;\n    }>;\n    setApprovedAtTime(impactStoryId: string, approvedAt: Date): Promise<ImpactStory & {\n        _id: Types.ObjectId;\n    }>;\n    updateImpactStoryInfo(updateStoryInfo: EditStoryInfoDTO, impactStoryId: string, user: any): Promise<ImpactStory & {\n        _id: Types.ObjectId;\n    }>;\n    addOrEditStorytellerInfo(addOrEditStorytellerInfo: AddStorytellerInfoDTO | EditStorytellerInfoDTO, impactStoryId: string, user: any): Promise<ImpactStory & {\n        _id: Types.ObjectId;\n    }>;\n    addorEditStorySelection(addStorySelection: AddStorySelectionDTO, impactStoryId: string, user: any): Promise<ImpactStory & {\n        _id: Types.ObjectId;\n    }>;\n    addOrEditStoryCreation(addOrEditStoryCreation: AddStoryCreationDTO, impactStoryId: string, user: any): Promise<ImpactStory & {\n        _id: Types.ObjectId;\n    }>;\n    removeImpactStory(impactStoryId: string, user: any): Promise<any>;\n    updateImpactStoryStatus(impactStoryId: string, statusId: any): Promise<ImpactStory & {\n        _id: Types.ObjectId;\n    }>;\n    worksheetCreation(worksheet: Worksheet): Promise<void>;\n    impactStoryDownload(res: any, impactStoryId: string, worksheet: Worksheet, rowCount: number): Promise<void>;\n    individualDownload(res: any, impactStoryId: string): Promise<void>;\n    commonFunctionforMultipleDownload(impactStoryList: ImpactStory[], year: number, res: any): Promise<void>;\n    multipleDownload(res: any, year: number, user: any): Promise<void>;\n    generalUserMultipleDownload(res: any, year: number, isNetwork: boolean): Promise<void>;\n    viewAllNetworksImpactStory(year: number, searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number): Promise<{\n        impactStories: any[];\n        impactStoryCount: number;\n        totalPageCount: number;\n    }>;\n    viewAllPartnersImpactStory(year: number, searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number): Promise<{\n        impactStories: any[];\n        impactStoryCount: number;\n        totalPageCount: number;\n    }>;\n    finalSaveImpactStory(impactStoryId: string, user: any): Promise<(ImpactStory & {\n        _id: Types.ObjectId;\n    }) | {\n        isStoryInfoTabFilled: boolean;\n        isStoryTellerTabFilled: boolean;\n        isStorySelectionTabFilled: boolean;\n    }>;\n    uploadStoryFiles(files: any): Promise<any[]>;\n    deleteImpactStoryFromAzure(filename: string, requestId: string, fieldKey: string, impactStoryId: string): Promise<void>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/impactStory/schema/impactStory.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/impactStory/schema/impactStory.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Types } from 'mongoose';\nimport { Base } from '../../common/schema/base.schema';\nimport { FileUploadDTO } from '../../reports/schema/outputReport.schema';\nexport declare class ImpactStory extends Base {\n    year: number;\n    impactStoryId: string;\n    impactStoryCode: string;\n    instituteName: string;\n    statusId: Types.ObjectId;\n    networkId: Types.ObjectId;\n    partnerId: Types.ObjectId;\n    approvedCount: number;\n    storyTitle: string;\n    focalPersonId: Types.ObjectId;\n    proposalId: Types.ObjectId[];\n    proposalList: any[];\n    informationCollectionMedium: string;\n    whatChangeObserved: string;\n    capnetInfluenceOnChange: string;\n    effectOnInstitution: string;\n    significantChange: string;\n    howChangeWasOccured: string;\n    changeOccuredPeriod: string;\n    typeOfChange: TypeOfChange[];\n    otherTypeOfChange: string;\n    indicatorId: Types.ObjectId[];\n    indicatorList: any[];\n    boundaryLevelOfChange: BoundaryLevelOfChange[];\n    otherBoundaryLevelOfChange: string;\n    thematicAreaOfChange: ThematicAreaOfChange[];\n    otherThematicAreaOfChange: string;\n    keyPartners: string;\n    isParticipantAStoryteller: boolean;\n    storyTellerContactedMedium: string;\n    otherContactMedium: string;\n    hasGivenConsent: boolean;\n    isAnonymous: boolean;\n    storyTellerFirstName: string;\n    storyTellerLastName: string;\n    storyTellerEmail: string;\n    storyTellerGenderId: Types.ObjectId;\n    storyTellerGenderPronounPreference: string;\n    otherGenderPronounPreference: string;\n    storyTellerAgeGroupId: Types.ObjectId;\n    nationality: string;\n    typeOfInstitutionId: Types.ObjectId;\n    nameOfInstitution: string;\n    positionInInstitution: string;\n    isNetworkMember: boolean;\n    affiliatedNetworkId: Types.ObjectId;\n    informationSignificance: string;\n    missingInformation: string;\n    nextActions: string;\n    additionalComments: string;\n    hasStoryOfChange: boolean;\n    storyOfChangeDraft: FileUploadDTO;\n    linksToSourcesOfInformation: FileUploadDTO[];\n    angle: string;\n    title: string;\n    outline: string;\n    storyDraft: string;\n    storyHighlight: string;\n    storyQuote: string;\n    dynamicMaterial: string;\n    publishWhere: string;\n    publishWhen: string;\n    isStoryInfoTabFilled: boolean;\n    isStoryTellerTabFilled: boolean;\n    isStorySelectionTabFilled: boolean;\n    isDeleted: boolean;\n    createdAt?: Date;\n    updatedAt?: Date;\n    submittedAt: Date;\n    approvedAt: Date;\n}\nexport declare const ImpactStorySchema: import(\"mongoose\").Schema<ImpactStory, import(\"mongoose\").Model<ImpactStory, any, any, any, any>, {}, {}, {}, {}, \"type\", ImpactStory>;\nexport interface TypeOfChange {\n    key: string;\n    value: boolean;\n}\nexport interface BoundaryLevelOfChange {\n    key: string;\n    value: boolean;\n}\nexport interface ThematicAreaOfChange {\n    key: string;\n    value: boolean;\n}\nexport interface ObjectArray {\n    key: Types.ObjectId;\n    value: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/mail/dto/confirmEmail.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/mail/dto/confirmEmail.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class ConfirmEmailDto {\n    token: string;\n}\nexport default ConfirmEmailDto;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/mail/mail.module.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/mail/mail.module.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class MailModule {\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/mail/mail.service.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/mail/mail.service.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MailerService } from '@nestjs-modules/mailer';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { UserService } from '../users/user.service';\nexport declare class MailService {\n    private readonly jwtService;\n    private readonly configService;\n    private readonly mailerService;\n    private readonly userService;\n    constructor(jwtService: JwtService, configService: ConfigService, mailerService: MailerService, userService: UserService);\n    sendVerificationLink(email: string): Promise<any>;\n    sendApprovalMail(email: string, name: string): Promise<any>;\n    sendDenialMail(email: string, name: string, reason: string): Promise<any>;\n    confirmEmail(email: string): Promise<import(\"../users/schema/user.schema\").User & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    decodeConfirmationToken(token: string): Promise<any>;\n    decodePasswordSetupToken(token: string): Promise<any>;\n    sendForgotPasswordMail(email: string, name: string): Promise<any>;\n    sendMelpApprovalHierarchyMail(email: string, name: string, level: number): Promise<any>;\n    sendProposalApprovalHierarchyMail(email: string, name: string, level: number): Promise<any>;\n    sendActivityReportsApprovalHierarchyMail(email: string, name: string, level: number): Promise<any>;\n    sendWorkplanApprovalHierarchyMail(email: string, name: string, level: number): Promise<any>;\n    sendImpactStoriesApprovalHierarchyMail(email: string, name: string, level: number): Promise<any>;\n    sendForApprovalForApprovalTypes(email: string, name: string, entityCode: any, approvalType: string): Promise<any>;\n    approvalMailForApprovalTypes(email: string, name: string, entityCode: string, approvalType: string): Promise<any>;\n    denialMailForApprovalTypes(email: string, name: string, entityCode: string, approvalType: string, denialReason: string): Promise<any>;\n    infoRequestedMailForApprovalTypes(email: string, name: string, entityCode: string, approvalType: string, informationRequired: string): Promise<any>;\n    resubmittedMailForApprovalTypes(email: string, name: string, entityCode: string, approvalType: string): Promise<any>;\n}\ninterface VerificationTokenPayload {\n    email: string;\n}\nexport default VerificationTokenPayload;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/main.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/main.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export {};\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/melp/dto/addBaseline.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/melp/dto/addBaseline.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class AddBaselineDTO {\n    indicatorMonitoringId: string;\n    baseline: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/melp/dto/addIndicator.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/melp/dto/addIndicator.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MelpIndicatorMonitoring } from '../schema/melpIndicatorMonitoring.schema';\nimport { AddMonitoringRiskDTO } from './addMonitoringRisk.dto';\nexport declare class AddIndicatorDTO {\n    indicatorCode: string;\n    indicatorName: string;\n    definition: string;\n    completionYear: number;\n    measurementUnit: string;\n    cumulativeTarget: number;\n    sourceOfData: string;\n    collectionMethodType: string;\n    collectionMethodName: string;\n    collectionFrequencyType: string;\n    collectionFrequencyName: string;\n    indicatorsMonitoring: MelpIndicatorMonitoring[];\n    monitoringRisks: AddMonitoringRiskDTO[];\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/melp/dto/addMelProgress.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/melp/dto/addMelProgress.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Types } from 'mongoose';\nexport declare class AddMelProgressDTO {\n    indicatorMonitorings: IndicatorMonitorings[];\n    progressMarkerMonitorings: ProgressMarkerMonitorings[];\n    updatedBy: Types.ObjectId;\n}\ninterface IndicatorMonitorings {\n    indicatorMonitoringId: string;\n    baseline: string;\n}\ninterface ProgressMarkerMonitorings {\n    progressMarkersId: string;\n    progressMonitoringQ2: string;\n    progressMonitoringQ4: string;\n    descriptionOfChange: string;\n    contributingFactors: string;\n    sourceOfEvidence: string;\n    unintendedChanges: string;\n}\nexport {};\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/melp/dto/addMelProgressPM.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/melp/dto/addMelProgressPM.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class AddMelProgressPMDTO {\n    progressMarkerMonitorings: ProgressMarkerMonitorings[];\n}\ninterface ProgressMarkerMonitorings {\n    progressMarkersId: string;\n    progressMonitoringQ2: string;\n    progressMonitoringQ4: string;\n    descriptionOfChange: string;\n    contributingFactors: string;\n    sourceOfEvidence: string;\n    unintendedChanges: string;\n}\nexport {};\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/melp/dto/addMelProgressSRF.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/melp/dto/addMelProgressSRF.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class AddMelProgressSRFDTO {\n    indicatorMonitorings: IndicatorMonitorings[];\n}\ninterface IndicatorMonitorings {\n    indicatorMonitoringId: string;\n    baseline: string;\n}\nexport {};\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/melp/dto/addMelTaskDetail.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/melp/dto/addMelTaskDetail.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Schema } from 'mongoose';\nexport declare class AddMelTaskDetailsDTO {\n    role: string;\n    cost: number;\n    melpTaskId: Schema.Types.ObjectId;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/melp/dto/addMonitoringRisk.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/melp/dto/addMonitoringRisk.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Schema } from 'mongoose';\nexport declare class AddMonitoringRiskDTO {\n    issues: string;\n    mitigatingAction: string;\n    indicatorRisksId: Schema.Types.ObjectId;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/melp/dto/addMonitoringRisks.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/melp/dto/addMonitoringRisks.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class AddMonitoringRisks {\n    issue: string;\n    mitigatingAction: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/melp/dto/addProgressMarker.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/melp/dto/addProgressMarker.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Types } from 'mongoose';\nexport declare class AddProgressMarkerDTO {\n    progressMarkersId: string;\n    progressMarkerCode: string;\n    progressMarker: string;\n    priorityId: Types.ObjectId;\n    progressMonitoringQ2: Types.ObjectId;\n    progressMonitoringQ4: Types.ObjectId;\n    descriptionOfChange: string;\n    contributingFactors: string;\n    sourceOfEvidence: string;\n    unintendedChanges: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/melp/dto/addResult.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/melp/dto/addResult.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class AddResultDTO {\n    resultName: string;\n    resultCode: string;\n    objectiveLevel: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/melp/dto/createMelp.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/melp/dto/createMelp.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class CreateMelpDTO {\n    year: number;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/melp/dto/createMelpOM.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/melp/dto/createMelpOM.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AddProgressMarkerDTO } from './addProgressMarker.dto';\nexport declare class CreateMelpOMDTO {\n    outcomeCode: string;\n    outcomeChallenge: string;\n    boundaryPartners: string[];\n    progressMarkerCount: number;\n    progressMarkers: AddProgressMarkerDTO[];\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/melp/dto/createMelpSRF.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/melp/dto/createMelpSRF.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class CreateMelpSRFDTO {\n    melpCode: string;\n    year: number;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/melp/dto/createNetworkMelpSRF.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/melp/dto/createNetworkMelpSRF.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AddMelTaskDetailsDTO } from './addMelTaskDetail.dto';\nexport declare class CreateNetworkMelpSRFDTO {\n    melpCode: string;\n    year: number;\n    scopeAndPurpose: string;\n    taskDetails: AddMelTaskDetailsDTO[];\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/melp/dto/editIndicator.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/melp/dto/editIndicator.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AddIndicatorDTO } from './addIndicator.dto';\ndeclare const EditIndicatorDTO_base: import(\"@nestjs/common\").Type<Partial<AddIndicatorDTO>>;\nexport declare class EditIndicatorDTO extends EditIndicatorDTO_base {\n}\nexport {};\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/melp/dto/editNetworkMelpSRF.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/melp/dto/editNetworkMelpSRF.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CreateNetworkMelpSRFDTO } from './createNetworkMelpSRF.dto';\ndeclare const EditNetworkMelpSRFDTO_base: import(\"@nestjs/common\").Type<Partial<CreateNetworkMelpSRFDTO>>;\nexport declare class EditNetworkMelpSRFDTO extends EditNetworkMelpSRFDTO_base {\n}\nexport {};\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/melp/dto/editOM.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/melp/dto/editOM.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CreateMelpOMDTO } from './createMelpOM.dto';\ndeclare const EditOmDTO_base: import(\"@nestjs/common\").Type<Partial<CreateMelpOMDTO>>;\nexport declare class EditOmDTO extends EditOmDTO_base {\n}\nexport {};\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/melp/dto/editResult.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/melp/dto/editResult.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AddResultDTO } from './addResult.dto';\ndeclare const EditResultDTO_base: import(\"@nestjs/common\").Type<Partial<AddResultDTO>>;\nexport declare class EditResultDTO extends EditResultDTO_base {\n}\nexport {};\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/melp/enum/objectiveLevel.enum.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/melp/enum/objectiveLevel.enum.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare enum ObjectiveLevel {\n    IMPACT = \"Impact\",\n    OUTCOME = \"Outcome\",\n    OUTPUT = \"Output\"\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/melp/melp.controller.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/melp/melp.controller.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { AddIndicatorDTO } from './dto/addIndicator.dto';\nimport { AddResultDTO } from './dto/addResult.dto';\nimport { CreateMelpOMDTO } from './dto/createMelpOM.dto';\nimport { CreateMelpSRFDTO } from './dto/createMelpSRF.dto';\nimport { MelpService } from './melp.service';\nimport RequestWithUser from '../users/user.service';\nimport { EditResultDTO } from './dto/editResult.dto';\nimport { EditOmDTO } from './dto/editOM.dto';\nimport { EditIndicatorDTO } from './dto/editIndicator.dto';\nimport { CreateNetworkMelpSRFDTO } from './dto/createNetworkMelpSRF.dto';\nimport { EditNetworkMelpSRFDTO } from './dto/editNetworkMelpSRF.dto';\nimport { AddMelProgressPMDTO } from './dto/addMelProgressPM.dto';\nimport { AddMelProgressSRFDTO } from './dto/addMelProgressSRF.dto';\nexport declare class MelpController {\n    private readonly melpService;\n    constructor(melpService: MelpService);\n    getGlobalMelpSRFMonitorings(searchKeyword: string, pageLimit: number, pageIndex: number, year: number, sortKey: string, sortDirection: number): Promise<{\n        IndicatorsMonitoring: any[];\n        indicatorsTotalCount: any;\n        pageCount: number;\n    }>;\n    getGlobalMelpProgressMarkerMonitorings(pageLimit: number, pageIndex: number, searchKeyword: string, year: number, sortKey: string, sortDirection: number): Promise<{\n        ProgressMonitoring: any[];\n        progressMonitoringsTotalCount: any;\n        progressMonitoringPageCount: number;\n    }>;\n    getObjectiveLevelCounts(melpId: string): Promise<{\n        impactCount: number;\n        outcomeCount: number;\n        outputCount: number;\n    }>;\n    getOutcomesCount(melpId: string): Promise<{\n        outcomesCount: number;\n    }>;\n    getIndicatorsCount(resultId: string): Promise<{\n        indicatorsCount: number;\n    }>;\n    getProgressMarkersCount(outcomeId: string): Promise<{\n        progressMarkerCount: number;\n    }>;\n    getMelpResultsByYear(year: number, request: RequestWithUser): Promise<(import(\"./schema/melpResults.schema\").MelpResults & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    })[]>;\n    getMelpResultsByYearForCapnet(year: number, request: RequestWithUser): Promise<any[]>;\n    viewMelpSummary(year: number, searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number): Promise<{\n        melpSummary: any[];\n        melpsCount: number;\n        pagesCount: number;\n    }>;\n    viewNetworkOrPartnerMelpSummary(year: number, searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number, request: RequestWithUser): Promise<{\n        melpsList: any[];\n        melpsCount: any;\n        pageCount: number;\n    }>;\n    viewMelpSrfSummary(melpId: string, searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number): Promise<{\n        results: any[];\n        resultsCount: number;\n        pageCount: number;\n    }>;\n    viewMelpOMSummary(melpId: string, searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number): Promise<{\n        results: any[];\n        outcomesCount: number;\n        pageCount: number;\n    }>;\n    viewMelProgressSRFMonitoring(melpId: string, searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number): Promise<{\n        IndicatorsMonitoring: any[];\n        indicatorsTotalCount: any;\n        pageCount: number;\n    }>;\n    viewMelProgressPMMonitoring(melpId: string, searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number): Promise<{\n        ProgressMonitoring: any[];\n        progressMonitoringsTotalCount: any;\n        progressMonitoringPageCount: number;\n    }>;\n    createMelProgressSRF(melpId: string, addMelProgressSRF: AddMelProgressSRFDTO, request: RequestWithUser): Promise<{\n        message: string;\n    }>;\n    createMelProgressPM(melpId: string, addMelProgressPM: AddMelProgressPMDTO, request: RequestWithUser): Promise<{\n        message: string;\n    }>;\n    viewNetworkOrPartnerMelpSRF(melpId: string): Promise<{\n        melp: import(\"./schema/melp.schema\").Melp & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        };\n        melpTaskDetails: (import(\"./schema/melpTaskDetails.schema\").MelpTaskDetails & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n    }>;\n    viewAllNetworksMelp(searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number, year: number): Promise<{\n        melpsList: any[];\n        melpsCount: number;\n        pageCount: number;\n    }>;\n    viewAllPartnersMelp(searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number, year: number): Promise<{\n        melpsList: any[];\n        melpsCount: number;\n        pageCount: number;\n    }>;\n    viewMelpSrf(resultId: string, pageLimit: number, pageIndex: number): Promise<{\n        melpId: string;\n        melpYear: number;\n        melpCode: string;\n        resultId: string;\n        resultCode: string;\n        resultName: string;\n        objectiveLevel: string;\n        indicatorList: any[];\n        indicatorsCount: number;\n        pageCount: number;\n    }>;\n    viewMelpOM(outcomeId: string): Promise<{\n        outcome: import(\"./schema/melpOutcomes.schema\").MelpOutcomes & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        };\n        progressMarkers: any[];\n        progressMarkerTotalCount: number;\n    }>;\n    createCapnetMelpSRF(createMelpSRF: CreateMelpSRFDTO, addResult: AddResultDTO, addIndicator: AddIndicatorDTO, request: RequestWithUser): Promise<{\n        melp: import(\"./schema/melp.schema\").Melp & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        };\n        melpResult: import(\"./schema/melpResults.schema\").MelpResults & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        };\n        indicatorsCount: number;\n        impactCount: number;\n        outcomeCount: number;\n        outputCount: number;\n        pageCount: number;\n    }>;\n    createNetworkOrPartnerMelpSRF(createNetworkMelpSRF: CreateNetworkMelpSRFDTO, request: RequestWithUser): Promise<{\n        melp: import(\"./schema/melp.schema\").Melp & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        };\n        melpTasks: (Omit<import(\"mongoose\").MergeType<import(\"./schema/melpTaskDetails.schema\").MelpTaskDetails, {\n            melpId: any;\n            taskDetailsId: any;\n            createdBy: any;\n            updatedBy: any;\n            role: string;\n            cost: number;\n            melpTaskId: import(\"mongoose\").Schema.Types.ObjectId;\n        }>, keyof import(\"./schema/melpTaskDetails.schema\").MelpTaskDetails> & import(\"./schema/melpTaskDetails.schema\").MelpTaskDetails & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n    }>;\n    addIndicator(resultId: string, addIndicator: AddIndicatorDTO, request: RequestWithUser): Promise<{\n        melpResult: import(\"./schema/melpResults.schema\").MelpResults & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        };\n        melp: import(\"./schema/melp.schema\").Melp & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        };\n        indicatorsCount: number;\n        impactCount: number;\n        outcomeCount: number;\n        outputCount: number;\n        pageCount: number;\n    }>;\n    addResult(melpId: string, addResult: AddResultDTO, addIndicator: AddIndicatorDTO, request: RequestWithUser): Promise<{\n        melp: import(\"./schema/melp.schema\").Melp & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        };\n        melpResult: import(\"./schema/melpResults.schema\").MelpResults & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        };\n        indicatorsCount: number;\n        impactCount: number;\n        outcomeCount: number;\n        outputCount: number;\n        pageCount: number;\n    }>;\n    getBoundaryPartners(): Promise<any[]>;\n    createMelpOM(melpId: string, createMelpOM: CreateMelpOMDTO, request: RequestWithUser): Promise<(Omit<import(\"mongoose\").MergeType<import(\"./schema/melpOutcomeProgressMarkers.schema\").MelpOutcomeProgressMarkers, {\n        progressMarkersId: any;\n        outcomeId: any;\n        createdBy: any;\n        updatedBy: any;\n        progressMarkerCode: string;\n        progressMarker: string;\n        priorityId: import(\"mongoose\").Types.ObjectId;\n        progressMonitoringQ2: import(\"mongoose\").Types.ObjectId;\n        progressMonitoringQ4: import(\"mongoose\").Types.ObjectId;\n        descriptionOfChange: string;\n        contributingFactors: string;\n        sourceOfEvidence: string;\n        unintendedChanges: string;\n    }>, keyof import(\"./schema/melpOutcomeProgressMarkers.schema\").MelpOutcomeProgressMarkers> & import(\"./schema/melpOutcomeProgressMarkers.schema\").MelpOutcomeProgressMarkers & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    })[]>;\n    getIndicatorsByResultId(resultId: string): Promise<(import(\"./schema/melpResultIndicators.schema\").MelpResultIndicators & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    })[]>;\n    editNetworkSRFScope(melpId: string, editNetworkSRF: EditNetworkMelpSRFDTO, request: RequestWithUser): Promise<import(\"./schema/melp.schema\").Melp & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    editResult(resultId: string, melpId: string, editResult: EditResultDTO, request: RequestWithUser): Promise<import(\"./schema/melpResults.schema\").MelpResults & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    editOM(outcomeId: string, melpId: string, editOM: EditOmDTO, request: RequestWithUser): Promise<import(\"./schema/melpOutcomes.schema\").MelpOutcomes & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    editIndicator(indicatorId: string, melpId: string, editIndicator: EditIndicatorDTO, request: RequestWithUser): Promise<import(\"./schema/melpResultIndicators.schema\").MelpResultIndicators & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    deleteMelp(melpId: string, request: RequestWithUser): Promise<any>;\n    deleteResult(resultId: string, melpId: string, request: RequestWithUser): Promise<any>;\n    deleteIndicator(indicatorId: string, resultId: string, melpId: string, request: RequestWithUser): Promise<import(\"./schema/melpResultIndicators.schema\").MelpResultIndicators & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    deleteOM(outcomeId: string, melpId: string, request: RequestWithUser): Promise<import(\"./schema/melpOutcomes.schema\").MelpOutcomes & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    deleteIndicatorsMonitoring(indicatorMonitoringId: string, melpId: string, request: RequestWithUser): Promise<import(\"./schema/melpIndicatorMonitoring.schema\").MelpIndicatorMonitoring & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    deleteMonitoringRisk(monitoringRiskId: string, melpId: string, request: RequestWithUser): Promise<import(\"./schema/melpIndicatorRisks.schema\").MelpIndicatorRisks & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    deleteProgressMarker(progressMarkerId: string, melpId: string, request: RequestWithUser): Promise<import(\"./schema/melpOutcomeProgressMarkers.schema\").MelpOutcomeProgressMarkers & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    getPMCodeCount(outcomeId: string): Promise<number>;\n    increasePMCodeCount(outcomeId: string): Promise<import(\"./schema/melpOutcomes.schema\").MelpOutcomes & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    getProgressMonitoringList(): Promise<(import(\"../common/staticSchema/progressMonitoring.schema\").ProgressMonitoring & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    })[]>;\n    getMelpTasks(): Promise<(import(\"./schema/melpTasks.schema\").MelpTasks & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    })[]>;\n    getPriorityList(): Promise<(import(\"../common/staticSchema/priority.schema\").Priority & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    })[]>;\n    downloadIndividualMelp(melpId: string, res: any): Promise<void>;\n    downloadMultipleMelp(year: number, request: RequestWithUser, res: any): Promise<void>;\n    downloadGeneralUserMultipleMelp(year: number, network: boolean, res: any): Promise<void>;\n    getMelp(melpId: string): Promise<(import(\"./schema/melp.schema\").Melp & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    })[]>;\n    checkMelpYearExists(year: number, request: any): Promise<void>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/melp/melp.module.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/melp/melp.module.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class MelpModule {\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/melp/melp.service.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/melp/melp.service.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Model, Types } from 'mongoose';\nimport { AddIndicatorDTO } from './dto/addIndicator.dto';\nimport { CreateMelpSRFDTO } from './dto/createMelpSRF.dto';\nimport { Melp } from './schema/melp.schema';\nimport { MelpIndicatorMonitoring } from './schema/melpIndicatorMonitoring.schema';\nimport { MelpIndicatorRisks } from './schema/melpIndicatorRisks.schema';\nimport { MelpOutcomeProgressMarkers } from './schema/melpOutcomeProgressMarkers.schema';\nimport { MelpOutcomes } from './schema/melpOutcomes.schema';\nimport { MelpResultIndicators } from './schema/melpResultIndicators.schema';\nimport { MelpResults } from './schema/melpResults.schema';\nimport { AddResultDTO } from './dto/addResult.dto';\nimport { CreateMelpOMDTO } from './dto/createMelpOM.dto';\nimport { UserService } from '../users/user.service';\nimport { Priority } from '../common/staticSchema/priority.schema';\nimport { ProgressMonitoring } from '../common/staticSchema/progressMonitoring.schema';\nimport { NetworkService } from '../networks/network.service';\nimport { EditResultDTO } from './dto/editResult.dto';\nimport { EditOmDTO } from './dto/editOM.dto';\nimport { EditIndicatorDTO } from './dto/editIndicator.dto';\nimport { CreateNetworkMelpSRFDTO } from './dto/createNetworkMelpSRF.dto';\nimport { MelpTasks } from './schema/melpTasks.schema';\nimport { MelpTaskDetails } from './schema/melpTaskDetails.schema';\nimport { EditNetworkMelpSRFDTO } from './dto/editNetworkMelpSRF.dto';\nimport * as exceljs from 'exceljs';\nimport { PartnerService } from '../partners/partner.service';\nimport { ActivityLog } from '../common/schema/activityLog.schema';\nimport { AddMelProgressSRFDTO } from './dto/addMelProgressSRF.dto';\nimport { AddMelProgressPMDTO } from './dto/addMelProgressPM.dto';\nimport { Activities } from '../activities/schema/activities.schema';\nimport { ActivityProposals } from '../activities/schema/activityProposals.schema';\nexport declare class MelpService {\n    private melpModel;\n    private melpResultsModel;\n    private melpResultIndicatorsModel;\n    private melpIndicatorMonitoringModel;\n    private melpIndicatorRisksModel;\n    private melpOutcomesModel;\n    private melpOutcomeProgressMarkersModel;\n    private readonly priorityModel;\n    private readonly progressMonitoringModel;\n    private readonly melpTaskModel;\n    private melpTaskDetailsModel;\n    private activityLogModel;\n    private userService;\n    private networkService;\n    private partnerService;\n    private activityModel;\n    private activityProposalModel;\n    constructor(melpModel: Model<Melp>, melpResultsModel: Model<MelpResults>, melpResultIndicatorsModel: Model<MelpResultIndicators>, melpIndicatorMonitoringModel: Model<MelpIndicatorMonitoring>, melpIndicatorRisksModel: Model<MelpIndicatorRisks>, melpOutcomesModel: Model<MelpOutcomes>, melpOutcomeProgressMarkersModel: Model<MelpOutcomeProgressMarkers>, priorityModel: Model<Priority>, progressMonitoringModel: Model<ProgressMonitoring>, melpTaskModel: Model<MelpTasks>, melpTaskDetailsModel: Model<MelpTaskDetails>, activityLogModel: Model<ActivityLog>, userService: UserService, networkService: NetworkService, partnerService: PartnerService, activityModel: Model<Activities>, activityProposalModel: Model<ActivityProposals>);\n    checkIfMelpYearExists(year: number, instituteName: string): Promise<boolean>;\n    checkMelpYearExists(year: number, user: any): Promise<void>;\n    checkIfMelpExists(melpId: string): Promise<boolean>;\n    getObjectiveLevelCounts(melpId: string): Promise<{\n        impactCount: number;\n        outcomeCount: number;\n        outputCount: number;\n    }>;\n    getOutcomesCount(melpId: string): Promise<{\n        outcomesCount: number;\n    }>;\n    getIndicatorsCount(resultId: string): Promise<{\n        indicatorsCount: number;\n    }>;\n    getProgressMarkersCount(outcomeId: string): Promise<{\n        progressMarkerCount: number;\n    }>;\n    getPriority(priorityId: any): Promise<string>;\n    getMelpTask(): Promise<(MelpTasks & {\n        _id: Types.ObjectId;\n    })[]>;\n    getPriorityList(): Promise<(Priority & {\n        _id: Types.ObjectId;\n    })[]>;\n    getProgressMonitoring(id: any): Promise<ProgressMonitoring & {\n        _id: Types.ObjectId;\n    }>;\n    boundaryPartners(): Promise<any[]>;\n    getMelpByMelpId(melpId: string): Promise<Melp & {\n        _id: Types.ObjectId;\n    }>;\n    getResultByResultId(resultId: string): Promise<MelpResults & {\n        _id: Types.ObjectId;\n    }>;\n    getIndicatorByIndicatorId(indicatorId: string): Promise<MelpResultIndicators & {\n        _id: Types.ObjectId;\n    }>;\n    getOutcomeByOutcomeId(outcomeId: string): Promise<MelpOutcomes & {\n        _id: Types.ObjectId;\n    }>;\n    getResultById(id: any): Promise<MelpResults & {\n        _id: Types.ObjectId;\n    }>;\n    getIndicatorById(indicatorId: any): Promise<MelpResultIndicators & {\n        _id: Types.ObjectId;\n    }>;\n    getMelpResultsByYear(year: number, user: any): Promise<(MelpResults & {\n        _id: Types.ObjectId;\n    })[]>;\n    getMelpResultsByYearForCapnet(year: number, user: any): Promise<any[]>;\n    getIndicatorsByResultId(id: string): Promise<(MelpResultIndicators & {\n        _id: Types.ObjectId;\n    })[]>;\n    getArrayOfMelpObjects(melpsList: any): Promise<any[]>;\n    addActivityLog(user: any, description: string): Promise<void>;\n    commonFunctionForSearchSort(searchKeyword: string, sortKey: string, sortDirection: number): Promise<{\n        regex: RegExp;\n        sortQuery: {};\n    }>;\n    viewMelpSummary(year: number, searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number): Promise<{\n        melpSummary: any[];\n        melpsCount: number;\n        pagesCount: number;\n    }>;\n    viewAllNetworksMelp(searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number, year: number): Promise<{\n        melpsList: any[];\n        melpsCount: number;\n        pageCount: number;\n    }>;\n    viewAllPartnersMelp(searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number, year: number): Promise<{\n        melpsList: any[];\n        melpsCount: number;\n        pageCount: number;\n    }>;\n    viewNetworkOrPartnerMelpSummary(year: number, searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number, user: any): Promise<{\n        melpsList: any[];\n        melpsCount: any;\n        pageCount: number;\n    }>;\n    viewMelpSrfSummary(melpId: string, searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number): Promise<{\n        results: any[];\n        resultsCount: number;\n        pageCount: number;\n    }>;\n    viewMelpSrf(resultId: string, pageLimit: number, pageIndex: number): Promise<{\n        melpId: string;\n        melpYear: number;\n        melpCode: string;\n        resultId: string;\n        resultCode: string;\n        resultName: string;\n        objectiveLevel: string;\n        indicatorList: any[];\n        indicatorsCount: number;\n        pageCount: number;\n    }>;\n    viewMelpOMSummary(melpId: string, searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number): Promise<{\n        results: any[];\n        outcomesCount: number;\n        pageCount: number;\n    }>;\n    viewMelpOm(outcomeId: string): Promise<{\n        outcome: MelpOutcomes & {\n            _id: Types.ObjectId;\n        };\n        progressMarkers: any[];\n        progressMarkerTotalCount: number;\n    }>;\n    getMelpSRFMonitoringsGlobal(melpId: string, searchKeyword: string, sortKey: string, sortDirection: number | any): Promise<any[]>;\n    getMelpProgressMarkerMonitoringsGlobal(melpId: string, searchKeyword: string, sortKey: string, sortDirection: number | any): Promise<any[]>;\n    getArrayOfObjectsForMelpProgressSRF(results: any): Promise<{\n        indicatorsMonitoringList: any[];\n        indicatorsTotalCount: any;\n    }>;\n    getArrayOfObjectsForMelpProgressSRFGlobal(results: any): Promise<{\n        indicatorsMonitoringList: any[];\n        indicatorsTotalCount: any;\n    }>;\n    getArrayOfObjectsForMelpProgressPM(outcomeMappings: any): Promise<{\n        progressMonitoringList: any[];\n        progressMonitoringsTotalCount: any;\n    }>;\n    getArrayOfObjectsForMelpProgressPMGlobal(outcomeMappings: any): Promise<{\n        progressMonitoringList: any[];\n        progressMonitoringsTotalCount: any;\n    }>;\n    viewMelProgressSRF(melpId: string, searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number): Promise<{\n        IndicatorsMonitoring: any[];\n        indicatorsTotalCount: any;\n        pageCount: number;\n    }>;\n    viewMelProgressPM(melpId: string, searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number): Promise<{\n        ProgressMonitoring: any[];\n        progressMonitoringsTotalCount: any;\n        progressMonitoringPageCount: number;\n    }>;\n    createMelProgressSRF(melpId: string, addMelProgressSRF: AddMelProgressSRFDTO, user: any): Promise<{\n        message: string;\n    }>;\n    createMelProgressPM(melpId: string, addMelProgressPM: AddMelProgressPMDTO, user: any): Promise<{\n        message: string;\n    }>;\n    createCapnetMelpSRF(createMelpSRF: CreateMelpSRFDTO, addResult: AddResultDTO, addIndicator: AddIndicatorDTO, user: any): Promise<{\n        melp: Melp & {\n            _id: Types.ObjectId;\n        };\n        melpResult: MelpResults & {\n            _id: Types.ObjectId;\n        };\n        indicatorsCount: number;\n        impactCount: number;\n        outcomeCount: number;\n        outputCount: number;\n        pageCount: number;\n    }>;\n    createNetworkOrPartnerMelpSRF(createNetworkOrPartnerMelpSRF: CreateNetworkMelpSRFDTO, user: any): Promise<{\n        melp: Melp & {\n            _id: Types.ObjectId;\n        };\n        melpTasks: (Omit<import(\"mongoose\").MergeType<MelpTaskDetails, {\n            melpId: any;\n            taskDetailsId: any;\n            createdBy: any;\n            updatedBy: any;\n            role: string;\n            cost: number;\n            melpTaskId: import(\"mongoose\").Schema.Types.ObjectId;\n        }>, keyof MelpTaskDetails> & MelpTaskDetails & {\n            _id: Types.ObjectId;\n        })[];\n    }>;\n    addResult(melpId: string, addResult: AddResultDTO, addIndicator: AddIndicatorDTO, user: any): Promise<{\n        melp: Melp & {\n            _id: Types.ObjectId;\n        };\n        melpResult: MelpResults & {\n            _id: Types.ObjectId;\n        };\n        indicatorsCount: number;\n        impactCount: number;\n        outcomeCount: number;\n        outputCount: number;\n        pageCount: number;\n    }>;\n    addIndicator(resultId: string, addIndicator: AddIndicatorDTO, user: any): Promise<{\n        melpResult: MelpResults & {\n            _id: Types.ObjectId;\n        };\n        melp: Melp & {\n            _id: Types.ObjectId;\n        };\n        indicatorsCount: number;\n        impactCount: number;\n        outcomeCount: number;\n        outputCount: number;\n        pageCount: number;\n    }>;\n    createMelpOM(melpId: string, createMelpOM: CreateMelpOMDTO, user: any): Promise<(Omit<import(\"mongoose\").MergeType<MelpOutcomeProgressMarkers, {\n        progressMarkersId: any;\n        outcomeId: any;\n        createdBy: any;\n        updatedBy: any;\n        progressMarkerCode: string;\n        progressMarker: string;\n        priorityId: Types.ObjectId;\n        progressMonitoringQ2: Types.ObjectId;\n        progressMonitoringQ4: Types.ObjectId;\n        descriptionOfChange: string;\n        contributingFactors: string;\n        sourceOfEvidence: string;\n        unintendedChanges: string;\n    }>, keyof MelpOutcomeProgressMarkers> & MelpOutcomeProgressMarkers & {\n        _id: Types.ObjectId;\n    })[]>;\n    getGlobalMelpSRFMonitorings(year: number, searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number): Promise<{\n        IndicatorsMonitoring: any[];\n        indicatorsTotalCount: any;\n        pageCount: number;\n    }>;\n    getGlobalMelpProgressMarkerMonitorings(year: number, searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number): Promise<{\n        ProgressMonitoring: any[];\n        progressMonitoringsTotalCount: any;\n        progressMonitoringPageCount: number;\n    }>;\n    viewNetworkOrPartnerMelpSRF(melpId: string): Promise<{\n        melp: Melp & {\n            _id: Types.ObjectId;\n        };\n        melpTaskDetails: (MelpTaskDetails & {\n            _id: Types.ObjectId;\n        })[];\n    }>;\n    editNetworkSRFScope(melpId: string, editNetworkSRF: EditNetworkMelpSRFDTO, user: any): Promise<Melp & {\n        _id: Types.ObjectId;\n    }>;\n    checkIfMelpResultIndicatorCanBeEdited(melpId: string, user: any): Promise<Melp & {\n        _id: Types.ObjectId;\n    }>;\n    checkIfResultIsUsedInWorkplanActivity(resultId: any, user: any): Promise<Activities & {\n        _id: Types.ObjectId;\n    }>;\n    checkIfResultIsUsedInProposal(resultId: any, user: any): Promise<ActivityProposals & {\n        _id: Types.ObjectId;\n    }>;\n    checkIfIndicatorIsUsedInWorkplanActivity(indicatorId: any, user: any): Promise<Activities & {\n        _id: Types.ObjectId;\n    }>;\n    checkIfIndicatorIsUsedInProposal(indicatorId: any, user: any): Promise<ActivityProposals & {\n        _id: Types.ObjectId;\n    }>;\n    editResult(resultId: string, melpId: string, editResult: EditResultDTO, user: any): Promise<MelpResults & {\n        _id: Types.ObjectId;\n    }>;\n    editIndicator(indicatorId: string, melpId: string, editIndicator: EditIndicatorDTO, user: any): Promise<MelpResultIndicators & {\n        _id: Types.ObjectId;\n    }>;\n    editOM(outcomeId: string, melpId: string, editOM: EditOmDTO, user: any): Promise<MelpOutcomes & {\n        _id: Types.ObjectId;\n    }>;\n    checkIfMelpResultIndicatorCanBeDeleted(melpId: string, user: any): Promise<Melp & {\n        _id: Types.ObjectId;\n    }>;\n    deleteMelp(melpId: string, user: any): Promise<any>;\n    deleteResult(resultId: string, melpId: string, user: any): Promise<any>;\n    deleteIndicator(indicatorId: string, resultId: string, melpId: string, user: any): Promise<MelpResultIndicators & {\n        _id: Types.ObjectId;\n    }>;\n    deleteOM(outcomeId: string, melpId: string, user: any): Promise<MelpOutcomes & {\n        _id: Types.ObjectId;\n    }>;\n    deleteIndicatorsMonitoring(indicatorMonitoringId: string, melpId: string, user: any): Promise<MelpIndicatorMonitoring & {\n        _id: Types.ObjectId;\n    }>;\n    deleteMonitoringRisk(monitoringRiskId: string, melpId: string, user: any): Promise<MelpIndicatorRisks & {\n        _id: Types.ObjectId;\n    }>;\n    deleteProgressMarker(progressMarkerId: string, melpId: string, user: any): Promise<MelpOutcomeProgressMarkers & {\n        _id: Types.ObjectId;\n    }>;\n    updateGeneralUserMelpStatus(melpId: any, statusId: any): Promise<Melp & {\n        _id: Types.ObjectId;\n    }>;\n    updateApprovedCount(count: number, melpId: string): Promise<Melp & {\n        _id: Types.ObjectId;\n    }>;\n    setSubmittedAtTime(melpId: string, submittedAt: Date): Promise<Melp & {\n        _id: Types.ObjectId;\n    }>;\n    setApprovedAtTime(melpId: string, approvedAt: Date): Promise<Melp & {\n        _id: Types.ObjectId;\n    }>;\n    worksheetCreation(resultsSheet: exceljs.Worksheet, risksSheet: exceljs.Worksheet, outcomesSheet: exceljs.Worksheet): Promise<void>;\n    downloadMelp(melpId: string, resultsSheet: exceljs.Worksheet, risksSheet: exceljs.Worksheet, outcomesSheet: exceljs.Worksheet, resultCount: number, riskCount: number, outcomeCount: number): Promise<{\n        resultsCount: number;\n        risksCount: number;\n        outcomesCount: number;\n    }>;\n    downloadIndividualMelp(res: any, melpId: string): Promise<void>;\n    commonFunctionForMultipleDownload(res: any, year: any, melpList: Melp[], resultsSheet: exceljs.Worksheet, risksSheet: exceljs.Worksheet, outcomesSheet: exceljs.Worksheet, workbook: exceljs.Workbook): Promise<void>;\n    downloadMultipleMelp(res: any, year: number, user: any): Promise<void>;\n    downloadGeneralUserMultipleMelp(res: any, year: number, isNetworkMelp: boolean): Promise<void>;\n    getPMCodeCount(outcomeId: any): Promise<number>;\n    increasePMCodeCount(outcomeId: any): Promise<MelpOutcomes & {\n        _id: Types.ObjectId;\n    }>;\n    getProgressMonitoringList(): Promise<(ProgressMonitoring & {\n        _id: Types.ObjectId;\n    })[]>;\n    getProgressMonitoringIdByName(progressMonitoring: string): Promise<any>;\n    getListOfMelpByYear(year: number, networkId: any, partnerId: any): Promise<(Melp & {\n        _id: Types.ObjectId;\n    })[]>;\n    getProgressMonitoringCountsByMelpId(melpId: any, isQ2: boolean): Promise<{\n        totalLowPMCount: number;\n        totalMediumPMCount: number;\n        totalHighPMCount: number;\n    }>;\n    getMelp(melpId: string): Promise<(Melp & {\n        _id: Types.ObjectId;\n    })[]>;\n    getIndicatorMonitoringCounts(year: number, networkId: any, partnerId: any): Promise<{\n        indicatorsCount: number;\n    }>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/melp/schema/boundaryPartners.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/melp/schema/boundaryPartners.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Base } from '../../common/schema/base.schema';\nexport declare class BoundaryPartner extends Base {\n    boundaryPartnerId: string;\n    partnerName: string;\n}\nexport declare const BoundaryPartnerSchema: import(\"mongoose\").Schema<BoundaryPartner, import(\"mongoose\").Model<BoundaryPartner, any, any, any, any>, {}, {}, {}, {}, \"type\", BoundaryPartner>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/melp/schema/melp.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/melp/schema/melp.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Types } from 'mongoose';\nimport { Base } from '../../common/schema/base.schema';\nexport declare class Melp extends Base {\n    melpId: string;\n    melpCode: string;\n    year: number;\n    statusId: Types.ObjectId;\n    networkId: Types.ObjectId;\n    partnerId: Types.ObjectId;\n    instituteName: string;\n    scopeAndPurpose: string;\n    approvedCount: number;\n    isDeleted: boolean;\n    createdAt?: Date;\n    updatedAt?: Date;\n    submittedAt: Date;\n    approvedAt: Date;\n}\nexport declare const MelpSchema: import(\"mongoose\").Schema<Melp, import(\"mongoose\").Model<Melp, any, any, any, any>, {}, {}, {}, {}, \"type\", Melp>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/melp/schema/melpIndicatorMonitoring.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/melp/schema/melpIndicatorMonitoring.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Types } from 'mongoose';\nimport { Base } from '../../common/schema/base.schema';\nexport declare class MelpIndicatorMonitoring extends Base {\n    indicatorMonitoringId: string;\n    resultIndicatorId: Types.ObjectId;\n    year: number;\n    targetAchieved: number;\n    progress: string;\n    explaination: string;\n    baseline: string;\n    isDeleted: boolean;\n    createdAt?: Date;\n    updatedAt?: Date;\n}\nexport declare const MelpIndicatorMonitoringSchema: import(\"mongoose\").Schema<MelpIndicatorMonitoring, import(\"mongoose\").Model<MelpIndicatorMonitoring, any, any, any, any>, {}, {}, {}, {}, \"type\", MelpIndicatorMonitoring>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/melp/schema/melpIndicatorRisks.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/melp/schema/melpIndicatorRisks.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Types } from 'mongoose';\nimport { Base } from '../../common/schema/base.schema';\nexport declare class MelpIndicatorRisks extends Base {\n    indicatorRisksId: string;\n    resultIndicatorId: Types.ObjectId;\n    issue: string;\n    mitigatingAction: string;\n    isDeleted: boolean;\n    createdAt?: Date;\n    updatedAt?: Date;\n}\nexport declare const MelpIndicatorRisksSchema: import(\"mongoose\").Schema<MelpIndicatorRisks, import(\"mongoose\").Model<MelpIndicatorRisks, any, any, any, any>, {}, {}, {}, {}, \"type\", MelpIndicatorRisks>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/melp/schema/melpIndicatorsMonitoring.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/melp/schema/melpIndicatorsMonitoring.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/melp/schema/melpIndicatorsRisks.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/melp/schema/melpIndicatorsRisks.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/melp/schema/melpOutcomeProgressMarkers.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/melp/schema/melpOutcomeProgressMarkers.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Types } from 'mongoose';\nimport { Base } from '../../common/schema/base.schema';\nexport declare class MelpOutcomeProgressMarkers extends Base {\n    progressMarkersId: string;\n    outcomeId: Types.ObjectId;\n    progressMarkerCode: string;\n    progressMarker: string;\n    priorityId: Types.ObjectId;\n    progressMonitoringQ2: Types.ObjectId;\n    progressMonitoringQ4: Types.ObjectId;\n    descriptionOfChange: string;\n    contributingFactors: string;\n    sourceOfEvidence: string;\n    unintendedChanges: string;\n    isDeleted: boolean;\n    createdAt?: Date;\n    updatedAt?: Date;\n}\nexport declare const MelpOutcomeProgressMarkersSchema: import(\"mongoose\").Schema<MelpOutcomeProgressMarkers, import(\"mongoose\").Model<MelpOutcomeProgressMarkers, any, any, any, any>, {}, {}, {}, {}, \"type\", MelpOutcomeProgressMarkers>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/melp/schema/melpOutcomes.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/melp/schema/melpOutcomes.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Types } from 'mongoose';\nimport { Base } from '../../common/schema/base.schema';\nexport declare class MelpOutcomes extends Base {\n    outcomeId: string;\n    melpId: Types.ObjectId;\n    outcomeCode: string;\n    outcomeChallenge: string;\n    boundaryPartners: string[];\n    progressMarkerCount: number;\n    isDeleted: boolean;\n    createdAt?: Date;\n    updatedAt?: Date;\n}\nexport declare const MelpOutcomesSchema: import(\"mongoose\").Schema<MelpOutcomes, import(\"mongoose\").Model<MelpOutcomes, any, any, any, any>, {}, {}, {}, {}, \"type\", MelpOutcomes>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/melp/schema/melpResultIndicators.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/melp/schema/melpResultIndicators.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Types } from 'mongoose';\nimport { Base } from '../../common/schema/base.schema';\nexport declare class MelpResultIndicators extends Base {\n    indicatorId: string;\n    resultId: Types.ObjectId;\n    indicatorName: string;\n    definition: string;\n    indicatorCode: string;\n    measurementUnit: string;\n    cumulativeTarget: string;\n    completionYear: number;\n    sourceOfData: string;\n    collectionMethodType: string;\n    collectionMethodName: string;\n    collectionFrequencyType: string;\n    collectionFrequencyName: string;\n    isDeleted: boolean;\n    createdAt?: Date;\n    updatedAt?: Date;\n}\nexport declare const MelpResultIndicatorsSchema: import(\"mongoose\").Schema<MelpResultIndicators, import(\"mongoose\").Model<MelpResultIndicators, any, any, any, any>, {}, {}, {}, {}, \"type\", MelpResultIndicators>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/melp/schema/melpResults.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/melp/schema/melpResults.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Types } from 'mongoose';\nimport { Base } from '../../common/schema/base.schema';\nexport declare class MelpResults extends Base {\n    resultId: string;\n    melpId: Types.ObjectId;\n    resultName: string;\n    objectiveLevel: string;\n    resultCode: string;\n    isDeleted: boolean;\n    createdAt?: Date;\n    updatedAt?: Date;\n}\nexport declare const MelpResultsSchema: import(\"mongoose\").Schema<MelpResults, import(\"mongoose\").Model<MelpResults, any, any, any, any>, {}, {}, {}, {}, \"type\", MelpResults>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/melp/schema/melpTaskDetails.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/melp/schema/melpTaskDetails.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Types, Document } from 'mongoose';\nexport declare class MelpTaskDetails extends Document {\n    taskDetailsId: string;\n    melpTaskId: Types.ObjectId;\n    melpId: Types.ObjectId;\n    role: string;\n    cost: number;\n}\nexport declare const MelpTaskDetailsSchema: import(\"mongoose\").Schema<MelpTaskDetails, import(\"mongoose\").Model<MelpTaskDetails, any, any, any, any>, {}, {}, {}, {}, \"type\", MelpTaskDetails>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/melp/schema/melpTasks.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/melp/schema/melpTasks.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Document } from 'mongoose';\nexport declare class MelpTasks extends Document {\n    taskName: string;\n}\nexport declare const MelpTasksSchema: import(\"mongoose\").Schema<MelpTasks, import(\"mongoose\").Model<MelpTasks, any, any, any, any>, {}, {}, {}, {}, \"type\", MelpTasks>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/melp/schema/priority.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/melp/schema/priority.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indizes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Document } from \"mongoose\";\nexport declare class Priority extends Document {\n    priority: string;\n}\nexport declare const PrioritySchema: import(\"mongoose\").Schema<Priority, import(\"mongoose\").Model<Priority, any, any, any, any>, {}, {}, any, {}, \"type\", Priority>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/melp/schema/progressMonitoring.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/melp/schema/progressMonitoring.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/melp/schema/static/priority.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/melp/schema/static/priority.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Document } from 'mongoose';\nexport declare class Priority extends Document {\n    priority: string;\n}\nexport declare const PrioritySchema: import(\"mongoose\").Schema<Priority, import(\"mongoose\").Model<Priority, any, any, any, any>, {}, {}, {}, {}, \"type\", Priority>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/melp/schema/static/progressMonitoring.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/melp/schema/static/progressMonitoring.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Document } from 'mongoose';\nexport declare class ProgressMonitoring extends Document {\n    progressMonitoring: string;\n}\nexport declare const ProgressMonitoringSchema: import(\"mongoose\").Schema<ProgressMonitoring, import(\"mongoose\").Model<ProgressMonitoring, any, any, any, any>, {}, {}, {}, {}, \"type\", ProgressMonitoring>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/networkReporting/dto/addInvoice.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/networkReporting/dto/addInvoice.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Types } from 'mongoose';\nimport { PriceAndQty } from '../schema/invoice.schema';\nimport { CommonBankDataDTO } from './commonBankData.dto';\nexport declare class AddInvoiceDTO extends CommonBankDataDTO {\n    name: string;\n    address: string;\n    hostInstitute: string;\n    typeOfPayment: string;\n    paymentTerms: string;\n    dueDate: Date;\n    bankAccountName: string;\n    bankAccountNumber: number;\n    emailAddress: string;\n    outputReportId: Types.ObjectId;\n    outcomeReportId: Types.ObjectId;\n    progressReportId: Types.ObjectId;\n    annualReportId: Types.ObjectId;\n    totalOfUnitPrice: number;\n    totalOfLineTotal: number;\n    invoiceTo: string;\n    priceAndQtyArray: PriceAndQty[];\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/networkReporting/dto/commonBankData.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/networkReporting/dto/commonBankData.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class CommonBankDataDTO {\n    bankAddress: string;\n    swiftCode: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/networkReporting/dto/commonReport.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/networkReporting/dto/commonReport.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class CommonReportDTO {\n    year: number;\n    networkManagerName: string;\n    networkManagerEmail: string;\n    changesInGeneralInfo: string;\n    reportOnProgress: string;\n    networksImprovedVisibility: string[];\n    otherImprovedVisibility: string;\n    totalNumberOfPlannedCapacityWithCapnet: number;\n    totalNumberOfDeliveredCapacityWithCapnet: number;\n    challenges: string[];\n    otherChallenge: string;\n    totalNumberOfPlannedCapacityWithoutCapnet: number;\n    numberOfPotentialStoriesOfChange: number;\n    hasSubmittedInfoToDevelopStoryOfChange: boolean;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/networkReporting/dto/createAnnualReport.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/networkReporting/dto/createAnnualReport.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CommonReportDTO } from './commonReport.dto';\nexport declare class CreateAnnualReportDTO extends CommonReportDTO {\n    annualReportCode: string;\n    networkWebsite: string;\n    lastUpdateOnWebsite: Date;\n    actionsTakenToSupportNetworkMembers: string[];\n    otherActionsTaken: string;\n    numberOfActivePartners: number;\n    hasNetworkAchievedWhatIsExpected: boolean;\n    whatIsExpectedDetails: string;\n    anyContributingFactors: boolean;\n    contributingFactorsDetails: string;\n    anyUnexpectedOutcome: boolean;\n    unexpectedOutcomeDetails: string;\n    sustainPositiveResults: string;\n    networkPerformanceRating: number;\n    networkPerformanceRatingExplaination: string;\n    networkKnowledgeRating: number;\n    networkKnowledgeRatingExplaination: string;\n    networkPartnerEngagementRating: number;\n    networkPartnerEngagementRatingExplaination: string;\n    networkDemandDrivenCapacityRating: number;\n    networkDemandDrivenCapacityRatingExplaination: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/networkReporting/dto/createProgressReport.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/networkReporting/dto/createProgressReport.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CommonReportDTO } from './commonReport.dto';\nexport declare class CreateProgressReportDTO extends CommonReportDTO {\n    progressReportCode: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/networkReporting/dto/editAnnualReport.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/networkReporting/dto/editAnnualReport.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CreateAnnualReportDTO } from './createAnnualReport.dto';\ndeclare const EditAnnualReportDTO_base: import(\"@nestjs/common\").Type<Partial<CreateAnnualReportDTO>>;\nexport declare class EditAnnualReportDTO extends EditAnnualReportDTO_base {\n}\nexport {};\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/networkReporting/dto/editInvoice.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/networkReporting/dto/editInvoice.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AddInvoiceDTO } from './addInvoice.dto';\ndeclare const EditInvoiceDTO_base: import(\"@nestjs/common\").Type<Partial<AddInvoiceDTO>>;\nexport declare class EditInvoiceDTO extends EditInvoiceDTO_base {\n}\nexport {};\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/networkReporting/dto/editProgressReport.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/networkReporting/dto/editProgressReport.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CreateProgressReportDTO } from './createProgressReport.dto';\ndeclare const EditProgressReportDTO_base: import(\"@nestjs/common\").Type<Partial<CreateProgressReportDTO>>;\nexport declare class EditProgressReportDTO extends EditProgressReportDTO_base {\n}\nexport {};\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/networkReporting/dto/progressReport.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/networkReporting/dto/progressReport.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/networkReporting/networkReporting.controller.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/networkReporting/networkReporting.controller.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { AddInvoiceDTO } from './dto/addInvoice.dto';\nimport { CreateAnnualReportDTO } from './dto/createAnnualReport.dto';\nimport { CreateProgressReportDTO } from './dto/createProgressReport.dto';\nimport { EditAnnualReportDTO } from './dto/editAnnualReport.dto';\nimport { EditInvoiceDTO } from './dto/editInvoice.dto';\nimport { EditProgressReportDTO } from './dto/editProgressReport.dto';\nimport { NetworkReportingService } from './networkReporting.service';\nexport declare class NetworkReportingController {\n    private reportingService;\n    constructor(reportingService: NetworkReportingService);\n    getTimeframeCounts(year: number, request: any): Promise<{\n        plannedActivityCount: number;\n        completedActivityCount: number;\n    }>;\n    createProgressReport(createProgressReport: CreateProgressReportDTO, request: any): Promise<import(\"./schema/progressReport.schema\").ProgressReport & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    editProgressReport(progressReportId: string, request: any, editProgressReport: EditProgressReportDTO): Promise<import(\"./schema/progressReport.schema\").ProgressReport & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    getProgressReportList(request: any, searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number, year: number): Promise<{\n        progressReportArray: any[];\n        progressReportsCount: any;\n        totalPageCount: number;\n    }>;\n    viewProgressReport(progressReportId: string): Promise<import(\"./schema/progressReport.schema\").ProgressReport & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    removeProgressReport(progressReportId: string, request: any): Promise<import(\"./schema/progressReport.schema\").ProgressReport & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    createAnnualReport(createAnnualReport: CreateAnnualReportDTO, request: any): Promise<import(\"./schema/annualReport.schema\").AnnualReport & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    editAnnualReport(annualReportId: string, request: any, editAnnualReport: EditAnnualReportDTO): Promise<import(\"./schema/annualReport.schema\").AnnualReport & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    getAnnualReportList(request: any, searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number, year: number): Promise<{\n        annualReportArray: any[];\n        annualReportsCount: any;\n        totalPageCount: number;\n    }>;\n    viewAnnualReport(annualReportId: string): Promise<import(\"./schema/annualReport.schema\").AnnualReport & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    removeAnnualReport(annualReportId: string, request: any): Promise<import(\"./schema/annualReport.schema\").AnnualReport & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    exportIndividualProgressReport(progressReportId: string, res: any): Promise<void>;\n    exportMultipleProgressReport(year: number, res: any, request: any): Promise<void>;\n    exportGeneralUserMultipleProgressReport(year: number, network: boolean, res: any): Promise<void>;\n    exportIndividualAnnualReport(annualReportId: string, res: any): Promise<void>;\n    exportMultipleAnnualReport(year: number, res: any, request: any): Promise<void>;\n    exportGeneralUserMultipleAnnualReport(year: number, network: boolean, res: any): Promise<void>;\n    addInvoice(addInvoice: AddInvoiceDTO, request: any): Promise<import(\"./schema/invoice.schema\").Invoice & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    editInvoice(invoiceNumber: string, editInvoice: EditInvoiceDTO, request: any): Promise<import(\"./schema/invoice.schema\").Invoice & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    getInvoice(invoiceId: any): Promise<import(\"./schema/invoice.schema\").Invoice & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    addInvoiceInProgressReport(progressReportId: string, request: any, invoiceId: any): Promise<import(\"./schema/progressReport.schema\").ProgressReport & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    addInvoiceInAnnualReport(annualReportId: string, request: any, invoiceId: any): Promise<import(\"./schema/annualReport.schema\").AnnualReport & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    downloadInvoice(invoiceId: any, res: any): Promise<void>;\n    checkIfProgressReportExistsByYear(year: number, request: any): Promise<void>;\n    checkIfAnnualReportExistsByYear(year: number, request: any): Promise<void>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/networkReporting/networkReporting.module.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/networkReporting/networkReporting.module.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class NetworkReportingModule {\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/networkReporting/networkReporting.service.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/networkReporting/networkReporting.service.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Model, Types } from 'mongoose';\nimport { UserService } from '../users/user.service';\nimport { NetworkService } from '../networks/network.service';\nimport { AnnualReport } from './schema/annualReport.schema';\nimport { ProgressReport } from './schema/progressReport.schema';\nimport { CreateProgressReportDTO } from './dto/createProgressReport.dto';\nimport { CreateAnnualReportDTO } from './dto/createAnnualReport.dto';\nimport { ActivityLog } from '../common/schema/activityLog.schema';\nimport { EditAnnualReportDTO } from './dto/editAnnualReport.dto';\nimport { EditProgressReportDTO } from './dto/editProgressReport.dto';\nimport { Worksheet } from 'exceljs';\nimport { Workplan } from '../workplans/schema/workplan.schema';\nimport { ActivityStatus } from '../common/staticSchema/activityStatus.schema';\nimport { Activities } from '../activities/schema/activities.schema';\nimport { WorkplanActivities } from '../workplans/schema/workplan_activities.schema';\nimport { Invoice } from './schema/invoice.schema';\nimport { AddInvoiceDTO } from './dto/addInvoice.dto';\nimport { EditInvoiceDTO } from './dto/editInvoice.dto';\nimport { MelpService } from '../melp/melp.service';\nexport declare class NetworkReportingService {\n    private progressReportModel;\n    private annualReportModel;\n    private activityLogModel;\n    private workplanModel;\n    private activityStatusModel;\n    private activityModel;\n    private workplanActivitiesModel;\n    private invoiceModel;\n    private readonly networkService;\n    private readonly userService;\n    private readonly melpService;\n    constructor(progressReportModel: Model<ProgressReport>, annualReportModel: Model<AnnualReport>, activityLogModel: Model<ActivityLog>, workplanModel: Model<Workplan>, activityStatusModel: Model<ActivityStatus>, activityModel: Model<Activities>, workplanActivitiesModel: Model<WorkplanActivities>, invoiceModel: Model<Invoice>, networkService: NetworkService, userService: UserService, melpService: MelpService);\n    commonFunctionForSearchSort(searchKeyword: string, sortKey: string, sortDirection: number): Promise<{\n        regex: RegExp;\n        sortQuery: {};\n    }>;\n    checkIfProgressReportExists(progressReportId: string, networkId: Types.ObjectId): Promise<boolean>;\n    getProgressReportByProgressReportId(progressReportId: string): Promise<ProgressReport & {\n        _id: Types.ObjectId;\n    }>;\n    checkIfProgressReportExistsByYear(year: number, user: any): Promise<void>;\n    createProgressReport(createProgressReport: CreateProgressReportDTO, user: any): Promise<ProgressReport & {\n        _id: Types.ObjectId;\n    }>;\n    editProgressReport(progressReportId: string, user: any, editProgressReport: EditProgressReportDTO): Promise<ProgressReport & {\n        _id: Types.ObjectId;\n    }>;\n    getProgressReportList(user: any, searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number, year: number): Promise<{\n        progressReportArray: any[];\n        progressReportsCount: any;\n        totalPageCount: number;\n    }>;\n    viewProgressReport(progressReportId: string): Promise<ProgressReport & {\n        _id: Types.ObjectId;\n    }>;\n    removeProgressReport(progressReportId: string, user: any): Promise<ProgressReport & {\n        _id: Types.ObjectId;\n    }>;\n    updateProgressReportApprovedCount(count: number, progressReportId: string): Promise<ProgressReport & {\n        _id: Types.ObjectId;\n    }>;\n    updateProgressReportStatus(progressReportId: string, statusId: any): Promise<ProgressReport & {\n        _id: Types.ObjectId;\n    }>;\n    setSubmittedAtTimeOfProgressReport(progressReportId: string, submittedAt: Date): Promise<ProgressReport & {\n        _id: Types.ObjectId;\n    }>;\n    setApprovedAtTimeOfProgressReport(progressReportId: string, approvedAt: Date): Promise<ProgressReport & {\n        _id: Types.ObjectId;\n    }>;\n    checkIfAnnualReportExists(annualReportId: string, networkId: Types.ObjectId): Promise<boolean>;\n    getAnnualReportByAnnualReportId(annualReportId: string): Promise<AnnualReport & {\n        _id: Types.ObjectId;\n    }>;\n    checkIfAnnualReportExistsByYear(year: number, user: any): Promise<void>;\n    createAnnualReport(createAnnualReport: CreateAnnualReportDTO, user: any): Promise<AnnualReport & {\n        _id: Types.ObjectId;\n    }>;\n    editAnnualReport(annualReportId: string, user: any, editAnnualReport: EditAnnualReportDTO): Promise<AnnualReport & {\n        _id: Types.ObjectId;\n    }>;\n    getAnnualReportList(user: any, searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number, year: number): Promise<{\n        annualReportArray: any[];\n        annualReportsCount: any;\n        totalPageCount: number;\n    }>;\n    viewAnnualReport(annualReportId: string): Promise<AnnualReport & {\n        _id: Types.ObjectId;\n    }>;\n    removeAnnualReport(annualReportId: string, user: any): Promise<AnnualReport & {\n        _id: Types.ObjectId;\n    }>;\n    updateAnnualReportApprovedCount(count: number, annualReportId: string): Promise<AnnualReport & {\n        _id: Types.ObjectId;\n    }>;\n    updateAnnualReportStatus(annualReportId: string, statusId: any): Promise<AnnualReport & {\n        _id: Types.ObjectId;\n    }>;\n    setSubmittedAtTimeOfAnnualReport(annualReportId: string, submittedAt: Date): Promise<AnnualReport & {\n        _id: Types.ObjectId;\n    }>;\n    setApprovedAtTimeOfAnnualReport(annualReportId: string, approvedAt: Date): Promise<AnnualReport & {\n        _id: Types.ObjectId;\n    }>;\n    exportProgressReport(res: any, progressReport: ProgressReport, worksheet: Worksheet, worksheetCount: number): Promise<void>;\n    exportIndividualProgressReport(res: any, progressReportId: string): Promise<void>;\n    commonFunctionForMutipleDownloadProgressReport(res: any, progressReportList: ProgressReport[], year: number): Promise<void>;\n    exportMultipleProgressReport(res: any, year: number, user: any): Promise<void>;\n    exportGeneralUserMultipleProgressReport(res: any, year: number, isNetwork: boolean): Promise<void>;\n    exportAnnualReport(res: any, annualReport: AnnualReport, worksheet: Worksheet, worksheetCount: number): Promise<void>;\n    exportIndividualAnnualReport(res: any, annualReportId: string): Promise<void>;\n    commonFunctionForMutipleDownloadAnnualReport(res: any, annualReportList: AnnualReport[], year: number): Promise<void>;\n    exportMultipleAnnualReport(res: any, year: number, user: any): Promise<void>;\n    exportGeneralUserMultipleAnnualReport(res: any, year: number, isNetwork: boolean): Promise<void>;\n    getTimeframeCounts(year: number, user: any): Promise<{\n        plannedActivityCount: number;\n        completedActivityCount: number;\n    }>;\n    addInvoice(addInvoice: AddInvoiceDTO, user: any): Promise<Invoice & {\n        _id: Types.ObjectId;\n    }>;\n    editInvoice(invoiceNumber: string, editInvoice: EditInvoiceDTO, user: any): Promise<Invoice & {\n        _id: Types.ObjectId;\n    }>;\n    getInvoice(invoiceId: any): Promise<Invoice & {\n        _id: Types.ObjectId;\n    }>;\n    compile(templateName: any, data: any): Promise<string>;\n    downloadInvoice(res: any, invoiceId: any): Promise<void>;\n    addInvoiceInProgressReport(progressReportId: string, user: any, invoiceId: any): Promise<ProgressReport & {\n        _id: Types.ObjectId;\n    }>;\n    addInvoiceInAnnualReport(annualReportId: string, user: any, invoiceId: any): Promise<AnnualReport & {\n        _id: Types.ObjectId;\n    }>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/networkReporting/schema/annualReport.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/networkReporting/schema/annualReport.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { CommonReport } from './commonReport.schema';\nexport declare class AnnualReport extends CommonReport {\n    annualReportId: string;\n    annualReportCode: string;\n    networkWebsite: string;\n    lastUpdateOnWebsite: Date;\n    actionsTakenToSupportNetworkMembers: string[];\n    otherActionsTaken: string;\n    numberOfActivePartners: number;\n    hasNetworkAchievedWhatIsExpected: boolean;\n    whatIsExpectedDetails: string;\n    anyContributingFactors: boolean;\n    contributingFactorsDetails: string;\n    anyUnexpectedOutcome: boolean;\n    unexpectedOutcomeDetails: string;\n    sustainPositiveResults: string;\n    networkPerformanceRating: number;\n    networkPerformanceRatingExplaination: string;\n    networkKnowledgeRating: number;\n    networkKnowledgeRatingExplaination: string;\n    networkPartnerEngagementRating: number;\n    networkPartnerEngagementRatingExplaination: string;\n    networkDemandDrivenCapacityRating: number;\n    networkDemandDrivenCapacityRatingExplaination: string;\n    createdAt?: Date;\n    updatedAt?: Date;\n}\nexport declare const AnnualReportSchema: import(\"mongoose\").Schema<AnnualReport, import(\"mongoose\").Model<AnnualReport, any, any, any, any>, {}, {}, {}, {}, \"type\", AnnualReport>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/networkReporting/schema/commonReport.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/networkReporting/schema/commonReport.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Types } from 'mongoose';\nimport { Base } from '../../common/schema/base.schema';\nexport declare type CommonReportDocument = CommonReport & Document;\nexport declare class CommonReport extends Base {\n    year: number;\n    networkManagerName: string;\n    networkManagerEmail: string;\n    changesInGeneralInfo: string;\n    reportOnProgress: string;\n    networksImprovedVisibility: string[];\n    otherImprovedVisibility: string;\n    totalNumberOfPlannedCapacityWithCapnet: number;\n    totalNumberOfDeliveredCapacityWithCapnet: number;\n    challenges: string[];\n    otherChallenge: string;\n    totalNumberOfPlannedCapacityWithoutCapnet: number;\n    numberOfPotentialStoriesOfChange: number;\n    hasSubmittedInfoToDevelopStoryOfChange: boolean;\n    invoiceId: Types.ObjectId;\n    statusId: Types.ObjectId;\n    networkId: Types.ObjectId;\n    instituteName: string;\n    isDeleted: boolean;\n    approvedCount: number;\n    submittedAt: Date;\n    approvedAt: Date;\n    isInfoTabFilled: boolean;\n    isInvoiceTabFilled: boolean;\n}\nexport declare const CommonReportSchema: import(\"mongoose\").Schema<CommonReport, import(\"mongoose\").Model<CommonReport, any, any, any, any>, {}, {}, {}, {}, \"type\", CommonReport>;\nexport interface MultiSelectInputs {\n    key: string;\n    value: boolean;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/networkReporting/schema/invoice.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/networkReporting/schema/invoice.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Types } from 'mongoose';\nimport { Base } from '../../common/schema/base.schema';\nexport declare class Invoice extends Base {\n    invoiceNumber: string;\n    name: string;\n    address: string;\n    hostInstitute: string;\n    typeOfPayment: string;\n    paymentTerms: string;\n    dueDate: Date;\n    bankAccountName: string;\n    bankAccountNumber: string;\n    bankAddress: string;\n    swiftCode: string;\n    emailAddress: string;\n    outputReportId: Types.ObjectId;\n    outcomeReportId: Types.ObjectId;\n    progressReportId: Types.ObjectId;\n    annualReportId: Types.ObjectId;\n    networkId: Types.ObjectId;\n    partnerId: Types.ObjectId;\n    isDeleted: boolean;\n    createdAt?: Date;\n    updatedAt?: Date;\n    invoiceTo: string;\n    priceAndQtyArray: PriceAndQty[];\n    totalOfUnitPrice: number;\n    totalOfLineTotal: number;\n}\nexport declare const InvoiceSchema: import(\"mongoose\").Schema<Invoice, import(\"mongoose\").Model<Invoice, any, any, any, any>, {}, {}, {}, {}, \"type\", Invoice>;\nexport interface PriceAndQty {\n    qty: number;\n    description: string;\n    unitPrice: number;\n    lineTotal: number;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/networkReporting/schema/progressReport.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/networkReporting/schema/progressReport.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { CommonReport } from './commonReport.schema';\nexport declare class ProgressReport extends CommonReport {\n    progressReportId: string;\n    progressReportCode: string;\n    createdAt?: Date;\n    updatedAt?: Date;\n}\nexport declare const ProgressReportSchema: import(\"mongoose\").Schema<ProgressReport, import(\"mongoose\").Model<ProgressReport, any, any, any, any>, {}, {}, {}, {}, \"type\", ProgressReport>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/networks/dto/activateOrDeactivateNetwork.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/networks/dto/activateOrDeactivateNetwork.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class ActivateOrDeactivateNetworkDTO {\n    action: string;\n    networkId: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/networks/dto/addAnalysis.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/networks/dto/addAnalysis.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class AddAnalysisDto {\n    analysisAndLearning: string;\n    weaknessAndRisk: string;\n    challengesInNetworkManagement: string;\n    challengesInCapacityDevelopment: string;\n    challengesInKnowledgeManagement: string;\n    challengesInPartnership: string;\n    typeOfSupportRequest: string;\n    actionPlans: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/networks/dto/addIndividualMembers.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/networks/dto/addIndividualMembers.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Types } from 'mongoose';\nimport { AddMembersDto } from './members.dto';\nexport declare class AddIndividualMembersDto extends AddMembersDto {\n    individualMemberId: string;\n    name: string;\n    lastName: string;\n    title: string;\n    genderId: Types.ObjectId;\n    email: string;\n    availabilityAsTrainer: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/networks/dto/addInstitutionalMembers.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/networks/dto/addInstitutionalMembers.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AddMembersDto } from './members.dto';\nexport declare class AddInstitutionalMembersDto extends AddMembersDto {\n    institutionalMemberId: string;\n    address: string;\n    website: string;\n    focalPoint: string;\n    position: string;\n    email: string;\n    isPartnerMember: boolean;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/networks/dto/addMembers.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/networks/dto/addMembers.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Types } from 'mongoose';\nexport declare class AddMembersDto {\n    name: string;\n    lastName: string;\n    title: string;\n    genderId: Types.ObjectId;\n    countryId: Types.ObjectId;\n    institution: string;\n    typeOfInstitutionId: Types.ObjectId;\n    contactNumber: number;\n    email: string;\n    startYearOfMembership: number;\n    mainExpertise: string;\n    secondaryExpertise: string[];\n    availabilityAsTrainer: string;\n    scopeOfwork: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/networks/dto/create-network.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/networks/dto/create-network.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class CreateNetworkDTO {\n    networkName: string;\n    code: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/networks/dto/createNetworkProfile.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/networks/dto/createNetworkProfile.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Types } from 'mongoose';\nimport { CommonBankDataDTO } from 'src/networkReporting/dto/commonBankData.dto';\nexport declare class CreateNetworkProfileDTO extends CommonBankDataDTO {\n    dateOfInception: Date;\n    regionId: Types.ObjectId;\n    typeOfMembership: any[];\n    numberOfMembers: number;\n    countryId: any[];\n    mainThematicFocus: any[];\n    networkManagerName: string;\n    networkManagerEmail: string;\n    networkHostName: string;\n    networkWebsite: string;\n    accountName: string;\n    accountNumber: number;\n    email: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/networks/dto/editIndividualMember.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/networks/dto/editIndividualMember.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AddIndividualMembersDto } from './addIndividualMembers.dto';\ndeclare const EditIndividualMemberDTO_base: import(\"@nestjs/common\").Type<Partial<AddIndividualMembersDto>>;\nexport declare class EditIndividualMemberDTO extends EditIndividualMemberDTO_base {\n}\nexport {};\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/networks/dto/editInstitutionalMember.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/networks/dto/editInstitutionalMember.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AddInstitutionalMembersDto } from './addInstitutionalMembers.dto';\ndeclare const EditInstitutionalMemberDto_base: import(\"@nestjs/common\").Type<Partial<AddInstitutionalMembersDto>>;\nexport declare class EditInstitutionalMemberDto extends EditInstitutionalMemberDto_base {\n}\nexport {};\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/networks/dto/editNetworkName.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/networks/dto/editNetworkName.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CreateNetworkDTO } from './create-network.dto';\ndeclare const EditNetworkNameDTO_base: import(\"@nestjs/common\").Type<Partial<CreateNetworkDTO>>;\nexport declare class EditNetworkNameDTO extends EditNetworkNameDTO_base {\n}\nexport {};\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/networks/dto/editNetworkProfile.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/networks/dto/editNetworkProfile.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CreateNetworkProfileDTO } from './createNetworkProfile.dto';\ndeclare const EditNetworkProfileDto_base: import(\"@nestjs/common\").Type<Partial<CreateNetworkProfileDTO>>;\nexport declare class EditNetworkProfileDto extends EditNetworkProfileDto_base {\n}\nexport {};\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/networks/dto/members.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/networks/dto/members.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Types } from 'mongoose';\nimport { Base } from '../../common/schema/base.schema';\nexport declare class AddMembersDto extends Base {\n    countryId: Types.ObjectId;\n    institution: string;\n    typeOfInstitutionId: Types.ObjectId;\n    contactNumber: number;\n    startYearOfMembership: number;\n    mainExpertise: string;\n    secondaryExpertise: string[];\n    scopeOfwork: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/networks/enum/title.enum.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/networks/enum/title.enum.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare enum TitleEnum {\n    MR = \"Mr.\",\n    MS = \"Ms.\",\n    DR = \"Dr.\",\n    PROF = \"Prof.\",\n    HON = \"Hon.\",\n    REV = \"Rev./Clergy\"\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/networks/enum/typeOfMembership.enum.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/networks/enum/typeOfMembership.enum.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare enum TypeOfMembershipEnum {\n    INDIVIDUALS = \"Individuals\",\n    INSTITUTIONS = \"Institutions\",\n    COUNTRY_CHAPTERS = \"Country chapters\",\n    NETWORKS = \"Networks\",\n    OTHER = \"Other\"\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/networks/network.controller.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/networks/network.controller.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ActivateOrDeactivateNetworkDTO } from './dto/activateOrDeactivateNetwork.dto';\nimport { AddAnalysisDto } from './dto/addAnalysis.dto';\nimport { AddIndividualMembersDto } from './dto/addIndividualMembers.dto';\nimport { AddInstitutionalMembersDto } from './dto/addInstitutionalMembers.dto';\nimport { CreateNetworkDTO } from './dto/create-network.dto';\nimport { CreateNetworkProfileDTO } from './dto/createNetworkProfile.dto';\nimport { EditNetworkNameDTO } from './dto/editNetworkName.dto';\nimport { EditNetworkProfileDto } from './dto/editNetworkProfile.dto';\nimport { NetworkService } from './network.service';\nimport { Network } from './schema/network.schema';\nexport declare class NetworkController {\n    private networkService;\n    constructor(networkService: NetworkService);\n    addNetwork(network: CreateNetworkDTO): Promise<Network>;\n    editNetworkName(editNetworkName: EditNetworkNameDTO, networkId: string, request: any): Promise<Network & import(\"mongoose\").Document<any, any, any> & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    activateOrDeactiveNetwork(activateOrDeactiveNetwork: ActivateOrDeactivateNetworkDTO, request: any): Promise<{\n        message: string;\n    }>;\n    getAllNetworksList(): Promise<(Network & import(\"mongoose\").Document<any, any, any> & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    })[]>;\n    getAllNetworksNameList(): Promise<{\n        networkList: any[];\n    }>;\n    getNetworkNameById(networkId: any): Promise<string>;\n    getActivityLog(searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number): Promise<{\n        logArray: any[];\n        activityLogCount: number;\n        totalPageCount: number;\n    }>;\n    getActivityLogPerNetwork(networkId: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number): Promise<{\n        logArray: any[];\n        activityLogCount: number;\n        totalPageCount: number;\n    }>;\n    createNetworkProfile(request: any, createNetworkProfile: CreateNetworkProfileDTO): Promise<Network & import(\"mongoose\").Document<any, any, any> & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    editNetworkProfile(request: any, editNetworkProfile: EditNetworkProfileDto): Promise<Network & import(\"mongoose\").Document<any, any, any> & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    addAnalysisAndLearning(request: any, addAnalysisAndLearning: AddAnalysisDto): Promise<Network & import(\"mongoose\").Document<any, any, any> & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    addIndividualMembers(request: any, addIndividualMembers: AddIndividualMembersDto[]): Promise<void>;\n    addInstitutionalMembers(request: any, addInstitutionalMembers: AddInstitutionalMembersDto[]): Promise<void>;\n    deleteIndividualMember(request: any, individualMemberId: string): Promise<import(\"./schema/individualMember.schema\").IndividualMember & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    deleteInstitutionalMember(request: any, institutionalMemberId: string): Promise<import(\"./schema/institutionalMember.schema\").InstitutionalMember & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    getMemberCount(request: any): Promise<{\n        numberOfMembers: number;\n    }>;\n    viewNetworkProfile(networkId: any): Promise<{\n        network: Network & import(\"mongoose\").Document<any, any, any> & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        };\n        region: string;\n        countryList: any[];\n    }>;\n    getNetworksList(searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number): Promise<{\n        networkArray: any[];\n        networkCount: number;\n        totalPageCount: number;\n    }>;\n    getIndividualMembersList(networkId: any): Promise<(import(\"./schema/individualMember.schema\").IndividualMember & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    })[]>;\n    getInstitutionalMembersList(networkId: any): Promise<(import(\"./schema/institutionalMember.schema\").InstitutionalMember & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    })[]>;\n    getInstitutionalPartnerMembersList(networkId: any): Promise<(import(\"./schema/institutionalMember.schema\").InstitutionalMember & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    })[]>;\n    downloadIndividualMemberList(networkId: any, res: any): Promise<void>;\n    downloadInstitutionalMembersList(networkId: any, res: any): Promise<void>;\n    downloadPartnerMembersList(networkId: any, res: any): Promise<void>;\n    getStaticDataTables(): Promise<{\n        genderList: (import(\"mongoose\").Document<unknown, any, import(\"../common/staticSchema/gender.schema\").Gender> & import(\"../common/staticSchema/gender.schema\").Gender & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        typeOfInstitutionList: (import(\"mongoose\").Document<unknown, any, import(\"../common/staticSchema/typeOfInstitution.schema\").TypeOfInstitution> & import(\"../common/staticSchema/typeOfInstitution.schema\").TypeOfInstitution & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        countryList: (import(\"mongoose\").Document<unknown, any, import(\"../common/staticSchema/country.schema\").Country> & import(\"../common/staticSchema/country.schema\").Country & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        regionList: (import(\"mongoose\").Document<unknown, any, import(\"../common/staticSchema/region.schema\").Region> & import(\"../common/staticSchema/region.schema\").Region & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        typeOfMembershipList: (import(\"mongoose\").Document<unknown, any, import(\"../common/staticSchema/typeOfMemberShip.schema\").TypeOfMembership> & import(\"../common/staticSchema/typeOfMemberShip.schema\").TypeOfMembership & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        expertiseOrThematicList: (import(\"mongoose\").Document<unknown, any, import(\"../common/staticSchema/expertiseAreaOrThematicFocus.schema\").ExpertiseAreaOrThematicFocus> & import(\"../common/staticSchema/expertiseAreaOrThematicFocus.schema\").ExpertiseAreaOrThematicFocus & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n    }>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/networks/network.module.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/networks/network.module.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class NetworkModule {\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/networks/network.service.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/networks/network.service.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Model, Types } from 'mongoose';\nimport { ActivityLog } from '../common/schema/activityLog.schema';\nimport { CreateNetworkDTO } from './dto/create-network.dto';\nimport { Network, NetworkDocument } from './schema/network.schema';\nimport { CreateNetworkProfileDTO } from './dto/createNetworkProfile.dto';\nimport { AddAnalysisDto } from './dto/addAnalysis.dto';\nimport { AddIndividualMembersDto } from './dto/addIndividualMembers.dto';\nimport { IndividualMember } from './schema/individualMember.schema';\nimport { InstitutionalMember } from './schema/institutionalMember.schema';\nimport { EditNetworkProfileDto } from './dto/editNetworkProfile.dto';\nimport { Worksheet } from 'exceljs';\nimport { Country } from '../common/staticSchema/country.schema';\nimport { Gender } from '../common/staticSchema/gender.schema';\nimport { TypeOfInstitution } from '../common/staticSchema/typeOfInstitution.schema';\nimport { Region } from '../common/staticSchema/region.schema';\nimport { EditNetworkNameDTO } from './dto/editNetworkName.dto';\nimport { ActivateOrDeactivateNetworkDTO } from './dto/activateOrDeactivateNetwork.dto';\nimport { AddInstitutionalMembersDto } from './dto/addInstitutionalMembers.dto';\nimport { TypeOfMembership } from '../common/staticSchema/typeOfMemberShip.schema';\nimport { ExpertiseAreaOrThematicFocus } from '../common/staticSchema/expertiseAreaOrThematicFocus.schema';\nimport { User } from '../users/schema/user.schema';\nexport declare class NetworkService {\n    private networkModel;\n    private individualMemberModel;\n    private institutionalMemberModel;\n    private genderModel;\n    private typeOfInstitutionModel;\n    private countryModel;\n    private regionModel;\n    private activityLogModel;\n    private typeOfMembershipModel;\n    private expertiseOrThematicModel;\n    private userModel;\n    constructor(networkModel: Model<NetworkDocument>, individualMemberModel: Model<IndividualMember>, institutionalMemberModel: Model<InstitutionalMember>, genderModel: Model<Gender>, typeOfInstitutionModel: Model<TypeOfInstitution>, countryModel: Model<Country>, regionModel: Model<Region>, activityLogModel: Model<ActivityLog>, typeOfMembershipModel: Model<TypeOfMembership>, expertiseOrThematicModel: Model<ExpertiseAreaOrThematicFocus>, userModel: Model<User>);\n    checkIfNetworkNameExists(networkName: string): Promise<boolean>;\n    checkIfNetworkExists(networkId: Types.ObjectId): Promise<boolean>;\n    addNetwork(network: CreateNetworkDTO): Promise<Network>;\n    editNetworkName(networkId: string, editNetworkName: EditNetworkNameDTO, user: any): Promise<Network & import(\"mongoose\").Document<any, any, any> & {\n        _id: Types.ObjectId;\n    }>;\n    activateOrDeactiveNetwork(activateOrDeactivateNetwork: ActivateOrDeactivateNetworkDTO, user: any): Promise<{\n        message: string;\n    }>;\n    getAllNetworksList(): Promise<(Network & import(\"mongoose\").Document<any, any, any> & {\n        _id: Types.ObjectId;\n    })[]>;\n    getAllNetworksNameList(): Promise<{\n        networkList: any[];\n    }>;\n    getNetworkNameById(networkId: any): Promise<string>;\n    getNetworkAbbreviationById(networkId: any): Promise<string>;\n    commonFunctionForSearchSort(searchKeyword: string, sortKey: string, sortDirection: number): Promise<{\n        regex: RegExp;\n        sortQuery: {};\n    }>;\n    getArrayOfActivityLogObject(activityLogs: ActivityLog[], activityLogCount: number): Promise<{\n        logArray: any[];\n        activityLogCount: number;\n        totalPageCount: number;\n    }>;\n    getActivityLogPerNetwork(networkId: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number): Promise<{\n        logArray: any[];\n        activityLogCount: number;\n        totalPageCount: number;\n    }>;\n    getActivityLog(searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number): Promise<{\n        logArray: any[];\n        activityLogCount: number;\n        totalPageCount: number;\n    }>;\n    getStaticDataTables(): Promise<{\n        genderList: (import(\"mongoose\").Document<unknown, any, Gender> & Gender & {\n            _id: Types.ObjectId;\n        })[];\n        typeOfInstitutionList: (import(\"mongoose\").Document<unknown, any, TypeOfInstitution> & TypeOfInstitution & {\n            _id: Types.ObjectId;\n        })[];\n        countryList: (import(\"mongoose\").Document<unknown, any, Country> & Country & {\n            _id: Types.ObjectId;\n        })[];\n        regionList: (import(\"mongoose\").Document<unknown, any, Region> & Region & {\n            _id: Types.ObjectId;\n        })[];\n        typeOfMembershipList: (import(\"mongoose\").Document<unknown, any, TypeOfMembership> & TypeOfMembership & {\n            _id: Types.ObjectId;\n        })[];\n        expertiseOrThematicList: (import(\"mongoose\").Document<unknown, any, ExpertiseAreaOrThematicFocus> & ExpertiseAreaOrThematicFocus & {\n            _id: Types.ObjectId;\n        })[];\n    }>;\n    getGenderById(id: any): Promise<string>;\n    getTypeOfInstituionById(id: any): Promise<string>;\n    getCountryById(id: any): Promise<string>;\n    getRegionById(id: any): Promise<string>;\n    createNetworkProfile(createNetworkProfile: CreateNetworkProfileDTO, user: any): Promise<Network & import(\"mongoose\").Document<any, any, any> & {\n        _id: Types.ObjectId;\n    }>;\n    editNetworkProfile(editNetworkProfile: EditNetworkProfileDto, user: any): Promise<Network & import(\"mongoose\").Document<any, any, any> & {\n        _id: Types.ObjectId;\n    }>;\n    addAnalysisAndLearning(addAnalysisAndLearning: AddAnalysisDto, user: any): Promise<Network & import(\"mongoose\").Document<any, any, any> & {\n        _id: Types.ObjectId;\n    }>;\n    addIndividualMembers(addIndividualMembers: AddIndividualMembersDto[], user: any): Promise<void>;\n    addInstitutionalMembers(addInstitutionalMembers: AddInstitutionalMembersDto[], user: any): Promise<void>;\n    deleteIndividualMember(individualMemberId: string, user: any): Promise<IndividualMember & {\n        _id: Types.ObjectId;\n    }>;\n    deleteInstitutionalMember(institutionalMemberId: string, user: any): Promise<InstitutionalMember & {\n        _id: Types.ObjectId;\n    }>;\n    getMemberCount(user: any): Promise<{\n        numberOfMembers: number;\n    }>;\n    viewNetworkProfile(networkId: Types.ObjectId): Promise<{\n        network: Network & import(\"mongoose\").Document<any, any, any> & {\n            _id: Types.ObjectId;\n        };\n        region: string;\n        countryList: any[];\n    }>;\n    getNetworksList(searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number): Promise<{\n        networkArray: any[];\n        networkCount: number;\n        totalPageCount: number;\n    }>;\n    getIndividualMembersList(networkId: Types.ObjectId): Promise<(IndividualMember & {\n        _id: Types.ObjectId;\n    })[]>;\n    getInstitutionalMembersList(networkId: Types.ObjectId): Promise<(InstitutionalMember & {\n        _id: Types.ObjectId;\n    })[]>;\n    getInstitutionalPartnerMembersList(networkId: Types.ObjectId): Promise<(InstitutionalMember & {\n        _id: Types.ObjectId;\n    })[]>;\n    createWorksheetForInstitutionMembers(worksheet: Worksheet): Promise<void>;\n    commonDownloadForInstituionalMembers(institutionalMemberList: InstitutionalMember[], worksheet: Worksheet, networkName: string): Promise<void>;\n    downloadIndividualMemberList(res: any, networkId: Types.ObjectId): Promise<void>;\n    downloadInstitutionalMembersList(res: any, networkId: Types.ObjectId): Promise<void>;\n    downloadPartnerMembersList(res: any, networkId: Types.ObjectId): Promise<void>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/networks/schema/individualMember.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/networks/schema/individualMember.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Types } from 'mongoose';\nimport { Member } from './members.schema';\nexport declare class IndividualMember extends Member {\n    individualMemberId: string;\n    name: string;\n    lastName: string;\n    title: string;\n    genderId: Types.ObjectId;\n    email: string;\n    availabilityAsTrainer: string;\n}\nexport declare const IndividualMemberSchema: import(\"mongoose\").Schema<IndividualMember, import(\"mongoose\").Model<IndividualMember, any, any, any, any>, {}, {}, {}, {}, \"type\", IndividualMember>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/networks/schema/individualMembers.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/networks/schema/individualMembers.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Types } from 'mongoose';\nimport { Member } from './members.schema';\nexport declare class IndividualMember extends Member {\n    name: string;\n    lastName: string;\n    title: string;\n    genderId: Types.ObjectId;\n    email: string;\n    availabilityAsTrainer: string;\n}\nexport declare const IndividualMemberSchema: import(\"mongoose\").Schema<IndividualMember, import(\"mongoose\").Model<IndividualMember, any, any, any, any>, {}, {}, {}, {}, \"type\", IndividualMember>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/networks/schema/institutionalMember.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/networks/schema/institutionalMember.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Member } from './members.schema';\nexport declare class InstitutionalMember extends Member {\n    institutionalMemberId: string;\n    address: string;\n    website: string;\n    focalPoint: string;\n    position: string;\n    email: string;\n    isPartnerMember: boolean;\n}\nexport declare const InstitutionalMemberSchema: import(\"mongoose\").Schema<InstitutionalMember, import(\"mongoose\").Model<InstitutionalMember, any, any, any, any>, {}, {}, {}, {}, \"type\", InstitutionalMember>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/networks/schema/institutionalMembers.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/networks/schema/institutionalMembers.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Types } from 'mongoose';\nimport { AddMembersDto } from '../dto/members.dto';\nexport declare class AddIndividualMembersDto extends AddMembersDto {\n    name: string;\n    lastName: string;\n    title: string;\n    genderId: Types.ObjectId;\n    email: string;\n    availabilityAsTrainer: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/networks/schema/members.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/networks/schema/members.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Types } from 'mongoose';\nimport { Base } from '../../common/schema/base.schema';\nexport declare class Member extends Base {\n    networkId: Types.ObjectId;\n    countryId: Types.ObjectId;\n    institution: string;\n    typeOfInstitutionId: Types.ObjectId;\n    contactNumber: number;\n    startYearOfMembership: number;\n    mainExpertise: string;\n    secondaryExpertise: string[];\n    scopeOfwork: string;\n    isDeleted: boolean;\n    createdAt?: Date;\n    updatedAt?: Date;\n}\nexport declare const MemberSchema: import(\"mongoose\").Schema<Member, import(\"mongoose\").Model<Member, any, any, any, any>, {}, {}, {}, {}, \"type\", Member>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/networks/schema/network.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/networks/schema/network.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Document, Types } from 'mongoose';\nimport { Base } from '../../common/schema/base.schema';\nexport declare type NetworkDocument = Network & Document;\nexport declare class Network extends Base {\n    networkId: string;\n    networkName: string;\n    code: string;\n    isActive: boolean;\n    dateOfInception: Date;\n    regionId: Types.ObjectId;\n    typeOfMembership: any[];\n    numberOfMembers: number;\n    countryId: any[];\n    mainThematicFocus: any[];\n    networkManagerName: string;\n    networkManagerEmail: string;\n    networkHostName: string;\n    networkWebsite: string;\n    accountName: string;\n    accountNumber: number;\n    bankAddress: string;\n    swiftCode: string;\n    email: string;\n    analysisAndLearning: string;\n    weaknessAndRisk: string;\n    challengesInNetworkManagement: string;\n    challengesInCapacityDevelopment: string;\n    challengesInKnowledgeManagement: string;\n    challengesInPartnership: string;\n    typeOfSupportRequest: string;\n    actionPlans: string;\n    createdAt?: Date;\n    updatedAt?: Date;\n}\nexport declare const NetworkSchema: import(\"mongoose\").Schema<Network, import(\"mongoose\").Model<Network, any, any, any, any>, {}, {}, {}, {}, \"type\", Network>;\nexport interface MultiSelectInputs {\n    key: string;\n    value: boolean;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/partners/dto/add-partner.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/partners/dto/add-partner.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class AddPartnerDTO {\n    partnerInstitute: string;\n    abbreviation: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/partners/partner.controller.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/partners/partner.controller.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AddPartnerDTO } from './dto/add-partner.dto';\nimport { PartnerService } from './partner.service';\nimport { Partner } from './schema/partner.schema';\nexport declare class PartnerController {\n    private partnerService;\n    constructor(partnerService: PartnerService);\n    getPartnerInstitutes(): Promise<(Partner & import(\"mongoose\").Document<any, any, any> & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    })[]>;\n    addPartner(addPartner: AddPartnerDTO): Promise<Partner>;\n    getActivityLogPerPartner(partnerId: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number): Promise<{\n        logArray: any[];\n        activityLogCount: number;\n        totalPageCount: number;\n    }>;\n    getPartnersActivityLog(searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number): Promise<{\n        logArray: any[];\n        activityLogCount: number;\n        totalPageCount: number;\n    }>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/partners/partner.service.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/partners/partner.service.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Model, Types } from 'mongoose';\nimport { ActivityLog } from '../common/schema/activityLog.schema';\nimport { AddPartnerDTO } from './dto/add-partner.dto';\nimport { Partner, PartnerDocument } from './schema/partner.schema';\nimport { NetworkService } from '../networks/network.service';\nexport declare class PartnerService {\n    private partnerModel;\n    private activityLogModel;\n    private readonly networkService;\n    constructor(partnerModel: Model<PartnerDocument>, activityLogModel: Model<ActivityLog>, networkService: NetworkService);\n    addPartner(addPartner: AddPartnerDTO): Promise<Partner>;\n    checkIfPartnerAbbreviationExists(abbreviation: any): Promise<boolean>;\n    checkIfPartnerExists(partnerId: any): Promise<boolean>;\n    getPartnerInstitutes(): Promise<(Partner & import(\"mongoose\").Document<any, any, any> & {\n        _id: Types.ObjectId;\n    })[]>;\n    getPartnerInstituteNameById(partnerId: any): Promise<string>;\n    getPartnerAbbreviationById(partnerId: any): Promise<string>;\n    getActivityLogPerPartner(partnerId: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number): Promise<{\n        logArray: any[];\n        activityLogCount: number;\n        totalPageCount: number;\n    }>;\n    getPartnersActivityLog(searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number): Promise<{\n        logArray: any[];\n        activityLogCount: number;\n        totalPageCount: number;\n    }>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/partners/partners.module.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/partners/partners.module.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class PartnerModule {\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/partners/schema/partner.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/partners/schema/partner.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Document } from 'mongoose';\nexport declare type PartnerDocument = Partner & Document;\nexport declare class Partner {\n    partnerId: string;\n    partnerInstitute: string;\n    abbreviation: string;\n}\nexport declare const PartnerSchema: import(\"mongoose\").Schema<Partner, import(\"mongoose\").Model<Partner, any, any, any, any>, {}, {}, {}, {}, \"type\", Partner>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/proposals/dto/add-activity-information.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/proposals/dto/add-activity-information.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class AddActivityInformationDTO {\n    facilitators: string;\n    mainPartners: string;\n    aboutCourse: string;\n    expectedOutputs: string;\n    addressSustainableWaterManagement: string;\n    addressSocialInclusion: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/proposals/dto/add-other-information.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/proposals/dto/add-other-information.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class AddOtherInformationDTO {\n    documentationFilePath: string;\n    feedback: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/proposals/dto/add-proposed-budget.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/proposals/dto/add-proposed-budget.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CoordinationCostsDTO } from \"./coordination-costs.dto\";\nimport { LocationCostsDTO } from \"./location-costs.dto\";\nimport { OtherCostsDTO } from \"./other-costs.dto\";\nimport { TravelCostsDTO } from \"./travel-costs.dto\";\nexport declare class AddProposedBudgetDTO {\n    exchangeRate: string;\n    usd: number;\n    coordinationCosts: CoordinationCostsDTO[];\n    travelCosts: TravelCostsDTO[];\n    locationCosts: LocationCostsDTO[];\n    otherCosts: OtherCostsDTO[];\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/proposals/dto/coordination-costs.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/proposals/dto/coordination-costs.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class CoordinationCostsDTO {\n    coordinationCostId: string;\n    coordination: string;\n    budget: number;\n    amountPerUnit: number;\n    numberOfUnit: number;\n    capnetFinancialFunding: number;\n    networkFinancialFunding: number;\n    partnerFinancialFunding: number;\n    networkInKindFunding: number;\n    partnerInKindFunding: number;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/proposals/dto/create-proposal.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/proposals/dto/create-proposal.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Types } from \"mongoose\";\nexport declare class CreateProposalDTO {\n    isCurrentYearWorkplanActivity: boolean;\n    activityId: Types.ObjectId;\n    reason: string;\n    proposalActivityName: string;\n    proposalActivityCode: string;\n    proposalName: string;\n    thematicAreaId: Types.ObjectId;\n    otherThematicArea: string;\n    activityStartDate: Date;\n    activityEndDate: Date;\n    language: string;\n    activityTypeId: Types.ObjectId;\n    modalityId: Types.ObjectId;\n    typeOfOnlineCourseId: Types.ObjectId;\n    eLearningPlatformId: Types.ObjectId;\n    preliminaryModules: string;\n    numberOfCourseModule: number;\n    totalCourseLengthInWeeks: number;\n    courseSchedule: string;\n    scopeOfActivityId: Types.ObjectId;\n    numberOfParticipants: number;\n    activityTargetGroupId: Types.ObjectId;\n    isIncludedInWebinar: boolean;\n    areVulnerableGroupsInvolved: boolean;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/proposals/dto/location-costs.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/proposals/dto/location-costs.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class LocationCostsDTO {\n    locationCostId: string;\n    location: string;\n    budget: number;\n    amountPerUnit: number;\n    numberOfUnit: number;\n    capnetFinancialFunding: number;\n    networkFinancialFunding: number;\n    partnerFinancialFunding: number;\n    networkInKindFunding: number;\n    partnerInKindFunding: number;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/proposals/dto/other-costs.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/proposals/dto/other-costs.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class OtherCostsDTO {\n    otherCostId: string;\n    otherCosts: string;\n    budget: number;\n    amountPerUnit: number;\n    numberOfUnit: number;\n    capnetFinancialFunding: number;\n    networkFinancialFunding: number;\n    partnerFinancialFunding: number;\n    networkInKindFunding: number;\n    partnerInKindFunding: number;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/proposals/dto/travel-costs.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/proposals/dto/travel-costs.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class TravelCostsDTO {\n    travelCostId: string;\n    travel: string;\n    budget: number;\n    amountPerUnit: number;\n    numberOfUnit: number;\n    capnetFinancialFunding: number;\n    networkFinancialFunding: number;\n    partnerFinancialFunding: number;\n    networkInKindFunding: number;\n    partnerInKindFunding: number;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/proposals/proposal.controller.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/proposals/proposal.controller.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import RequestWithUser from \"src/users/user.service\";\nimport { AddActivityInformationDTO } from \"./dto/add-activity-information.dto\";\nimport { AddOtherInformationDTO } from \"./dto/add-other-information.dto\";\nimport { AddProposedBudgetDTO } from \"./dto/add-proposed-budget.dto\";\nimport { CreateProposalDTO } from \"./dto/create-proposal.dto\";\nimport { ProposalService } from \"./proposal.service\";\nexport declare class ProposalController {\n    private readonly proposalService;\n    constructor(proposalService: ProposalService);\n    addProposal(addProposal: CreateProposalDTO, request: RequestWithUser): Promise<import(\"./schema/proposal.schema\").Proposal & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    addActivityInformation(proposalId: string, addActivityInfo: AddActivityInformationDTO, request: RequestWithUser): Promise<import(\"./schema/proposal.schema\").Proposal & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    addProposedBudget(proposalId: string, addProposedBudget: AddProposedBudgetDTO, request: RequestWithUser): Promise<void>;\n    addOtherInformation(proposalId: string, addOtherInfo: AddOtherInformationDTO, request: RequestWithUser): Promise<import(\"./schema/proposal.schema\").Proposal & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/proposals/proposal.module.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/proposals/proposal.module.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class ProposalModule {\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/proposals/proposal.service.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/proposals/proposal.service.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Proposal } from './schema/proposal.schema';\nimport { Model } from 'mongoose';\nimport { CoordinationCost } from './schema/coordination-cost.schema';\nimport { TravelCost } from './schema/travel-cost.schema';\nimport { LocationCost } from './schema/location-cost.schema';\nimport { OtherCost } from './schema/other-cost.schema';\nimport { CreateProposalDTO } from './dto/create-proposal.dto';\nimport { AddActivityInformationDTO } from './dto/add-activity-information.dto';\nimport { ActivityTargetGroup } from './schema/static/activity-target-group.schema';\nimport { UserService } from 'src/users/user.service';\nimport { AddOtherInformationDTO } from './dto/add-other-information.dto';\nexport declare class ProposalService {\n    private proposalModel;\n    private coordinationCostModel;\n    private travelCostModel;\n    private locationCostModel;\n    private otherCostModel;\n    private activityTargetGroupModel;\n    private userService;\n    constructor(proposalModel: Model<Proposal>, coordinationCostModel: Model<CoordinationCost>, travelCostModel: Model<TravelCost>, locationCostModel: Model<LocationCost>, otherCostModel: Model<OtherCost>, activityTargetGroupModel: Model<ActivityTargetGroup>, userService: UserService);\n    checkIfProposalExistsByProposalId(proposalId: string): Promise<Proposal & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    addProposal(addProposal: CreateProposalDTO, user: any): Promise<Proposal & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    addActivityInformation(proposalId: string, addActivityInfo: AddActivityInformationDTO, user: any): Promise<Proposal & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    addOtherInformation(proposalId: string, addOtherInfo: AddOtherInformationDTO, user: any): Promise<Proposal & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/proposals/proposals.controller.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/proposals/proposals.controller.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ProposalService } from \"./proposal.service\";\nexport declare class ProposalController {\n    private readonly proposalService;\n    constructor(proposalService: ProposalService);\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/proposals/proposals.module.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/proposals/proposals.module.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/proposals/proposals.service.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/proposals/proposals.service.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class ProposalService {\n    constructor();\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/proposals/proposalscontroller.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/proposals/proposalscontroller.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ProposalService } from \"./proposal.service\";\nexport declare class ProposalController {\n    private readonly proposalService;\n    constructor(proposalService: ProposalService);\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/proposals/schema/coordination-cost.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/proposals/schema/coordination-cost.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Types } from \"mongoose\";\nexport declare class CoordinationCost {\n    coordinationCostId: string;\n    proposalId: Types.ObjectId;\n    coordination: string;\n    budget: number;\n    amountPerUnit: number;\n    numberOfUnit: number;\n    capnetFinancialFunding: number;\n    networkFinancialFunding: number;\n    partnerFinancialFunding: number;\n    networkInKindFunding: number;\n    partnerInKindFunding: number;\n}\nexport declare const CoordinationCostSchema: import(\"mongoose\").Schema<CoordinationCost, import(\"mongoose\").Model<CoordinationCost, any, any, any, any>, {}, {}, {}, {}, \"type\", CoordinationCost>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/proposals/schema/coordinationCost.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/proposals/schema/coordinationCost.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Types } from \"mongoose\";\nexport declare class CoordinationCost {\n    coordinationCostId: string;\n    proposalId: Types.ObjectId;\n    coordination: string;\n    budget: number;\n    amountPerUnit: number;\n    numberOfUnit: number;\n    capnetFinancialFunding: number;\n    networkFinancialFunding: number;\n    partnerFinancialFunding: number;\n    networkInKindFunding: number;\n    partnerInKindFunding: number;\n}\nexport declare const CoordinationCostSchema: import(\"mongoose\").Schema<CoordinationCost, import(\"mongoose\").Model<CoordinationCost, any, any, any, any>, {}, {}, {}, {}, \"type\", CoordinationCost>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/proposals/schema/location-cost.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/proposals/schema/location-cost.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Types } from \"mongoose\";\nexport declare class LocationCost {\n    locationCostId: string;\n    proposalId: Types.ObjectId;\n    location: string;\n    budget: number;\n    amountPerUnit: number;\n    numberOfUnit: number;\n    capnetFinancialFunding: number;\n    networkFinancialFunding: number;\n    partnerFinancialFunding: number;\n    networkInKindFunding: number;\n    partnerInKindFunding: number;\n}\nexport declare const LocationCostSchema: import(\"mongoose\").Schema<LocationCost, import(\"mongoose\").Model<LocationCost, any, any, any, any>, {}, {}, {}, {}, \"type\", LocationCost>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/proposals/schema/locationCost.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/proposals/schema/locationCost.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Types } from \"mongoose\";\nexport declare class LocationCost {\n    locationCostId: string;\n    proposalId: Types.ObjectId;\n    location: string;\n    budget: number;\n    amountPerUnit: number;\n    numberOfUnit: number;\n    capnetFinancialFunding: number;\n    networkFinancialFunding: number;\n    partnerFinancialFunding: number;\n    networkInKindFunding: number;\n    partnerInKindFunding: number;\n}\nexport declare const LocationCostSchema: import(\"mongoose\").Schema<LocationCost, import(\"mongoose\").Model<LocationCost, any, any, any, any>, {}, {}, {}, {}, \"type\", LocationCost>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/proposals/schema/other-cost.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/proposals/schema/other-cost.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Types } from \"mongoose\";\nexport declare class OtherCost {\n    otherCostId: string;\n    proposalId: Types.ObjectId;\n    otherCosts: string;\n    budget: number;\n    amountPerUnit: number;\n    numberOfUnit: number;\n    capnetFinancialFunding: number;\n    networkFinancialFunding: number;\n    partnerFinancialFunding: number;\n    networkInKindFunding: number;\n    partnerInKindFunding: number;\n}\nexport declare const OtherCostSchema: import(\"mongoose\").Schema<OtherCost, import(\"mongoose\").Model<OtherCost, any, any, any, any>, {}, {}, {}, {}, \"type\", OtherCost>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/proposals/schema/otherCost.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/proposals/schema/otherCost.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Types } from \"mongoose\";\nexport declare class OtherCost {\n    otherCostId: string;\n    proposalId: Types.ObjectId;\n    otherCosts: string;\n    budget: number;\n    amountPerUnit: number;\n    numberOfUnit: number;\n    capnetFinancialFunding: number;\n    networkFinancialFunding: number;\n    partnerFinancialFunding: number;\n    networkInKindFunding: number;\n    partnerInKindFunding: number;\n}\nexport declare const OtherCostSchema: import(\"mongoose\").Schema<OtherCost, import(\"mongoose\").Model<OtherCost, any, any, any, any>, {}, {}, {}, {}, \"type\", OtherCost>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/proposals/schema/proposal.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/proposals/schema/proposal.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Base } from \"../../common/schema/base.schema\";\nimport { Types } from \"mongoose\";\nexport declare class Proposal extends Base {\n    proposalId: string;\n    statusId: Types.ObjectId;\n    networkId: Types.ObjectId;\n    partnerId: Types.ObjectId;\n    isCurrentYearWorkplanActivity: boolean;\n    activityId: Types.ObjectId;\n    reason: string;\n    proposalActivityName: string;\n    proposalActivityCode: string;\n    proposalName: string;\n    thematicAreaId: Types.ObjectId;\n    otherThematicArea: string;\n    activityStartDate: Date;\n    activityEndDate: Date;\n    language: string;\n    activityTypeId: Types.ObjectId;\n    modalityId: Types.ObjectId;\n    typeOfOnlineCourseId: Types.ObjectId;\n    eLearningPlatformId: Types.ObjectId;\n    preliminaryModules: string;\n    numberOfCourseModule: number;\n    totalCourseLengthInWeeks: number;\n    courseSchedule: string;\n    scopeOfActivityId: Types.ObjectId;\n    numberOfParticipants: number;\n    activityTargetGroupId: Types.ObjectId;\n    isIncludedInWebinar: boolean;\n    areVulnerableGroupsInvolved: boolean;\n    facilitators: string;\n    mainPartners: string;\n    aboutCourse: string;\n    expectedOutputs: string;\n    addressSustainableWaterManagement: string;\n    addressSocialInclusion: string;\n    exchangeRate: string;\n    usd: number;\n    documentationFilePath: string;\n    feedback: string;\n    isDeleted: boolean;\n    createdAt?: Date;\n    updatedAt?: Date;\n}\nexport declare const ProposalSchema: import(\"mongoose\").Schema<Proposal, import(\"mongoose\").Model<Proposal, any, any, any, any>, {}, {}, {}, {}, \"type\", Proposal>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/proposals/schema/static/activity-target-group.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/proposals/schema/static/activity-target-group.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Base } from \"../../../common/schema/base.schema\";\nexport declare class ActivityTargetGroup extends Base {\n    targetGroup: string;\n}\nexport declare const ActivityTargetGroupSchema: import(\"mongoose\").Schema<ActivityTargetGroup, import(\"mongoose\").Model<ActivityTargetGroup, any, any, any, any>, {}, {}, {}, {}, \"type\", ActivityTargetGroup>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/proposals/schema/static/e-learning-platform.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/proposals/schema/static/e-learning-platform.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Base } from \"../../../common/schema/base.schema\";\nexport declare class ELearningPlatform extends Base {\n    eLearningPlatform: string;\n}\nexport declare const ELearningPlatformSchema: import(\"mongoose\").Schema<ELearningPlatform, import(\"mongoose\").Model<ELearningPlatform, any, any, any, any>, {}, {}, {}, {}, \"type\", ELearningPlatform>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/proposals/schema/static/online-course-type.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/proposals/schema/static/online-course-type.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Base } from \"../../../common/schema/base.schema\";\nexport declare class OnlineCourseType extends Base {\n    courseType: string;\n}\nexport declare const OnlineCourseTypeSchema: import(\"mongoose\").Schema<OnlineCourseType, import(\"mongoose\").Model<OnlineCourseType, any, any, any, any>, {}, {}, {}, {}, \"type\", OnlineCourseType>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/proposals/schema/static/proposal-activity-type.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/proposals/schema/static/proposal-activity-type.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Base } from \"../../../common/schema/base.schema\";\nexport declare class ProposalActivityType extends Base {\n    activityType: string;\n}\nexport declare const ProposalActivityTypeSchema: import(\"mongoose\").Schema<ProposalActivityType, import(\"mongoose\").Model<ProposalActivityType, any, any, any, any>, {}, {}, {}, {}, \"type\", ProposalActivityType>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/proposals/schema/static/proposal-activity-type.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/proposals/schema/static/proposal-activity-type.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Base } from \"../../../common/schema/base.schema\";\nexport declare class ProposalActivityType extends Base {\n    activityType: string;\n}\nexport declare const ProposalActivityTypeSchema: import(\"mongoose\").Schema<ProposalActivityType, import(\"mongoose\").Model<ProposalActivityType, any, any, any, any>, {}, {}, {}, {}, \"type\", ProposalActivityType>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/proposals/schema/travel-cost.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/proposals/schema/travel-cost.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Types } from \"mongoose\";\nexport declare class TravelCost {\n    travelCostId: string;\n    proposalId: Types.ObjectId;\n    travel: string;\n    budget: number;\n    amountPerUnit: number;\n    numberOfUnit: number;\n    capnetFinancialFunding: number;\n    networkFinancialFunding: number;\n    partnerFinancialFunding: number;\n    networkInKindFunding: number;\n    partnerInKindFunding: number;\n}\nexport declare const TravelCostSchema: import(\"mongoose\").Schema<TravelCost, import(\"mongoose\").Model<TravelCost, any, any, any, any>, {}, {}, {}, {}, \"type\", TravelCost>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/proposals/schema/travelCost.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/proposals/schema/travelCost.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Types } from \"mongoose\";\nexport declare class TravelCost {\n    travelCostId: string;\n    proposalId: Types.ObjectId;\n    travel: string;\n    budget: number;\n    amountPerUnit: number;\n    numberOfUnit: number;\n    capnetFinancialFunding: number;\n    networkFinancialFunding: number;\n    partnerFinancialFunding: number;\n    networkInKindFunding: number;\n    partnerInKindFunding: number;\n}\nexport declare const TravelCostSchema: import(\"mongoose\").Schema<TravelCost, import(\"mongoose\").Model<TravelCost, any, any, any, any>, {}, {}, {}, {}, \"type\", TravelCost>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/reports/dto/activityParticipationProfile.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/reports/dto/activityParticipationProfile.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class GenderCountDTO {\n    male: number;\n    female: number;\n    ratherNotSay: number;\n    other: number;\n}\nexport declare class InputDataDTO {\n    key: string;\n    value: number;\n}\nexport declare class ActivityParticipationProfileDTO {\n    preEnrolled: GenderCountDTO;\n    enrolled: GenderCountDTO;\n    completed: GenderCountDTO;\n}\nexport declare class AgeGroupCountDTO {\n    below18: number;\n    below25: number;\n    below65: number;\n    above65: number;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/reports/dto/addAdditionalInfo.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/reports/dto/addAdditionalInfo.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FileUploadDTO } from '../schema/outputReport.schema';\nexport declare class AddAdditionalInfoDTO {\n    additionalInfoFile: FileUploadDTO;\n    additionalComment: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/reports/dto/addParticipantInfo.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/reports/dto/addParticipantInfo.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ActivityParticipationProfileDTO, AgeGroupCountDTO, InputDataDTO } from './activityParticipationProfile.dto';\nexport declare class AddParticipantInfoDTO {\n    methodOfEnrollmentInActivity: string;\n    methodOfFillingExitSurvey: string;\n    participantProfileActivityParticipation: ActivityParticipationProfileDTO;\n    participantProfileAge: AgeGroupCountDTO;\n    participantProfileCountry: number;\n    participantProfileRegion: InputDataDTO[];\n    participantProfileInstitutionalAffiliation: InputDataDTO[];\n    participantProfileCapnetAffiliation: number;\n    degreeOfKnowledgeBeforeParticipating: InputDataDTO[];\n    degreeOfKnowledgeAfterParticipating: InputDataDTO[];\n    benefitOnOverallLearningObjective: InputDataDTO[];\n    relevanceInSustainableWaterResourceManagement: InputDataDTO[];\n    levelOfExpectationsMet: InputDataDTO[];\n    knowledgeApplication: InputDataDTO[];\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/reports/dto/createOutcomeReport.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/reports/dto/createOutcomeReport.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Types } from 'mongoose';\nimport { FileUploadDTO } from '../schema/outputReport.schema';\nimport { InputDataDTO } from './activityParticipationProfile.dto';\nimport { KnowledgeAppliedByGenderDTO } from './knowledgeAppliedByGender.dto';\nimport { OutreachDTO } from './outreach.dto';\nimport { PositiveResponsesDTO } from './positiveResponses.dto';\nexport declare class CreateOutcomeReportDTO {\n    year: number;\n    activityCode: string;\n    outcomeReportCode: string;\n    activityName: string;\n    proposalId: Types.ObjectId;\n    outcomeSurveySubmissionMethod: string;\n    outreach: OutreachDTO;\n    positiveResponses: PositiveResponsesDTO;\n    knowledgeAppliedByGender: KnowledgeAppliedByGenderDTO;\n    knowledgeAppliedByInstitution: InputDataDTO[];\n    policyChangesByInstitution: InputDataDTO[];\n    policyChangesByCountry: number;\n    numberOfResponsesStoryOfChange: number;\n    additionalInfoFile: FileUploadDTO;\n    additionalComment: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/reports/dto/createOutputReport.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/reports/dto/createOutputReport.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Types } from 'mongoose';\nimport { FileUploadDTO } from '../schema/outputReport.schema';\nexport declare class CreateOutputReportDTO {\n    year: number;\n    outputReportCode: string;\n    activityCode: string;\n    proposalId: Types.ObjectId;\n    activityName: string;\n    thematicAreaId: Types.ObjectId;\n    activityStartDate: Date;\n    activityEndDate: Date;\n    activityTypeId: Types.ObjectId;\n    language: string;\n    activityScopeId: Types.ObjectId;\n    countryId: Types.ObjectId;\n    cityTown: string;\n    mainPartners: string;\n    expectedOutputs: string;\n    completedOutputs: string;\n    inclusionOrPracticeOfNewTechnologies: boolean;\n    moreInclusionDetails: string;\n    addressSocialInclusionIssue: boolean;\n    moreDetailsOnAddressSocialInclusionIssue: string;\n    includeGenderSpecificMethodology: boolean;\n    moreDetailsOnGenderSpecificMethodology: string;\n    caseStudyManual: FileUploadDTO;\n    facilitators: string;\n    otherThematicArea: string;\n    otherActivityType: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/reports/dto/editOutcomeReport.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/reports/dto/editOutcomeReport.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CreateOutcomeReportDTO } from './createOutcomeReport.dto';\ndeclare const EditOutcomeReportDTO_base: import(\"@nestjs/common\").Type<Partial<CreateOutcomeReportDTO>>;\nexport declare class EditOutcomeReportDTO extends EditOutcomeReportDTO_base {\n}\nexport {};\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/reports/dto/editOutputReport.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/reports/dto/editOutputReport.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CreateOutputReportDTO } from './createOutputReport.dto';\ndeclare const EditOutputReportDTO_base: import(\"@nestjs/common\").Type<Partial<CreateOutputReportDTO>>;\nexport declare class EditOutputReportDTO extends EditOutputReportDTO_base {\n}\nexport {};\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/reports/dto/knowledgeAppliedByGender.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/reports/dto/knowledgeAppliedByGender.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { GenderCountDTO } from './activityParticipationProfile.dto';\nexport declare class KnowledgeAppliedByGenderDTO {\n    raisingAwareness: GenderCountDTO;\n    knowledgeInRoutineWork: GenderCountDTO;\n    knowledgeInEducation: GenderCountDTO;\n    waterProjectImplementation: GenderCountDTO;\n    techInnovation: GenderCountDTO;\n    achieveSGD: GenderCountDTO;\n    formulatingWaterPolicy: GenderCountDTO;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/reports/dto/outreach.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/reports/dto/outreach.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { GenderCountDTO } from './activityParticipationProfile.dto';\nexport declare class OutreachDTO {\n    enrolledParticipants: GenderCountDTO;\n    participantReached: GenderCountDTO;\n    participantRespondedToOutcomeSurvey: GenderCountDTO;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/reports/dto/positiveResponses.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/reports/dto/positiveResponses.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { GenderCountDTO } from './activityParticipationProfile.dto';\nexport declare class PositiveResponsesDTO {\n    knowledgeSharedParticipants: GenderCountDTO;\n    knowledgeAppliedParticipants: GenderCountDTO;\n    institutionalChangeParticipants: GenderCountDTO;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/reports/reports.controller.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/reports/reports.controller.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AddAdditionalInfoDTO } from 'src/activities/dto/addAdditionalInfo.dto';\nimport RequestWithUser from 'src/users/user.service';\nimport { AddParticipantInfoDTO } from './dto/addParticipantInfo.dto';\nimport { CreateOutcomeReportDTO } from './dto/createOutcomeReport.dto';\nimport { CreateOutputReportDTO } from './dto/createOutputReport.dto';\nimport { EditOutcomeReportDTO } from './dto/editOutcomeReport.dto';\nimport { EditOutputReportDTO } from './dto/editOutputReport.dto';\nimport { ReportsService } from './reports.service';\nexport declare class ReportsController {\n    private readonly reportsService;\n    constructor(reportsService: ReportsService);\n    addOutputReport(createOutputReportDto: CreateOutputReportDTO, request: RequestWithUser): Promise<import(\"./schema/outputReport.schema\").OutputReport & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    editOutputReport(editOutputReportDto: EditOutputReportDTO, outputReportId: string, request: RequestWithUser): Promise<import(\"./schema/outputReport.schema\").OutputReport & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    addOrEditParticipantInfo(addParticipantInfoDTO: AddParticipantInfoDTO, outputReportId: string, request: RequestWithUser): Promise<any>;\n    addOrEditAdditionalInfo(addAdditionalInfoDTO: AddAdditionalInfoDTO, outputReportId: string, request: RequestWithUser): Promise<any>;\n    getAllOutputReports(pageSize: number, pageIndex: number, searchKeyword: string, sortType: string, sortDirection: number, year: number, req: any): Promise<{\n        records: any;\n        count: number;\n    }>;\n    getOutputReportById(outputReportId: string): Promise<{\n        outputReport: any;\n    }>;\n    getOutputReportByActivityProposalId(proposalId: any): Promise<any[]>;\n    allOutputReportsForGeneralUser(pageSize: number, pageIndex: number, searchKeyword: string, sortType: string, sortDirection: number, year: number, req: any): Promise<{\n        reportsList: any[];\n        total: number;\n    }>;\n    deleteOutputReport(outputReportId: string, req: any): Promise<import(\"./schema/outputReport.schema\").OutputReport & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    manageNetworkOutputReports(pageSize: number, pageIndex: number, searchKeyword: string, sortType: string, sortDirection: number, year: number): Promise<any>;\n    managePartnerOutputReports(pageSize: number, pageIndex: number, searchKeyword: string, sortType: string, sortDirection: number, year: number): Promise<any>;\n    downloadIndividualOutputReport(outputReportId: string, res: any): Promise<void>;\n    downloadMultipleOutputReports(year: number, res: any): Promise<void>;\n    getEnrolledCount(year: number, activityCode: string): Promise<{\n        enrolledParticipants: import(\"./dto/activityParticipationProfile.dto\").GenderCountDTO;\n    }>;\n    addOutcomeReport(createOutcomeReportDto: CreateOutcomeReportDTO, request: RequestWithUser): Promise<{\n        newOutcomeReport: import(\"./schema/outcomeReport.schema\").OutcomeReport & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        };\n    }>;\n    getAllOutcomeReports(pageSize: number, pageIndex: number, searchKeyword: string, sortType: string, sortDirection: number, year: number, req: any): Promise<{\n        records: any;\n        count: number;\n    }>;\n    allOutcomeReportsForGeneralUser(pageSize: number, pageIndex: number, searchKeyword: string, sortType: string, sortDirection: number, year: number, req: any): Promise<{\n        reportsList: any;\n        total: number;\n    }>;\n    getOutcomeReportById(outcomeReportId: string): Promise<{\n        outcomeReport: any;\n    }>;\n    getOutcomeReportByActivityProposalId(proposalId: any): Promise<any[]>;\n    editOutcomeReport(reportId: string, editReportDTO: EditOutcomeReportDTO, req: any): Promise<any>;\n    deleteOutcomeReport(outcomeReportId: string, req: any): Promise<import(\"./schema/outcomeReport.schema\").OutcomeReport & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    manageNetworkOutcomeReports(pageSize: number, pageIndex: number, searchKeyword: string, sortType: string, sortDirection: number, year: number): Promise<any>;\n    managePartnerOutcomeReports(pageSize: number, pageIndex: number, searchKeyword: string, sortType: string, sortDirection: number, year: number): Promise<any>;\n    downloadIndividualOutcomeReport(outcomeReportId: string, res: any): Promise<void>;\n    downloadAllOutcomeReports(year: number, res: any): Promise<void>;\n    addInvoiceInOutputReport(outputReportId: string, request: any, invoiceId: any): Promise<import(\"./schema/outputReport.schema\").OutputReport & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    addInvoiceInOutcomeReport(outcomeReportId: string, request: any, invoiceId: any): Promise<import(\"./schema/outcomeReport.schema\").OutcomeReport & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    uploadReport(file: any): Promise<{\n        url: string;\n        key: string;\n        fileName: any;\n    }>;\n    getAllFilesFromS3(): Promise<import(\"aws-sdk/clients/s3\").ObjectList>;\n    getEachFileByKeyFromS3(fileKey: string): Promise<import(\"aws-sdk/lib/request\").PromiseResult<import(\"aws-sdk/clients/s3\").GetObjectOutput, import(\"aws-sdk\").AWSError>>;\n    deletePublicFile(fileKey: string): Promise<void>;\n    getSignedUrl(fileKey: string): Promise<string>;\n    uploadSingleFileToAzureBlob(file: any): Promise<{\n        requestId: string;\n        fileName: string;\n    }>;\n    getAllAzureContainers(): Promise<void>;\n    getAllAzureBlobs(): Promise<any[]>;\n    readSingleFileFromAzureBlob(res: any, filename: any): Promise<any>;\n    deleteContainer(containerName: any): Promise<void>;\n    deleteOutputFileFromAzure(filename: string, requestId: string, reportId: string, request: any): Promise<string>;\n    deleteOutcomeFileFromAzure(filename: string, requestId: string, reportId: string, request: any): Promise<string>;\n    finalSaveOutputReport(outputReportId: string): Promise<import(\"./schema/outputReport.schema\").OutputReport & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    finalSaveOutcomeReport(outcomeReportId: string): Promise<import(\"./schema/outcomeReport.schema\").OutcomeReport & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    downloadGeneralUserMultipleOutputReport(year: number, isNetwork: boolean, res: any): Promise<void>;\n    downloadGeneralUserMultipleOutcomeReport(year: number, isNetwork: boolean, res: any): Promise<void>;\n    outputReportByActivityCode(activityCode: string): Promise<import(\"./schema/outputReport.schema\").OutputReport & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    outcomeReportByActivityCode(activityCode: string): Promise<import(\"./schema/outcomeReport.schema\").OutcomeReport & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    validateOnYearForOutcomeReport(year: number, req: any): Promise<import(\"./schema/outputReport.schema\").OutputReport & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/reports/reports.module.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/reports/reports.module.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class ReportsModule {\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/reports/reports.service.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/reports/reports.service.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"multer\" />\n/// <reference types=\"node\" />\nimport { PartnerService } from '../partners/partner.service';\nimport { NetworkService } from '../networks/network.service';\nimport { CreateOutputReportDTO } from './dto/createOutputReport.dto';\nimport { ActivitiesService } from '../activities/activities.service';\nimport { OutputReport } from './schema/outputReport.schema';\nimport { Model, Types } from 'mongoose';\nimport { UserService } from '../users/user.service';\nimport { ActivityLog } from '../common/schema/activityLog.schema';\nimport { EditOutputReportDTO } from './dto/editOutputReport.dto';\nimport { Workbook, Worksheet } from 'exceljs';\nimport { CreateOutcomeReportDTO } from './dto/createOutcomeReport.dto';\nimport { OutcomeReport } from './schema/outcomeReport.schema';\nimport { StaticSurveyService } from '../staticSurveys/staticSurvey.service';\nimport { EditOutcomeReportDTO } from './dto/editOutcomeReport.dto';\nimport { S3 } from 'aws-sdk';\nimport { ConfigService } from '@nestjs/config';\nimport { MelpService } from '../melp/melp.service';\nimport { AddParticipantInfoDTO } from './dto/addParticipantInfo.dto';\nimport { AddAdditionalInfoDTO } from 'src/activities/dto/addAdditionalInfo.dto';\nexport declare class ReportsService {\n    private outputReportModel;\n    private outcomeReportModel;\n    private activityLogModel;\n    private readonly networkService;\n    private readonly partnerService;\n    private readonly activitiesService;\n    private readonly userService;\n    private readonly staticSurveyService;\n    private readonly configService;\n    private readonly melpService;\n    constructor(outputReportModel: Model<OutputReport>, outcomeReportModel: Model<OutcomeReport>, activityLogModel: Model<ActivityLog>, networkService: NetworkService, partnerService: PartnerService, activitiesService: ActivitiesService, userService: UserService, staticSurveyService: StaticSurveyService, configService: ConfigService, melpService: MelpService);\n    commonFunctionForSearchSort(searchKeyword: string, sortKey: string, sortDirection: number): Promise<{\n        regex: RegExp;\n        sortQuery: {};\n    }>;\n    checkIfOutputReportExists(reportId: string): Promise<OutputReport & {\n        _id: Types.ObjectId;\n    }>;\n    checkIfOutcomeReportExists(reportId: string): Promise<OutcomeReport & {\n        _id: Types.ObjectId;\n    }>;\n    getGenderCountTotal(participantCountObj: any): Promise<{\n        preEnrolledTotal: any;\n        enrolledTotal: any;\n        completedTotal: any;\n    }>;\n    getAgeCountTotal(participantCountObj: any): Promise<any>;\n    getCountTotal(countryCountObj: any, regionCountTotal: any, institutionalAffiliation: any, degreeOfKnowledgeBeforeParticipating: any, degreeOfKnowledgeAfterParticipating: any, overallLearningObjective: any, relevance: any, levelOfExpectationsMet: any, knowledgeApplication: any): Promise<{\n        countryTotal: any;\n        regionTotal: any;\n        institutionalAffiliationTotal: any;\n        knowledgeBeforeParticipatingTotal: any;\n        knowledgeAfterParticipatingTotal: any;\n        overallLearningObjectiveTotal: any;\n        relevanceTotal: any;\n        levelOfExpectationsMetTotal: any;\n        knowledgeApplicationTotal: any;\n    }>;\n    addOutputReport(createOutputReportDto: CreateOutputReportDTO, user: any): Promise<OutputReport & {\n        _id: Types.ObjectId;\n    }>;\n    getAllOutputReports(pageSize: number, pageIndex: number, searchKeyword: string, sortType: string, sortDirection: number, year: number, user: any): Promise<{\n        records: any;\n        count: number;\n    }>;\n    getOutputReportById(reportId: string): Promise<{\n        outputReport: any;\n    }>;\n    getOutputReportByActivityProposalId(proposalId: any): Promise<any[]>;\n    getApprovedOutputReports(year: number, user: any): Promise<(OutputReport & {\n        _id: Types.ObjectId;\n    })[]>;\n    getApprovedOutputReportsForCapnet(year: number): Promise<(OutputReport & {\n        _id: Types.ObjectId;\n    })[]>;\n    updateReport(reportId: string, editReportDTO: EditOutputReportDTO, user: any): Promise<OutputReport & {\n        _id: Types.ObjectId;\n    }>;\n    addOrEditParticipantInfo(reportId: string, addParticipantInfoDTO: AddParticipantInfoDTO, user: any): Promise<any>;\n    addOrEditAdditionalInfo(reportId: string, addAdditionaltInfoDTO: AddAdditionalInfoDTO, user: any): Promise<any>;\n    deleteOutputReport(reportId: string, user: any): Promise<OutputReport & {\n        _id: Types.ObjectId;\n    }>;\n    updateGeneralUserReportStatus(reportId: any, statusId: any, user: any): Promise<OutputReport & {\n        _id: Types.ObjectId;\n    }>;\n    updateGeneralUserOutcomeReportStatus(reportId: any, statusId: any, user: any): Promise<OutcomeReport & {\n        _id: Types.ObjectId;\n    }>;\n    downloadActivityParticipation(year: number, activityParticipationSheet: Worksheet, activityCode: string, activityName: string, reportCode: string, activityParticipation: any): Promise<void>;\n    downloadProfileAge(year: number, profileAgeSheet: Worksheet, activityCode: string, activityName: string, reportCode: string, ageDetails: any): Promise<void>;\n    downloadProfileCountry(year: number, countrySheet: Worksheet, activityCode: string, activityName: string, reportCode: string, countryData: any): Promise<void>;\n    downloadProfileRegion(year: number, regionSheet: Worksheet, activityCode: string, activityName: string, reportCode: string, regionData: any): Promise<void>;\n    downloadProfileInstitutionalAffiliation(year: number, institutionalAffiliationSheet: Worksheet, activityCode: string, activityName: string, reportCode: string, institutionalAffiliationData: any): Promise<void>;\n    downloadKnowledgeParticipating(year: number, knowledgeParticipatingSheet: Worksheet, activityCode: string, activityName: string, reportCode: string, knowledgeParticipatingData: any): Promise<void>;\n    downloadOverallLearningObjective(year: number, overallLearningObjectiveSheet: Worksheet, activityCode: string, activityName: string, reportCode: string, learingObjectiveData: any): Promise<void>;\n    downloadWaterResourceManagement(year: number, waterResourceManagementSheet: Worksheet, activityCode: string, activityName: string, reportCode: string, waterResourceManagementData: any): Promise<void>;\n    downloadExpectationsMet(year: number, levelOfExpectationsMetSheet: Worksheet, activityCode: string, activityName: string, reportCode: string, data: any): Promise<void>;\n    downloadKnowledgeApplication(year: number, knowledgeApplicationSheet: Worksheet, activityCode: string, activityName: string, reportCode: string, data: any): Promise<void>;\n    downloadOutputReport(res: any, report: any, workbook: Workbook): Promise<void>;\n    downloadIndividualOutputReport(res: any, reportId: string): Promise<void>;\n    downloadMultipleOutputReports(res: any, year: number): Promise<void>;\n    getEnrolledCount(activityCode: string, year: number): Promise<{\n        enrolledParticipants: import(\"./dto/activityParticipationProfile.dto\").GenderCountDTO;\n    }>;\n    getCountKnowledgeShared(outcomeReportId: string, user: any): Promise<{\n        manCount: number;\n        womanCount: number;\n        otherCount: number;\n        notSayCount: number;\n        sum: number;\n    }>;\n    addOutcomeReport(createOutcomeReportDto: CreateOutcomeReportDTO, user: any): Promise<{\n        newOutcomeReport: OutcomeReport & {\n            _id: Types.ObjectId;\n        };\n    }>;\n    getOutcomeReportById(reportId: string): Promise<{\n        outcomeReport: any;\n    }>;\n    getOutcomeReportByActivityProposalId(proposalId: any): Promise<any[]>;\n    getAllOutcomeReports(pageSize: number, pageIndex: number, searchKeyword: string, sortType: string, sortDirection: number, year: number, user: any): Promise<{\n        records: any;\n        count: number;\n    }>;\n    updateOutcomeReport(reportId: string, editReportDTO: EditOutcomeReportDTO, user: any): Promise<any>;\n    getOutcomeAndOutputReportStatusWiseCount(year: number, networkId: any, partnerId: any): Promise<{\n        outputSubmittedCount: number;\n        outputApprovedCount: number;\n        outputDeniedCount: number;\n        outputInfoRequestedCount: number;\n        outcomeSubmittedCount: number;\n        outcomeApprovedCount: number;\n        outcomeDeniedCount: number;\n        outcomeInfoRequestedCount: number;\n    }>;\n    commonFunctionForParticipantionCounts(outputReportList: OutputReport[]): Promise<{\n        manCount: number;\n        womanCount: number;\n        otherCount: number;\n        notSayCount: number;\n        genderCount: number;\n        below18Count: number;\n        below25Count: number;\n        below65Count: number;\n        above65Count: number;\n        ageCount: number;\n        americaRegionCount: number;\n        asiaRegionCount: number;\n        africaRegionCount: number;\n        arabRegionCount: number;\n        europeRegionCount: number;\n        regionCount: number;\n        govtCount: number;\n        unCount: number;\n        ngoCount: number;\n        academiaCount: number;\n        riverCount: number;\n        waterUtilityCount: number;\n        privateCount: number;\n        independentCount: number;\n        typeOfInstitutionCount: number;\n    }>;\n    getParticipationInfo(year: number, user: any): Promise<{\n        manCount: number;\n        womanCount: number;\n        otherCount: number;\n        notSayCount: number;\n        genderCount: number;\n        below18Count: number;\n        below25Count: number;\n        below65Count: number;\n        above65Count: number;\n        ageCount: number;\n        americaRegionCount: number;\n        asiaRegionCount: number;\n        africaRegionCount: number;\n        arabRegionCount: number;\n        europeRegionCount: number;\n        regionCount: number;\n        govtCount: number;\n        unCount: number;\n        ngoCount: number;\n        academiaCount: number;\n        riverCount: number;\n        waterUtilityCount: number;\n        privateCount: number;\n        independentCount: number;\n        typeOfInstitutionCount: number;\n    }>;\n    commonFunctionForOutputReportSummaryInfo(outputReportList: OutputReport[]): Promise<{\n        degreeOfKnowledge: {\n            veryHighKnowledgeCount: number;\n            highKnowledgeCount: number;\n            mediumKnowledgeCount: number;\n            lowKnowledgeCount: number;\n            noKnowledgeCount: number;\n        };\n        levelOfBenefits: {\n            veryBeneficialCount: number;\n            somewhatBeneficialCount: number;\n            notBeneficialCount: number;\n        };\n        levelOfRelevance: {\n            extremelyRelevantCount: number;\n            relevantCount: number;\n            slightlyRelevantCount: number;\n            notRelevantCount: number;\n        };\n        levelOfExpectation: {\n            exceededExpectationCount: number;\n            partialExpectationCount: number;\n            fullExpectationCount: number;\n            noExpectationCount: number;\n        };\n        knowledgeApplication: {\n            instituteKnowledgeCount: number;\n            outsideKnowledgeCount: number;\n            waterSectorKnowledgeCount: number;\n            educationPurposeKnowledgeCount: number;\n            communityChangesKnowledgeCount: number;\n            policyChangesKnowledgeCount: number;\n            waterPloicyKnowledgeCount: number;\n            notApplyKnowledgeCount: number;\n        };\n    }>;\n    getOutputReportSummary(year: number, user: any): Promise<{\n        degreeOfKnowledge: {\n            veryHighKnowledgeCount: number;\n            highKnowledgeCount: number;\n            mediumKnowledgeCount: number;\n            lowKnowledgeCount: number;\n            noKnowledgeCount: number;\n        };\n        levelOfBenefits: {\n            veryBeneficialCount: number;\n            somewhatBeneficialCount: number;\n            notBeneficialCount: number;\n        };\n        levelOfRelevance: {\n            extremelyRelevantCount: number;\n            relevantCount: number;\n            slightlyRelevantCount: number;\n            notRelevantCount: number;\n        };\n        levelOfExpectation: {\n            exceededExpectationCount: number;\n            partialExpectationCount: number;\n            fullExpectationCount: number;\n            noExpectationCount: number;\n        };\n        knowledgeApplication: {\n            instituteKnowledgeCount: number;\n            outsideKnowledgeCount: number;\n            waterSectorKnowledgeCount: number;\n            educationPurposeKnowledgeCount: number;\n            communityChangesKnowledgeCount: number;\n            policyChangesKnowledgeCount: number;\n            waterPloicyKnowledgeCount: number;\n            notApplyKnowledgeCount: number;\n        };\n    }>;\n    commonFunctionForOutcomeReportSummaryInfo(outcomeReportList: OutcomeReport[]): Promise<{\n        knowledgeApplied: {\n            raisingAwarenessCount: number;\n            routineWorkKnowledgeCount: number;\n            educationPurposeKnowledgeCount: number;\n            waterProjectCount: number;\n            technologyInnovationCount: number;\n            sdgCount: number;\n            waterPolicyCount: number;\n        };\n        relevantInstitutionalChange: {\n            govtCount: number;\n            unCount: number;\n            ngoCount: number;\n            academiaCount: number;\n            riverCount: number;\n            waterUtilityCount: number;\n            privateCount: number;\n            independentCount: number;\n            totalRelevantInstitutionalChangeCount: number;\n        };\n        countriesRelevantInstitutionalChange: {\n            countriesCount: number;\n        };\n    }>;\n    getOutcomeReportSummary(year: number, user: any): Promise<{\n        knowledgeApplied: {\n            raisingAwarenessCount: number;\n            routineWorkKnowledgeCount: number;\n            educationPurposeKnowledgeCount: number;\n            waterProjectCount: number;\n            technologyInnovationCount: number;\n            sdgCount: number;\n            waterPolicyCount: number;\n        };\n        relevantInstitutionalChange: {\n            govtCount: number;\n            unCount: number;\n            ngoCount: number;\n            academiaCount: number;\n            riverCount: number;\n            waterUtilityCount: number;\n            privateCount: number;\n            independentCount: number;\n            totalRelevantInstitutionalChangeCount: number;\n        };\n        countriesRelevantInstitutionalChange: {\n            countriesCount: number;\n        };\n    }>;\n    deleteOutcomeReport(reportId: string, user: any): Promise<OutcomeReport & {\n        _id: Types.ObjectId;\n    }>;\n    downloadOutreachDetails(year: number, outreachSheet: Worksheet, activityCode: string, activityName: string, reportCode: string, outreachData: any): Promise<void>;\n    downloadPositiveResponseDetails(year: number, positiveResponsesSheet: Worksheet, activityCode: string, activityName: string, reportCode: string, positiveResponseData: any): Promise<void>;\n    downloadKnowledgeAppliedGenderDetails(year: number, knowledgeAppliedGenderSheet: Worksheet, activityCode: string, activityName: string, reportCode: string, knowledgeData: any): Promise<void>;\n    downloadKnowledgeAppliedInstituteDetails(year: number, knowledgeAppliedInstitutionSheet: Worksheet, activityCode: string, activityName: string, reportCode: string, knowledgeData: any): Promise<void>;\n    downloadPolicyChangesByInstitution(year: number, policyChangesInstitutionSheet: Worksheet, activityCode: string, activityName: string, reportCode: string, policyData: any): Promise<void>;\n    downloadOutcomeReport(res: any, report: any, workbook: Workbook): Promise<void>;\n    downloadIndividualOutcomeReport(res: any, reportId: string): Promise<void>;\n    downloadMultipleOutcomeReports(res: any, year: number): Promise<void>;\n    addInvoiceInOutputReport(outputReportId: string, user: any, invoiceId: any): Promise<OutputReport & {\n        _id: Types.ObjectId;\n    }>;\n    addInvoiceInOutcomeReport(outcomeReportId: string, user: any, invoiceId: any): Promise<OutcomeReport & {\n        _id: Types.ObjectId;\n    }>;\n    uploadFile(file: any): Promise<{\n        url: string;\n        key: string;\n        fileName: any;\n    }>;\n    uploadS3(file: any, bucket: any, fileName: any, mimetype: any): Promise<{\n        url: string;\n        key: string;\n        fileName: any;\n    }>;\n    getS3(): S3;\n    getAllFilesFromS3(): Promise<S3.ObjectList>;\n    getEachFileByKeyFromS3(fileKey: string): Promise<import(\"aws-sdk/lib/request\").PromiseResult<S3.GetObjectOutput, import(\"aws-sdk\").AWSError>>;\n    deletePublicFile(fileKey: string): Promise<void>;\n    getSignedUrl(fileKey: string): Promise<string>;\n    containerName: string;\n    getBlobClient(imageName: string): Promise<import(\"@azure/storage-blob\").BlockBlobClient>;\n    uploadSingleFileToAzureBlob(file: Express.Multer.File): Promise<{\n        requestId: string;\n        fileName: string;\n    }>;\n    getAllAzureBlobs(): Promise<any[]>;\n    readSingleFileFromAzureBlob(fileName: string): Promise<NodeJS.ReadableStream>;\n    getAllAzureContainers(): Promise<void>;\n    deleteContainer(containerName: string): Promise<void>;\n    deleteOutputFileFromAzure(filename: string, requestId: string, reportId: string, user: any): Promise<void>;\n    deleteOutcomeFileFromAzure(filename: string, requestId: string, reportId: string, user: any): Promise<void>;\n    allOutputReportsForGeneralUser(pageSize: number, pageIndex: number, searchKeyword: string, sortKey: string, sortDirection: number, year: number, user: any): Promise<{\n        reportsList: any[];\n        total: number;\n    }>;\n    allOutcomeReportsForGeneralUser(pageSize: number, pageIndex: number, searchKeyword: string, sortKey: string, sortDirection: number, year: number, user: any): Promise<{\n        reportsList: any;\n        total: number;\n    }>;\n    manageNetworkOutputReports(pageSize: number, pageIndex: number, searchKeyword: string, sortKey: string, sortDirection: number, year: number): Promise<any>;\n    managePartnerOutputReports(pageSize: number, pageIndex: number, searchKeyword: string, sortKey: string, sortDirection: number, year: number): Promise<any>;\n    manageNetworkOutcomeReports(pageSize: number, pageIndex: number, searchKeyword: string, sortKey: string, sortDirection: number, year: number): Promise<any>;\n    managePartnerOutcomeReports(pageSize: number, pageIndex: number, searchKeyword: string, sortKey: string, sortDirection: number, year: number): Promise<any>;\n    updateOutputReportApprovedCount(count: number, outputReportId: string): Promise<OutputReport & {\n        _id: Types.ObjectId;\n    }>;\n    updateOutcomeReportApprovedCount(count: number, outcomeReportId: string): Promise<OutcomeReport & {\n        _id: Types.ObjectId;\n    }>;\n    setApprovedAtTimeOfOutputReport(outputReportId: string, approvedAt: Date): Promise<OutputReport & {\n        _id: Types.ObjectId;\n    }>;\n    setApprovedAtTimeOfOutcomeReport(outcomeReportId: string, approvedAt: Date): Promise<OutcomeReport & {\n        _id: Types.ObjectId;\n    }>;\n    setSubmittedAtTimeOfOutputReport(outputReportId: string, submittedAt: Date): Promise<OutputReport & {\n        _id: Types.ObjectId;\n    }>;\n    setSubmittedAtTimeOfOutcomeReport(outcomeReportId: string, submittedAt: Date): Promise<OutcomeReport & {\n        _id: Types.ObjectId;\n    }>;\n    finalSaveOutputReport(reportId: string): Promise<OutputReport & {\n        _id: Types.ObjectId;\n    }>;\n    finalSaveOutcomeReport(reportId: string): Promise<OutcomeReport & {\n        _id: Types.ObjectId;\n    }>;\n    downloadGeneralUserMultipleOutputReport(res: any, year: number, isNetwork: boolean): Promise<void>;\n    downloadGeneralUserMultipleOutcomeReport(res: any, year: number, isNetwork: boolean): Promise<void>;\n    outputReportByActivityCode(activityCode: string): Promise<OutputReport & {\n        _id: Types.ObjectId;\n    }>;\n    outcomeReportByActivityCode(activityCode: string): Promise<OutcomeReport & {\n        _id: Types.ObjectId;\n    }>;\n    validateOnYearForOutcomeReport(year: number, user: any): Promise<OutputReport & {\n        _id: Types.ObjectId;\n    }>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/reports/schema/outcomeReport.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/reports/schema/outcomeReport.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Document, Types } from 'mongoose';\nimport { Base } from '../../common/schema/base.schema';\nimport { InputDataDTO } from '../dto/activityParticipationProfile.dto';\nimport { KnowledgeAppliedByGenderDTO } from '../dto/knowledgeAppliedByGender.dto';\nimport { OutreachDTO } from '../dto/outreach.dto';\nimport { PositiveResponsesDTO } from '../dto/positiveResponses.dto';\nimport { FileUploadDTO } from './outputReport.schema';\nexport declare type OutcomeReportDocument = OutcomeReport & Document;\nexport declare class OutcomeReport extends Base {\n    outcomeReportId: string;\n    year: number;\n    outcomeReportCode: string;\n    activityCode: string;\n    activityName: string;\n    proposalId: Types.ObjectId;\n    outcomeSurveySubmissionMethod: string;\n    outreach: OutreachDTO;\n    positiveResponses: PositiveResponsesDTO;\n    knowledgeAppliedByGender: KnowledgeAppliedByGenderDTO;\n    knowledgeAppliedByInstitution: InputDataDTO[];\n    policyChangesByInstitution: InputDataDTO[];\n    policyChangesByCountry: number;\n    numberOfResponsesStoryOfChange: number;\n    additionalInfoFile: FileUploadDTO;\n    additionalComment: string;\n    outcomeReportStatus: Types.ObjectId;\n    statusName: string;\n    submittedAt: Date;\n    approvedAt: Date;\n    networkId: Types.ObjectId;\n    networkName: string;\n    partnerName: string;\n    instituteName: string;\n    partnerId: Types.ObjectId;\n    isDeleted: boolean;\n    approvedCount: number;\n    invoiceId: Types.ObjectId;\n}\nexport declare const OutcomeReportSchema: import(\"mongoose\").Schema<OutcomeReport, import(\"mongoose\").Model<OutcomeReport, any, any, any, any>, {}, {}, {}, {}, \"type\", OutcomeReport>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/reports/schema/outputReport.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/reports/schema/outputReport.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Document, Types } from 'mongoose';\nimport { Base } from 'src/common/schema/base.schema';\nimport { ActivityParticipationProfileDTO, AgeGroupCountDTO, InputDataDTO } from '../dto/activityParticipationProfile.dto';\nexport declare class FileUploadDTO {\n    requestId: string;\n    fileName: string;\n}\nexport declare type OutputReportDocument = OutputReport & Document;\nexport declare class OutputReport extends Base {\n    outputReportId: string;\n    year: number;\n    activityCode: string;\n    proposalId: Types.ObjectId;\n    outputReportCode: string;\n    activityName: string;\n    thematicAreaId: Types.ObjectId;\n    activityStartDate: Date;\n    activityEndDate: Date;\n    activityTypeId: Types.ObjectId;\n    language: string;\n    activityScopeId: Types.ObjectId;\n    countryId: Types.ObjectId;\n    cityTown: string;\n    mainPartners: string;\n    expectedOutputs: string;\n    completedOutputs: string;\n    inclusionOrPracticeOfNewTechnologies: boolean;\n    moreInclusionDetails: string;\n    addressSocialInclusionIssue: boolean;\n    moreDetailsOnAddressSocialInclusionIssue: string;\n    includeGenderSpecificMethodology: boolean;\n    moreDetailsOnGenderSpecificMethodology: string;\n    caseStudyManual: FileUploadDTO;\n    facilitators: string;\n    methodOfEnrollmentInActivity: string;\n    methodOfFillingExitSurvey: string;\n    participantProfileActivityParticipation: ActivityParticipationProfileDTO;\n    participantProfileAge: AgeGroupCountDTO;\n    participantProfileCountry: InputDataDTO[];\n    participantProfileRegion: InputDataDTO[];\n    participantProfileInstitutionalAffiliation: InputDataDTO[];\n    participantProfileCapnetAffiliation: number;\n    degreeOfKnowledgeBeforeParticipating: InputDataDTO[];\n    degreeOfKnowledgeAfterParticipating: InputDataDTO[];\n    benefitOnOverallLearningObjective: InputDataDTO[];\n    relevanceInSustainableWaterResourceManagement: InputDataDTO[];\n    levelOfExpectationsMet: InputDataDTO[];\n    knowledgeApplication: InputDataDTO[];\n    additionalInfoFile: FileUploadDTO;\n    additionalComment: string;\n    outputReportStatus: Types.ObjectId;\n    statusName: string;\n    networkName: string;\n    partnerName: string;\n    submittedAt: Date;\n    approvedAt: Date;\n    exitSurveyResponseRate: number;\n    networkId: Types.ObjectId;\n    instituteName: string;\n    partnerId: Types.ObjectId;\n    isDeleted: boolean;\n    approvedCount: number;\n    invoiceId: Types.ObjectId;\n    otherThematicArea: string;\n    otherActivityType: string;\n}\nexport declare const OutputReportSchema: import(\"mongoose\").Schema<OutputReport, import(\"mongoose\").Model<OutputReport, any, any, any, any>, {}, {}, {}, {}, \"type\", OutputReport>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/staticSurveys/dto/activateOrDeactivateSurvey.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/staticSurveys/dto/activateOrDeactivateSurvey.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class ActivateOrDeactivateSurveyLinkDTO {\n    action: string;\n    surveyId: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/staticSurveys/dto/entrySurveyForm.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/staticSurveys/dto/entrySurveyForm.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Types } from 'mongoose';\nexport declare class EntrySurveyFormDTO {\n    year: number;\n    language: string;\n    activityId: Types.ObjectId;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/staticSurveys/dto/entrySurveyResponse.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/staticSurveys/dto/entrySurveyResponse.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Types } from 'mongoose';\nimport { CourseObjectives } from '../schema/entrySurveyResponse.schema';\nimport { SurveyResponseDTO } from './surveyResponse.dto';\nexport declare class EntrySurveyResponseDTO extends SurveyResponseDTO {\n    regionId: Types.ObjectId;\n    countryId: Types.ObjectId;\n    scopeOfWorkId: Types.ObjectId;\n    networkId: Types.ObjectId | string;\n    influenceType: string;\n    institutionTypeId: Types.ObjectId;\n    orgainsationName: string;\n    knowledgeRating: string;\n    courseObjectives: CourseObjectives[];\n    mainMotivation: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/staticSurveys/dto/exitSurveyForm.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/staticSurveys/dto/exitSurveyForm.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/staticSurveys/dto/exitSurveyResponse.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/staticSurveys/dto/exitSurveyResponse.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { SurveyResponseDTO } from './surveyResponse.dto';\nexport declare class ExitSurveyResponseDTO extends SurveyResponseDTO {\n    activityCompletedInEntirety: string;\n    beneficiality: string;\n    relevance: string;\n    expectations: string;\n    degreeOfKnowledge: string;\n    applicationOfKnowledge: string;\n    valuableConcept: string;\n    topicsInGreaterDepth: string;\n    interactionWithFellowParticipants: string;\n    feedback: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/staticSurveys/dto/outcomeSurveyResponse.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/staticSurveys/dto/outcomeSurveyResponse.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Types } from 'mongoose';\nimport { KnowledgeSharing } from '../schema/outcomeSurveyResponse.schema';\nimport { SurveyResponseDTO } from './surveyResponse.dto';\nexport declare class OutcomeSurveyResponseDTO extends SurveyResponseDTO {\n    countryId: Types.ObjectId;\n    institutionTypeId: Types.ObjectId;\n    orgainsation: string;\n    knowledgeSharing: KnowledgeSharing[];\n    knowledgeApplication: string;\n    knowledgeApplicationExplaination: string;\n    isRelevantChange: boolean;\n    elaborateChange: string;\n    typeOfInstitutionInvolved: string;\n    locationOfChange: string;\n    isStoryOfChange: boolean;\n    comments: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/staticSurveys/dto/surveyForm.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/staticSurveys/dto/surveyForm.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Types } from 'mongoose';\nexport declare class SurveyFormDTO {\n    year: number;\n    language: string;\n    proposalId: Types.ObjectId;\n    activityCode: string;\n    activityName: string;\n    formCode: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/staticSurveys/dto/surveyResponse.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/staticSurveys/dto/surveyResponse.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Types } from 'mongoose';\nexport declare class SurveyResponseDTO {\n    email: string;\n    firstName: string;\n    lastName: string;\n    genderId: Types.ObjectId;\n    ageGroupId: Types.ObjectId;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/staticSurveys/enum/ageGroup.enum.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/staticSurveys/enum/ageGroup.enum.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare enum AgeGroupEnum {\n    UNDER18 = \"Under 18\",\n    UNDER25 = \"18-25\",\n    UNDER65 = \"26-65\",\n    OVER66 = \"66+\"\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/staticSurveys/enum/benefitsLevel.enum.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/staticSurveys/enum/benefitsLevel.enum.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare enum BenefitsLevelEnum {\n    BENEFICIAL = \"Very beneficial\",\n    SOMEWHATBENEFICIAL = \"Somewhat beneficial\",\n    NOTBENEFICIAL = \"Not beneficial\"\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/staticSurveys/enum/degreeOfKnowledge.enum.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/staticSurveys/enum/degreeOfKnowledge.enum.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare enum DegreeOfKnowledgeEnum {\n    VERYHIGH = \"Very high, it offered me new perspectives and significantly increased my knowledge\",\n    HIGH = \"High, it presented a good update and significant contributions\",\n    LOW = \"Low, it did not make a significant contribution\",\n    MEDIUM = \"Medium, it had an acceptable level of contents\",\n    NONE = \"None, it was quite weak\"\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/staticSurveys/enum/degreeOfKnowledgeGained.enum.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/staticSurveys/enum/degreeOfKnowledgeGained.enum.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare enum DegreeOfKnowledgeGainedEnum {\n    VERYHIGH = \"Very High\",\n    HIGH = \"High\",\n    LOW = \"Low\",\n    MEDIUM = \"Medium\",\n    NONE = \"None\"\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/staticSurveys/enum/degreeOfNewKnowledge.enum.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/staticSurveys/enum/degreeOfNewKnowledge.enum.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare enum DegreeOfNewKnowledgeEnum {\n    VERYHIGH = \"Very high, it offered me new perspectives and significantly increased my knowledge\",\n    HIGH = \"High, it presented a good update and significant contributions\",\n    LOW = \"Low, it did not make a significant contribution\",\n    MEDIUM = \"Medium, it had an acceptable level of contents\",\n    NONE = \"None, it was quite weak\"\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/staticSurveys/enum/expectationLevel.enum.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/staticSurveys/enum/expectationLevel.enum.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare enum ExpectationLevelEnum {\n    NOTMET = \"Did not meet expectations\",\n    PARTIAL = \"Partially met expectations\",\n    FULL = \"Fully met expectations\",\n    EXCEEDED = \"Exceeded expectations\"\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/staticSurveys/enum/gender.enum.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/staticSurveys/enum/gender.enum.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare enum GenderEnum {\n    MAN = \"Man\",\n    WOMAN = \"Woman\",\n    OTHER = \"Other\",\n    NOTSAY = \"I'd rather not say\"\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/staticSurveys/enum/knowledgeApplication.enum.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/staticSurveys/enum/knowledgeApplication.enum.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare enum KnowledgeApplicationEnum {\n    AWARENESS = \"Raising awareness in improved water resource management\",\n    ROUTINE = \"Applying knowledge in routine work as a water sector employee\",\n    EDUCATIONAL = \"Applying knowledge in educational, academic or research purposes\",\n    IMPLEMENTATIONS = \"Contributing to improved implementation of water related projects\",\n    INNOVATIONS = \"Contributing to new technology innovations, adaptation and/or use\",\n    SDG = \"Supporting the achievement of SDGs\",\n    POLICY = \"Formulating water policy, regulation, law or strategy\",\n    NOTAPPLIED = \"I have not applied knowledge gained from activity\"\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/staticSurveys/enum/knowledgeGained.enum.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/staticSurveys/enum/knowledgeGained.enum.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare enum KnowledgeGainedEnum {\n    INSIDE_INSTITUTION = \"Sharing knowledge within my institution/organization\",\n    OUTSIDE_INSTITUTION = \"Sharing knowledge outside my institution/organization\",\n    ROUTINE = \"Applying knowledge in routine work as a water sector employee\",\n    EDUCATIONAL = \"Applying knowledge in educational, academic or research purposes\",\n    IMPROVEMENTS = \"Contribute to changes or improvements in my community\",\n    POLICY_LEVEL = \"Advocate for changes or improvements at policy-level\",\n    LAW = \"Formulating water policy, regulation, law, or strategy\",\n    NOT_APPLIED = \"I don't plan to apply knowledge in any of these ways\"\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/staticSurveys/enum/knowledgeRating.enum.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/staticSurveys/enum/knowledgeRating.enum.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare enum KnowledgeRatingEnum {\n    HIGH = \"High\",\n    LOW = \"Low\",\n    MEDIUM = \"Medium\",\n    NONE = \"None\"\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/staticSurveys/enum/region.enum.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/staticSurveys/enum/region.enum.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare enum RegionEnum {\n    ASIA = \"Asia and Pacific\",\n    AMERICA = \"Americas\",\n    AFRICA = \"Africa\",\n    ARAB = \"Arab States\",\n    EUROPE = \"Europe and Central Asia\"\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/staticSurveys/enum/relevanceLevel.enum.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/staticSurveys/enum/relevanceLevel.enum.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare enum RelevanceLevelEnum {\n    NOTRELEVANT = \"Not relevant\",\n    RELEVANT = \"Relevant\",\n    EXTREME = \"Extremely relevant\",\n    SLIGHTLY = \"Slightly relevant\"\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/staticSurveys/enum/typeOfInstitution.enum.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/staticSurveys/enum/typeOfInstitution.enum.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare enum TypeOfInstitutionEnum {\n    GOVT = \"Government\",\n    UN = \"UN/Inter-Governmental Organisation\",\n    NGO = \"Non-Governmental Organisation/Civil Society\",\n    ACADEMIA = \"Academia/Research/Education\",\n    RIVER = \"River Basin Organisation\",\n    UTILITY = \"Water Utility Entity\",\n    PRIVATE = \"Private Sector\",\n    INDEPENDENT = \"Independent Professional/Community Member\"\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/staticSurveys/schema/baseSurveyForm.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/staticSurveys/schema/baseSurveyForm.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Types } from 'mongoose';\nimport { Base } from '../../common/schema/base.schema';\nexport declare class BaseSurveyForm extends Base {\n    formCode: string;\n    year: number;\n    language: string;\n    instituteName: string;\n    proposalId: Types.ObjectId;\n    activityCode: string;\n    activityName: string;\n    networkId: Types.ObjectId;\n    partnerId: Types.ObjectId;\n    link: string;\n    isActive: boolean;\n    closedAt: Date;\n}\nexport declare const BaseSurveyFormSchema: import(\"mongoose\").Schema<BaseSurveyForm, import(\"mongoose\").Model<BaseSurveyForm, any, any, any, any>, {}, {}, {}, {}, \"type\", BaseSurveyForm>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/staticSurveys/schema/entrySurveyForm.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/staticSurveys/schema/entrySurveyForm.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { BaseSurveyForm } from './baseSurveyForm.schema';\nexport declare class EntrySurveyForm extends BaseSurveyForm {\n    entrySurveyFormId: string;\n    createdAt?: Date;\n    updatedAt?: Date;\n}\nexport declare const EntrySurveyFormSchema: import(\"mongoose\").Schema<EntrySurveyForm, import(\"mongoose\").Model<EntrySurveyForm, any, any, any, any>, {}, {}, {}, {}, \"type\", EntrySurveyForm>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/staticSurveys/schema/entrySurveyResponse.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/staticSurveys/schema/entrySurveyResponse.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Types } from 'mongoose';\nexport declare class EntrySurveyResponse {\n    entrySurveyResponseId: string;\n    entrySurveyFormId: Types.ObjectId;\n    email: string;\n    firstName: string;\n    lastName: string;\n    genderId: Types.ObjectId;\n    ageGroupId: Types.ObjectId;\n    regionId: Types.ObjectId;\n    countryId: Types.ObjectId;\n    scopeOfWorkId: Types.ObjectId;\n    influenceType: string;\n    networkId: Types.ObjectId;\n    institutionTypeId: Types.ObjectId;\n    orgainsationName: string;\n    knowledgeRating: string;\n    courseObjectives: CourseObjectives[];\n    mainMotivation: string;\n}\nexport declare const EntrySurveyResponseSchema: import(\"mongoose\").Schema<EntrySurveyResponse, import(\"mongoose\").Model<EntrySurveyResponse, any, any, any, any>, {}, {}, {}, {}, \"type\", EntrySurveyResponse>;\nexport interface CourseObjectives {\n    key: string;\n    value: boolean;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/staticSurveys/schema/exitSurveyForm.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/staticSurveys/schema/exitSurveyForm.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { BaseSurveyForm } from './baseSurveyForm.schema';\nexport declare class ExitSurveyForm extends BaseSurveyForm {\n    exitSurveyFormId: string;\n    createdAt?: Date;\n    updatedAt?: Date;\n}\nexport declare const ExitSurveyFormSchema: import(\"mongoose\").Schema<ExitSurveyForm, import(\"mongoose\").Model<ExitSurveyForm, any, any, any, any>, {}, {}, {}, {}, \"type\", ExitSurveyForm>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/staticSurveys/schema/exitSurveyResponse.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/staticSurveys/schema/exitSurveyResponse.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Types } from 'mongoose';\nexport declare class ExitSurveyResponse {\n    exitSurveyResponseId: string;\n    exitSurveyFormId: Types.ObjectId;\n    email: string;\n    firstName: string;\n    lastName: string;\n    genderId: Types.ObjectId;\n    ageGroupId: Types.ObjectId;\n    activityCompletedInEntirety: string;\n    beneficiality: string;\n    relevance: string;\n    expectations: string;\n    degreeOfKnowledge: string;\n    applicationOfKnowledge: string;\n    valuableConcept: string;\n    topicsInGreaterDepth: string;\n    interactionWithFellowParticipants: string;\n    feedback: string;\n}\nexport declare const ExitSurveyResponseSchema: import(\"mongoose\").Schema<ExitSurveyResponse, import(\"mongoose\").Model<ExitSurveyResponse, any, any, any, any>, {}, {}, {}, {}, \"type\", ExitSurveyResponse>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/staticSurveys/schema/outcomeSurveyForm.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/staticSurveys/schema/outcomeSurveyForm.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { BaseSurveyForm } from './baseSurveyForm.schema';\nexport declare class OutcomeSurveyForm extends BaseSurveyForm {\n    outcomeSurveyFormId: string;\n    closedAt: Date;\n    createdAt?: Date;\n    updatedAt?: Date;\n}\nexport declare const OutcomeSurveyFormSchema: import(\"mongoose\").Schema<OutcomeSurveyForm, import(\"mongoose\").Model<OutcomeSurveyForm, any, any, any, any>, {}, {}, {}, {}, \"type\", OutcomeSurveyForm>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/staticSurveys/schema/outcomeSurveyResponse.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/staticSurveys/schema/outcomeSurveyResponse.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Types } from 'mongoose';\nexport declare class OutcomeSurveyResponse {\n    outcomeSurveyResponseId: string;\n    outcomeSurveyFormId: Types.ObjectId;\n    email: string;\n    firstName: string;\n    lastName: string;\n    genderId: Types.ObjectId;\n    ageGroupId: Types.ObjectId;\n    countryId: Types.ObjectId;\n    institutionTypeId: Types.ObjectId;\n    orgainsation: string;\n    knowledgeSharing: KnowledgeSharing[];\n    knowledgeApplication: string;\n    knowledgeApplicationExplaination: string;\n    isRelevantChange: boolean;\n    elaborateChange: string;\n    typeOfInstitutionInvolved: string;\n    locationOfChange: string;\n    isStoryOfChange: boolean;\n    comments: string;\n}\nexport declare const OutcomeSurveyResponseSchema: import(\"mongoose\").Schema<OutcomeSurveyResponse, import(\"mongoose\").Model<OutcomeSurveyResponse, any, any, any, any>, {}, {}, {}, {}, \"type\", OutcomeSurveyResponse>;\nexport interface KnowledgeSharing {\n    key: string;\n    value: boolean;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/staticSurveys/staticSurvey.controller.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/staticSurveys/staticSurvey.controller.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport RequestWithUser from '../users/user.service';\nimport { EntrySurveyResponseDTO } from './dto/entrySurveyResponse.dto';\nimport { SurveyFormDTO } from './dto/surveyForm.dto';\nimport { StaticSurveyService } from './staticSurvey.service';\nimport { ExitSurveyResponseDTO } from './dto/exitSurveyResponse.dto';\nimport { ActivateOrDeactivateSurveyLinkDTO } from './dto/activateOrDeactivateSurvey.dto';\nimport { OutcomeSurveyResponseDTO } from './dto/outcomeSurveyResponse.dto';\nexport declare class StaticSurveyController {\n    private readonly surveyService;\n    constructor(surveyService: StaticSurveyService);\n    getStaticDataTables(): Promise<{\n        genderList: (import(\"mongoose\").Document<unknown, any, import(\"../common/staticSchema/gender.schema\").Gender> & import(\"../common/staticSchema/gender.schema\").Gender & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        ageGroupList: (import(\"mongoose\").Document<unknown, any, import(\"../common/staticSchema/ageGroup.schema\").AgeGroup> & import(\"../common/staticSchema/ageGroup.schema\").AgeGroup & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        regionList: (import(\"mongoose\").Document<unknown, any, import(\"../common/staticSchema/region.schema\").Region> & import(\"../common/staticSchema/region.schema\").Region & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        scopeOfWorkList: (import(\"mongoose\").Document<unknown, any, import(\"../common/staticSchema/scopeOfWork.schema\").ScopeOfWork> & import(\"../common/staticSchema/scopeOfWork.schema\").ScopeOfWork & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        typeOfInstitutionList: (import(\"mongoose\").Document<unknown, any, import(\"../common/staticSchema/typeOfInstitution.schema\").TypeOfInstitution> & import(\"../common/staticSchema/typeOfInstitution.schema\").TypeOfInstitution & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        networkList: (import(\"../networks/schema/network.schema\").Network & import(\"mongoose\").Document<any, any, any> & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        countryList: (import(\"mongoose\").Document<unknown, any, import(\"../common/staticSchema/country.schema\").Country> & import(\"../common/staticSchema/country.schema\").Country & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        courseObjectivesList: (import(\"mongoose\").Document<unknown, any, import(\"../common/staticSchema/country.schema\").Country> & import(\"../common/staticSchema/country.schema\").Country & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        beneficialityList: (import(\"mongoose\").Document<unknown, any, import(\"../common/staticSchema/beneficiality.schema\").Beneficiality> & import(\"../common/staticSchema/beneficiality.schema\").Beneficiality & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        relevanceList: (import(\"mongoose\").Document<unknown, any, import(\"../common/staticSchema/relevance.schema\").Relevance> & import(\"../common/staticSchema/relevance.schema\").Relevance & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        expectationList: (import(\"mongoose\").Document<unknown, any, import(\"../common/staticSchema/expectation.schema\").Expectation> & import(\"../common/staticSchema/expectation.schema\").Expectation & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        knowledgeGainedList: (import(\"mongoose\").Document<unknown, any, import(\"../common/staticSchema/knowledgeGained.schema\").KnowledgeGained> & import(\"../common/staticSchema/knowledgeGained.schema\").KnowledgeGained & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        knowledgeSharingList: (import(\"mongoose\").Document<unknown, any, import(\"../common/staticSchema/knowledgeSharing.schema\").KnowledgeSharing> & import(\"../common/staticSchema/knowledgeSharing.schema\").KnowledgeSharing & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        knowledgeApplicationList: (import(\"mongoose\").Document<unknown, any, import(\"../common/staticSchema/knowledgeApplication.schema\").KnowledgeApplication> & import(\"../common/staticSchema/knowledgeApplication.schema\").KnowledgeApplication & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        degreeOfNewKnowledgeList: (import(\"mongoose\").Document<unknown, any, import(\"../common/staticSchema/degreeOfNewKnowledge.schema\").DegreeOfNewKnowledge> & import(\"../common/staticSchema/degreeOfNewKnowledge.schema\").DegreeOfNewKnowledge & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n    }>;\n    getEntrySurveysList(request: RequestWithUser, searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number, year: number): Promise<{\n        entrySurveys: any[];\n        entrySurveysCount: any;\n        totalPageCount: number;\n    }>;\n    getEntrySurveyForm(entrySurveyFormId: string): Promise<import(\"./schema/entrySurveyForm.schema\").EntrySurveyForm & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    addEntrySurveyForm(entrySurveyFormDto: SurveyFormDTO, request: RequestWithUser): Promise<string>;\n    entrySurveyResponse(entrySurveyResponseDto: EntrySurveyResponseDTO, entrySurveyFormId: string): Promise<import(\"mongoose\").Document<unknown, any, import(\"./schema/entrySurveyResponse.schema\").EntrySurveyResponse> & import(\"./schema/entrySurveyResponse.schema\").EntrySurveyResponse & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    getEntrySurveyResponsesList(pageLimit: number, pageIndex: number, proposalId: any): Promise<{\n        responseList: any[];\n        responseCount: number;\n        totalPageCount: number;\n    }>;\n    activateOrDeactivateEntrySurveyLink(entrySurvey: ActivateOrDeactivateSurveyLinkDTO, request: RequestWithUser): Promise<import(\"./schema/entrySurveyForm.schema\").EntrySurveyForm & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    downloadEntrySurveyResponses(entrySurveyFormId: string, res: any): Promise<void>;\n    downloadEntrySurveyResponsesByProposalId(proposalId: any, res: any): Promise<void>;\n    getExitSurveysList(request: RequestWithUser, searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number, year: number): Promise<{\n        exitSurveys: any[];\n        exitSurveysCount: any;\n        totalPageCount: number;\n    }>;\n    getExitSurveyForm(exitSurveyFormId: string): Promise<import(\"./schema/exitSurveyForm.schema\").ExitSurveyForm & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    addExitSurveyForm(exitSurveyFormDto: SurveyFormDTO, request: RequestWithUser): Promise<string>;\n    exitSurveyResponse(exitSurveyResponseDto: ExitSurveyResponseDTO, exitSurveyFormId: string): Promise<import(\"mongoose\").Document<unknown, any, import(\"./schema/exitSurveyResponse.schema\").ExitSurveyResponse> & import(\"./schema/exitSurveyResponse.schema\").ExitSurveyResponse & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    getExitSurveyResponsesList(pageLimit: number, pageIndex: number, proposalId: any): Promise<{\n        responseList: any[];\n        responseCount: number;\n        totalPageCount: number;\n    }>;\n    activateOrDeactivateExitSurveyLink(exitSurvey: ActivateOrDeactivateSurveyLinkDTO, request: RequestWithUser): Promise<import(\"./schema/exitSurveyForm.schema\").ExitSurveyForm & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    downloadExitSurveyResponses(exitSurveyFormId: string, res: any): Promise<void>;\n    downloadExitSurveyResponsesByProposalId(proposalId: any, res: any): Promise<void>;\n    getOutcomeSurveysList(request: RequestWithUser, searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number, year: number): Promise<{\n        outcomeSurveys: any[];\n        outcomeSurveysCount: any;\n        totalPageCount: number;\n    }>;\n    getOutcomeSurveyForm(outcomeSurveyFormId: string): Promise<import(\"./schema/outcomeSurveyForm.schema\").OutcomeSurveyForm & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    addOutcomeSurveyForm(outcomeSurveyFormDto: SurveyFormDTO, request: RequestWithUser): Promise<string>;\n    outcomeSurveyResponse(outcomeSurveyResponseDto: OutcomeSurveyResponseDTO, outcomeSurveyFormId: string): Promise<import(\"mongoose\").Document<unknown, any, import(\"./schema/outcomeSurveyResponse.schema\").OutcomeSurveyResponse> & import(\"./schema/outcomeSurveyResponse.schema\").OutcomeSurveyResponse & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    getOutcomeSurveyResponsesList(pageLimit: number, pageIndex: number, proposalId: any): Promise<{\n        responseList: any[];\n        responseCount: number;\n        totalPageCount: number;\n    }>;\n    activateOrDeactivateOutcomeSurveyLink(outcomeSurvey: ActivateOrDeactivateSurveyLinkDTO, request: RequestWithUser): Promise<import(\"./schema/outcomeSurveyForm.schema\").OutcomeSurveyForm & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    downloadOutcomeSurveyResponses(outcomeSurveyFormId: string, res: any): Promise<void>;\n    downloadOutcomeSurveyResponsesByProposalId(proposalId: any, res: any): Promise<void>;\n    getGenderCountForOutcomeSurvey(proposalId: any): Promise<{\n        manCount: number;\n        womanCount: number;\n        otherCount: number;\n        notSayCount: number;\n        sum: number;\n    }>;\n    getGenderCountForOutcomeSurveysRelevantInstitution(proposalId: any): Promise<{\n        manCount: number;\n        womanCount: number;\n        otherCount: number;\n        notSayCount: number;\n        sum: number;\n    }>;\n    getGenderCountForOutcomeSurveysRaisingAwareness(proposalId: any): Promise<{\n        manCount: number;\n        womanCount: number;\n        otherCount: number;\n        notSayCount: number;\n        sum: number;\n    }>;\n    getGenderCountForOutcomeSurveysRoutine(proposalId: any): Promise<{\n        manCount: number;\n        womanCount: number;\n        otherCount: number;\n        notSayCount: number;\n        sum: number;\n    }>;\n    getGenderCountForOutcomeSurveysEducational(proposalId: any): Promise<{\n        manCount: number;\n        womanCount: number;\n        otherCount: number;\n        notSayCount: number;\n        sum: number;\n    }>;\n    getGenderCountForOutcomeSurveysImplementations(proposalId: any): Promise<{\n        manCount: number;\n        womanCount: number;\n        otherCount: number;\n        notSayCount: number;\n        sum: number;\n    }>;\n    getGenderCountForOutcomeSurveysInnovation(proposalId: any): Promise<{\n        manCount: number;\n        womanCount: number;\n        otherCount: number;\n        notSayCount: number;\n        sum: number;\n    }>;\n    getGenderCountForOutcomeSurveysSDG(proposalId: any): Promise<{\n        manCount: number;\n        womanCount: number;\n        otherCount: number;\n        notSayCount: number;\n        sum: number;\n    }>;\n    getGenderCountForOutcomeSurveysPolicy(proposalId: any): Promise<{\n        manCount: number;\n        womanCount: number;\n        otherCount: number;\n        notSayCount: number;\n        sum: number;\n    }>;\n    getInstitutionTypeCountForOutcomeSurveysRelevantInstitution(proposalId: any): Promise<{\n        govtCount: number;\n        unCount: number;\n        ngoCount: number;\n        academiaCount: number;\n        riverCount: number;\n        utilityCount: number;\n        privateCount: number;\n        independentCount: number;\n        sum: number;\n    }>;\n    getParticipantsEnrolledGenderWiseCount(proposalId: any, request: RequestWithUser): Promise<{\n        manCount: number;\n        womanCount: number;\n        otherCount: number;\n        notSayCount: number;\n        sum: number;\n    }>;\n    getParticipantsCompletedActivityGenderWiseCount(proposalId: any, request: RequestWithUser): Promise<{\n        manCount: number;\n        womanCount: number;\n        otherCount: number;\n        notSayCount: number;\n        sum: number;\n    }>;\n    getParticipantCountByAgeGroup(proposalId: any, request: RequestWithUser): Promise<{\n        under18Count: number;\n        under25Count: number;\n        under65Count: number;\n        over66Count: number;\n        sum: number;\n    }>;\n    getParticipantCountByRegion(proposalId: any, request: RequestWithUser): Promise<{\n        asiaRegionCount: number;\n        americaRegionCount: number;\n        africaRegionCount: number;\n        arabRegionCount: number;\n        europeRegionCount: number;\n        sum: number;\n    }>;\n    getParticipantCountByTypeOfInstitution(proposalId: any, request: RequestWithUser): Promise<{\n        govtCount: number;\n        unCount: number;\n        ngoCount: number;\n        academiaCount: number;\n        riverCount: number;\n        utilityCount: number;\n        privateCount: number;\n        independentCount: number;\n        sum: number;\n    }>;\n    getCapnetAffiliationCount(proposalId: any, request: RequestWithUser): Promise<{\n        capnetAffiliationCount: number;\n    }>;\n    getParticipantCountBeforeKnowledgeRating(proposalId: any, request: RequestWithUser): Promise<{\n        highCount: number;\n        lowCount: number;\n        mediumCount: number;\n        noneCount: number;\n        sum: number;\n    }>;\n    getParticipantCountAfterDegreeOfKnowledge(proposalId: any, request: RequestWithUser): Promise<{\n        veryhighCount: number;\n        highCount: number;\n        lowCount: number;\n        mediumCount: number;\n        noneCount: number;\n        sum: number;\n    }>;\n    getParticipantCountByBeneficiality(proposalId: any, request: RequestWithUser): Promise<{\n        beneficialCount: number;\n        notBeneficialCount: number;\n        somewhatBeneficialCount: number;\n        sum: number;\n    }>;\n    getParticipantCountByRelevance(proposalId: any, request: RequestWithUser): Promise<{\n        notRelevantCount: number;\n        relevantCount: number;\n        extremelyRelevant: number;\n        slightlyRelevant: number;\n        sum: number;\n    }>;\n    getParticipantCountByExpectationLevel(proposalId: any, request: RequestWithUser): Promise<{\n        notMetCount: number;\n        partialCount: number;\n        fullCount: number;\n        exceededCount: number;\n        sum: number;\n    }>;\n    getParticipantCountByKnowledgeApplication(proposalId: any, request: RequestWithUser): Promise<{\n        insideInstitutionCount: number;\n        outsideInstitutionCount: number;\n        routineCount: number;\n        educationalCount: number;\n        improvementsCount: number;\n        policyLevelCount: number;\n        lawCount: number;\n        notAppliedCount: number;\n        sum: number;\n    }>;\n    getParticipantCountByKnowledgeShared(proposalId: any, request: RequestWithUser): Promise<{\n        manCount: number;\n        womanCount: number;\n        otherCount: number;\n        notSayCount: number;\n        sum: number;\n    }>;\n    getParticipantGenderCountByKnowledgeApplied(proposalId: any, request: RequestWithUser): Promise<{\n        manCount: number;\n        womanCount: number;\n        otherCount: number;\n        notSayCount: number;\n        sum: number;\n    }>;\n    getParticipantCountKnowledgeAppliedByInstitution(proposalId: any, request: RequestWithUser): Promise<{\n        govtCount: number;\n        unCount: number;\n        ngoCount: number;\n        academiaCount: number;\n        riverCount: number;\n        utilityCount: number;\n        privateCount: number;\n        indCount: number;\n        sum: number;\n    }>;\n    getCountryCountForRelevantInstitutionChange(proposalId: any, request: RequestWithUser): Promise<{\n        countryTotal: number;\n    }>;\n    getParticipantProfileDemographicCountry(proposalId: any, request: RequestWithUser): Promise<{\n        countryTotal: number;\n    }>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/staticSurveys/staticSurvey.module.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/staticSurveys/staticSurvey.module.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class StaticSurveyModule {\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/staticSurveys/staticSurvey.service.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/staticSurveys/staticSurvey.service.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { ConfigService } from '@nestjs/config';\nimport { Model } from 'mongoose';\nimport { ActivitiesService } from '../activities/activities.service';\nimport { NetworkService } from '../networks/network.service';\nimport { PartnerService } from '../partners/partner.service';\nimport { EntrySurveyResponseDTO } from './dto/entrySurveyResponse.dto';\nimport { ExitSurveyResponseDTO } from './dto/exitSurveyResponse.dto';\nimport { SurveyFormDTO } from './dto/surveyForm.dto';\nimport { EntrySurveyForm } from './schema/entrySurveyForm.schema';\nimport { EntrySurveyResponse } from './schema/entrySurveyResponse.schema';\nimport { ExitSurveyForm } from './schema/exitSurveyForm.schema';\nimport { ExitSurveyResponse } from './schema/exitSurveyResponse.schema';\nimport { Workbook, Worksheet } from 'exceljs';\nimport { Gender } from '../common/staticSchema/gender.schema';\nimport { AgeGroup } from '../common/staticSchema/ageGroup.schema';\nimport { Region } from '../common/staticSchema/region.schema';\nimport { ScopeOfWork } from '../common/staticSchema/scopeOfWork.schema';\nimport { TypeOfInstitution } from '../common/staticSchema/typeOfInstitution.schema';\nimport { OutcomeSurveyForm } from './schema/outcomeSurveyForm.schema';\nimport { OutcomeSurveyResponse } from './schema/outcomeSurveyResponse.schema';\nimport { OutcomeSurveyResponseDTO } from './dto/outcomeSurveyResponse.dto';\nimport { Country } from '../common/staticSchema/country.schema';\nimport { ActivityLog } from '../common/schema/activityLog.schema';\nimport { CourseMainObjectives } from '../common/staticSchema/courseMainObjectives.schema';\nimport { Beneficiality } from '../common/staticSchema/beneficiality.schema';\nimport { Relevance } from '../common/staticSchema/relevance.schema';\nimport { Expectation } from '../common/staticSchema/expectation.schema';\nimport { KnowledgeGained } from '../common/staticSchema/knowledgeGained.schema';\nimport { KnowledgeSharing } from '../common/staticSchema/knowledgeSharing.schema';\nimport { KnowledgeApplication } from '../common/staticSchema/knowledgeApplication.schema';\nimport { DegreeOfNewKnowledge } from '../common/staticSchema/degreeOfNewKnowledge.schema';\nimport { MelpService } from '../melp/melp.service';\nexport declare class StaticSurveyService {\n    private entrySurveyFormModel;\n    private entrySurveyResponseModel;\n    private exitSurveyFormModel;\n    private exitSurveyResponseModel;\n    private outcomeSurveyFormModel;\n    private outcomeSurveyResponseModel;\n    private genderModel;\n    private ageGroupModel;\n    private regionModel;\n    private scopeOfWorkModel;\n    private typeOfInstitutionModel;\n    private countryModel;\n    private activityLogModel;\n    private courseMainObjectivesModel;\n    private beneficialityModel;\n    private relevanceModel;\n    private expectationModel;\n    private knowledgeGainedModel;\n    private knowledgeSharingModel;\n    private knowledgeApplicationModel;\n    private degreeOfNewKnowledgeModel;\n    private readonly configService;\n    private readonly networkService;\n    private readonly partnerService;\n    private readonly activityService;\n    private readonly melpService;\n    constructor(entrySurveyFormModel: Model<EntrySurveyForm>, entrySurveyResponseModel: Model<EntrySurveyResponse>, exitSurveyFormModel: Model<ExitSurveyForm>, exitSurveyResponseModel: Model<ExitSurveyResponse>, outcomeSurveyFormModel: Model<OutcomeSurveyForm>, outcomeSurveyResponseModel: Model<OutcomeSurveyResponse>, genderModel: Model<Gender>, ageGroupModel: Model<AgeGroup>, regionModel: Model<Region>, scopeOfWorkModel: Model<ScopeOfWork>, typeOfInstitutionModel: Model<TypeOfInstitution>, countryModel: Model<Country>, activityLogModel: Model<ActivityLog>, courseMainObjectivesModel: Model<CourseMainObjectives>, beneficialityModel: Model<Beneficiality>, relevanceModel: Model<Relevance>, expectationModel: Model<Expectation>, knowledgeGainedModel: Model<KnowledgeGained>, knowledgeSharingModel: Model<KnowledgeSharing>, knowledgeApplicationModel: Model<KnowledgeApplication>, degreeOfNewKnowledgeModel: Model<DegreeOfNewKnowledge>, configService: ConfigService, networkService: NetworkService, partnerService: PartnerService, activityService: ActivitiesService, melpService: MelpService);\n    getStaticDataTables(): Promise<{\n        genderList: (import(\"mongoose\").Document<unknown, any, Gender> & Gender & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        ageGroupList: (import(\"mongoose\").Document<unknown, any, AgeGroup> & AgeGroup & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        regionList: (import(\"mongoose\").Document<unknown, any, Region> & Region & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        scopeOfWorkList: (import(\"mongoose\").Document<unknown, any, ScopeOfWork> & ScopeOfWork & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        typeOfInstitutionList: (import(\"mongoose\").Document<unknown, any, TypeOfInstitution> & TypeOfInstitution & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        networkList: (import(\"../networks/schema/network.schema\").Network & import(\"mongoose\").Document<any, any, any> & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        countryList: (import(\"mongoose\").Document<unknown, any, Country> & Country & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        courseObjectivesList: (import(\"mongoose\").Document<unknown, any, Country> & Country & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        beneficialityList: (import(\"mongoose\").Document<unknown, any, Beneficiality> & Beneficiality & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        relevanceList: (import(\"mongoose\").Document<unknown, any, Relevance> & Relevance & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        expectationList: (import(\"mongoose\").Document<unknown, any, Expectation> & Expectation & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        knowledgeGainedList: (import(\"mongoose\").Document<unknown, any, KnowledgeGained> & KnowledgeGained & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        knowledgeSharingList: (import(\"mongoose\").Document<unknown, any, KnowledgeSharing> & KnowledgeSharing & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        knowledgeApplicationList: (import(\"mongoose\").Document<unknown, any, KnowledgeApplication> & KnowledgeApplication & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        degreeOfNewKnowledgeList: (import(\"mongoose\").Document<unknown, any, DegreeOfNewKnowledge> & DegreeOfNewKnowledge & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n    }>;\n    getAgeGroupById(id: any): Promise<string>;\n    getScopeOfWorkById(id: any): Promise<string>;\n    getGenderIdByValue(gender: string): Promise<import(\"mongoose\").Types.ObjectId>;\n    getInstitutionIdByValue(typeOfInstitution: string): Promise<import(\"mongoose\").Types.ObjectId>;\n    getAgeGroupIdByValue(ageGroup: string): Promise<import(\"mongoose\").Types.ObjectId>;\n    getRegionIdByValue(region: string): Promise<import(\"mongoose\").Types.ObjectId>;\n    commonFunctionForSearchSort(searchKeyword: string, sortKey: string, sortDirection: number): Promise<{\n        regex: RegExp;\n        sortQuery: {};\n    }>;\n    checkIfEntrySurveyFormExists(year: number, language: string, proposalId: any, networkId: any, partnerId: any): Promise<boolean>;\n    checkIfExitSurveyFormExists(year: number, language: string, proposalId: any, networkId: any, partnerId: any): Promise<boolean>;\n    checkIfOutcomeSurveyFormExists(year: number, language: string, proposalId: any, networkId: any, partnerId: any): Promise<boolean>;\n    getEntrySurveyFormData(entrySurveyFormId: any): Promise<EntrySurveyForm & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    getExitSurveyFormData(exitSurveyFormId: string): Promise<ExitSurveyForm & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    getOutcomeSurveyFormData(outcomeSurveyFormId: any): Promise<OutcomeSurveyForm & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    addEntrySurveyForm(entrySurveyFormDto: SurveyFormDTO, user: any): Promise<string>;\n    addExitSurveyForm(exitSurveyFormDto: SurveyFormDTO, user: any): Promise<string>;\n    addOutcomeSurveyForm(outcomeSurveyFormDto: SurveyFormDTO, user: any): Promise<string>;\n    entrySurveyResponse(entrySurveyResponseDto: EntrySurveyResponseDTO, entrySurveyFormId: string): Promise<import(\"mongoose\").Document<unknown, any, EntrySurveyResponse> & EntrySurveyResponse & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    exitSurveyResponse(exitSurveyResponseDto: ExitSurveyResponseDTO, exitSurveyFormId: string): Promise<import(\"mongoose\").Document<unknown, any, ExitSurveyResponse> & ExitSurveyResponse & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    outcomeSurveyResponse(outcomeSurveyResponseDto: OutcomeSurveyResponseDTO, outcomeSurveyFormId: string): Promise<import(\"mongoose\").Document<unknown, any, OutcomeSurveyResponse> & OutcomeSurveyResponse & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    getEntrySurveysList(user: any, year: number, searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number): Promise<{\n        entrySurveys: any[];\n        entrySurveysCount: any;\n        totalPageCount: number;\n    }>;\n    getExitSurveysList(user: any, year: number, searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number): Promise<{\n        exitSurveys: any[];\n        exitSurveysCount: any;\n        totalPageCount: number;\n    }>;\n    getOutcomeSurveysList(user: any, year: number, searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number): Promise<{\n        outcomeSurveys: any[];\n        outcomeSurveysCount: any;\n        totalPageCount: number;\n    }>;\n    getEntrySurveyResponsesList(pageLimit: number, pageIndex: number, proposalId: any): Promise<{\n        responseList: any[];\n        responseCount: number;\n        totalPageCount: number;\n    }>;\n    getExitSurveyResponsesList(pageLimit: number, pageIndex: number, proposalId: any): Promise<{\n        responseList: any[];\n        responseCount: number;\n        totalPageCount: number;\n    }>;\n    getOutcomeSurveyResponsesList(pageLimit: number, pageIndex: number, proposalId: any): Promise<{\n        responseList: any[];\n        responseCount: number;\n        totalPageCount: number;\n    }>;\n    activateOrDeactivateEntrySurveyLink(action: string, entrySurveyFormId: string, user: any): Promise<EntrySurveyForm & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    activateOrDeactivateExitSurveyLink(action: string, exitSurveyFormId: string, user: any): Promise<ExitSurveyForm & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    activateOrDeactivateOutcomeSurveyLink(action: string, outcomeSurveyFormId: string, user: any): Promise<OutcomeSurveyForm & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    workbookAndWorksheetCreation(formName: string, language: string): Promise<{\n        responseSheet: Worksheet;\n        workbook: Workbook;\n    }>;\n    getEntrySurveyResponseSheet(response: any, responseSheet: any, responseCount: any, entrySurveyForm: any): Promise<void>;\n    getExitSurveyResponseSheet(response: any, responseSheet: any, responseCount: any, exitSurveyForm: any): Promise<void>;\n    getOutcomeSurveyResponseSheet(response: any, responseSheet: any, responseCount: any, outcomeSurveyForm: any): Promise<void>;\n    addColumnAndRowForEntrySurvey(responseSheet: Worksheet): Promise<void>;\n    addColumnAndRowForExitSurvey(responseSheet: Worksheet): Promise<void>;\n    addColumnAndRowForOutcomeSurvey(responseSheet: Worksheet): Promise<void>;\n    downloadEntrySurveyResponses(res: any, entrySurveyFormId: string): Promise<void>;\n    downloadExitSurveyResponses(res: any, exitSurveyFormId: string): Promise<void>;\n    downloadOutcomeSurveyResponses(res: any, outcomeSurveyFormId: string): Promise<void>;\n    downloadEntrySurveyResponsesByProposalId(res: any, proposalId: any): Promise<void>;\n    downloadExitSurveyResponsesByProposalId(res: any, proposalId: any): Promise<void>;\n    downloadOutcomeSurveyResponsesByProposalId(res: any, proposalId: any): Promise<void>;\n    getNumberOfResponsesForAllSurveys(year: number, user: any): Promise<{\n        entrySurveyResponseCount: number;\n        exitSurveyResponseCount: number;\n        outcomeSurveyResponseCount: number;\n    }>;\n    getGenderIds(): Promise<{\n        manId: import(\"mongoose\").Types.ObjectId;\n        womanId: import(\"mongoose\").Types.ObjectId;\n        otherId: import(\"mongoose\").Types.ObjectId;\n        notSayId: import(\"mongoose\").Types.ObjectId;\n    }>;\n    getGenderCountForOutcomeSurvey(proposalId: any): Promise<{\n        manCount: number;\n        womanCount: number;\n        otherCount: number;\n        notSayCount: number;\n        sum: number;\n    }>;\n    getGenderCountForOutcomeSurveysRelevantInstitution(proposalId: any): Promise<{\n        manCount: number;\n        womanCount: number;\n        otherCount: number;\n        notSayCount: number;\n        sum: number;\n    }>;\n    getGenderCountForOutcomeSurveysRaisingAwareness(proposalId: any): Promise<{\n        manCount: number;\n        womanCount: number;\n        otherCount: number;\n        notSayCount: number;\n        sum: number;\n    }>;\n    getGenderCountForOutcomeSurveysRoutine(proposalId: any): Promise<{\n        manCount: number;\n        womanCount: number;\n        otherCount: number;\n        notSayCount: number;\n        sum: number;\n    }>;\n    getGenderCountForOutcomeSurveysEducational(proposalId: any): Promise<{\n        manCount: number;\n        womanCount: number;\n        otherCount: number;\n        notSayCount: number;\n        sum: number;\n    }>;\n    getGenderCountForOutcomeSurveysImplementations(proposalId: any): Promise<{\n        manCount: number;\n        womanCount: number;\n        otherCount: number;\n        notSayCount: number;\n        sum: number;\n    }>;\n    getGenderCountForOutcomeSurveysInnovation(proposalId: any): Promise<{\n        manCount: number;\n        womanCount: number;\n        otherCount: number;\n        notSayCount: number;\n        sum: number;\n    }>;\n    getGenderCountForOutcomeSurveysSDG(proposalId: any): Promise<{\n        manCount: number;\n        womanCount: number;\n        otherCount: number;\n        notSayCount: number;\n        sum: number;\n    }>;\n    getGenderCountForOutcomeSurveysPolicy(proposalId: any): Promise<{\n        manCount: number;\n        womanCount: number;\n        otherCount: number;\n        notSayCount: number;\n        sum: number;\n    }>;\n    getGenderCountForOutcomeSurveysNotApplied(proposalId: any): Promise<{\n        manCount: number;\n        womanCount: number;\n        otherCount: number;\n        notSayCount: number;\n        sum: number;\n    }>;\n    getTypeOfInstitutionIds(): Promise<{\n        govtId: import(\"mongoose\").Types.ObjectId;\n        unId: import(\"mongoose\").Types.ObjectId;\n        ngotId: import(\"mongoose\").Types.ObjectId;\n        academiatId: import(\"mongoose\").Types.ObjectId;\n        riverId: import(\"mongoose\").Types.ObjectId;\n        utilityId: import(\"mongoose\").Types.ObjectId;\n        privateId: import(\"mongoose\").Types.ObjectId;\n        independentId: import(\"mongoose\").Types.ObjectId;\n    }>;\n    getInstitutionTypeCountForOutcomeSurveysRelevantInstitution(proposalId: any): Promise<{\n        govtCount: number;\n        unCount: number;\n        ngoCount: number;\n        academiaCount: number;\n        riverCount: number;\n        utilityCount: number;\n        privateCount: number;\n        independentCount: number;\n        sum: number;\n    }>;\n    getParticipantsEnrolledGenderWiseCount(proposalId: any, user: any): Promise<{\n        manCount: number;\n        womanCount: number;\n        otherCount: number;\n        notSayCount: number;\n        sum: number;\n    }>;\n    getParticipantsCompletedActivityGenderWiseCount(proposalId: any, user: any): Promise<{\n        manCount: number;\n        womanCount: number;\n        otherCount: number;\n        notSayCount: number;\n        sum: number;\n    }>;\n    getParticipantCountByAgeGroup(proposalId: any, user: any): Promise<{\n        under18Count: number;\n        under25Count: number;\n        under65Count: number;\n        over66Count: number;\n        sum: number;\n    }>;\n    getParticipantCountByRegion(proposalId: any, user: any): Promise<{\n        asiaRegionCount: number;\n        americaRegionCount: number;\n        africaRegionCount: number;\n        arabRegionCount: number;\n        europeRegionCount: number;\n        sum: number;\n    }>;\n    getParticipantCountByTypeOfInstitution(proposalId: any, user: any): Promise<{\n        govtCount: number;\n        unCount: number;\n        ngoCount: number;\n        academiaCount: number;\n        riverCount: number;\n        utilityCount: number;\n        privateCount: number;\n        independentCount: number;\n        sum: number;\n    }>;\n    getCapnetAffiliationCount(proposalId: any, user: any): Promise<{\n        capnetAffiliationCount: number;\n    }>;\n    getParticipantCountBeforeKnowledgeRating(proposalId: any, user: any): Promise<{\n        highCount: number;\n        lowCount: number;\n        mediumCount: number;\n        noneCount: number;\n        sum: number;\n    }>;\n    getParticipantCountAfterDegreeOfKnowledge(proposalId: any, user: any): Promise<{\n        veryhighCount: number;\n        highCount: number;\n        lowCount: number;\n        mediumCount: number;\n        noneCount: number;\n        sum: number;\n    }>;\n    getParticipantCountByBeneficiality(proposalId: any, user: any): Promise<{\n        beneficialCount: number;\n        notBeneficialCount: number;\n        somewhatBeneficialCount: number;\n        sum: number;\n    }>;\n    getParticipantCountByRelevance(proposalId: any, user: any): Promise<{\n        notRelevantCount: number;\n        relevantCount: number;\n        extremelyRelevant: number;\n        slightlyRelevant: number;\n        sum: number;\n    }>;\n    getParticipantCountByExpectationLevel(proposalId: any, user: any): Promise<{\n        notMetCount: number;\n        partialCount: number;\n        fullCount: number;\n        exceededCount: number;\n        sum: number;\n    }>;\n    getKnowledgeApplicationParticipantCountPerInstitute(proposalId: any, user: any): Promise<{\n        insideInstitutionCount: number;\n        outsideInstitutionCount: number;\n        routineCount: number;\n        educationalCount: number;\n        improvementsCount: number;\n        policyLevelCount: number;\n        lawCount: number;\n        notAppliedCount: number;\n        sum: number;\n    }>;\n    getParticipantCountByKnowledgeShared(proposalId: any, user: any): Promise<{\n        manCount: number;\n        womanCount: number;\n        otherCount: number;\n        notSayCount: number;\n        sum: number;\n    }>;\n    getParticipantCountByKnowledgeApplied(proposalId: any, user: any): Promise<{\n        manCount: number;\n        womanCount: number;\n        otherCount: number;\n        notSayCount: number;\n        sum: number;\n    }>;\n    getParticipantCountKnowledgeAppliedByInstitution(proposalId: any, user: any): Promise<{\n        govtCount: number;\n        unCount: number;\n        ngoCount: number;\n        academiaCount: number;\n        riverCount: number;\n        utilityCount: number;\n        privateCount: number;\n        indCount: number;\n        sum: number;\n    }>;\n    getCountryCountForRelevantInstitutionChange(proposalId: string, user: any): Promise<{\n        countryTotal: number;\n    }>;\n    getParticipantProfileDemographicCountry(proposalId: string, user: any): Promise<{\n        countryTotal: number;\n    }>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/surveyjs/dto/add-form-value.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/surveyjs/dto/add-form-value.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Types } from 'mongoose';\nexport declare class AddFormValueDto {\n    formResponseJson: any;\n    surveyjsFormId: Types.ObjectId;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/surveyjs/dto/add-surveyForm.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/surveyjs/dto/add-surveyForm.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class AddSurveyFormDto {\n    formFieldsJson: any;\n    surveyjsFormName: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/surveyjs/dto/edit-surveyForm.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/surveyjs/dto/edit-surveyForm.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AddSurveyFormDto } from './add-surveyForm.dto';\ndeclare const EditSurveyFormDto_base: import(\"@nestjs/common\").Type<Partial<AddSurveyFormDto>>;\nexport declare class EditSurveyFormDto extends EditSurveyFormDto_base {\n}\nexport {};\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/surveyjs/schema/surveyjsForm.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/surveyjs/schema/surveyjsForm.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nexport declare type SurveyjsFormDocument = SurveyjsForm & Document;\nexport declare class SurveyjsForm {\n    surveyjsFormId: string;\n    surveyjsFormName: string;\n    formFieldsJson: any;\n    instituteName: string;\n    link: string;\n    isDeleted: boolean;\n    isActive: boolean;\n    isDirty: boolean;\n    closedAt: Date;\n    createdAt?: Date;\n    updatedAt?: Date;\n}\nexport declare const SurveyjsFormSchema: import(\"mongoose\").Schema<SurveyjsForm, import(\"mongoose\").Model<SurveyjsForm, any, any, any, any>, {}, {}, {}, {}, \"type\", SurveyjsForm>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/surveyjs/schema/surveyjsResponse.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/surveyjs/schema/surveyjsResponse.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Types } from 'mongoose';\nexport declare class SurveyjsResponse {\n    formResponseId: string;\n    formResponseJson: any;\n    surveyjsFormId: Types.ObjectId;\n    createdAt?: Date;\n    updatedAt?: Date;\n}\nexport declare const SurveyjsResponseSchema: import(\"mongoose\").Schema<SurveyjsResponse, import(\"mongoose\").Model<SurveyjsResponse, any, any, any, any>, {}, {}, {}, {}, \"type\", SurveyjsResponse>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/surveyjs/surveyjs.controller.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/surveyjs/surveyjs.controller.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport RequestWithUser from '../users/user.service';\nimport { AddFormValueDto } from './dto/add-form-value.dto';\nimport { AddSurveyFormDto } from './dto/add-surveyForm.dto';\nimport { EditSurveyFormDto } from './dto/edit-surveyForm.dto';\nimport { SurveyjsService } from './surveyjs.service';\nexport declare class SurveyjsController {\n    private readonly surveyjsService;\n    constructor(surveyjsService: SurveyjsService);\n    createFormStructure(addSurveyFormDto: AddSurveyFormDto, request: RequestWithUser): Promise<any>;\n    getAllFormStructures(pageSize: number, pageIndex: number, searchKeyword: string): Promise<any>;\n    publishFormStructures(formId: string, isPublished: boolean): Promise<import(\"mongoose\").Document<unknown, any, import(\"./schema/surveyjsForm.schema\").SurveyjsForm> & import(\"./schema/surveyjsForm.schema\").SurveyjsForm & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    getAllPublishedFormStructures(): Promise<any>;\n    validatePublishedForm(formId: string): Promise<any>;\n    editSurveyJsForm(editSurveyFormDto: EditSurveyFormDto, request: RequestWithUser, formId: string): Promise<any>;\n    addFormResponse(addFormValueDto: AddFormValueDto): Promise<any>;\n    getFormResponse(): Promise<any>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/surveyjs/surveyjs.module.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/surveyjs/surveyjs.module.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class SurveyjsModule {\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/surveyjs/surveyjs.service.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/surveyjs/surveyjs.service.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Model } from 'mongoose';\nimport { AddSurveyFormDto } from './dto/add-surveyForm.dto';\nimport { SurveyjsForm } from './schema/surveyjsForm.schema';\nimport { PartnerService } from 'src/partners/partner.service';\nimport { NetworkService } from 'src/networks/network.service';\nimport { ConfigService } from '@nestjs/config';\nimport { MelpService } from '../melp/melp.service';\nimport { EditSurveyFormDto } from './dto/edit-surveyForm.dto';\nimport { SurveyjsResponse } from './schema/surveyjsResponse.schema';\nexport declare class SurveyjsService {\n    private surveyjsFormModel;\n    private surveyjsResponseModel;\n    private readonly networkService;\n    private readonly partnerService;\n    private readonly configService;\n    private readonly melpService;\n    constructor(surveyjsFormModel: Model<SurveyjsForm>, surveyjsResponseModel: Model<SurveyjsResponse>, networkService: NetworkService, partnerService: PartnerService, configService: ConfigService, melpService: MelpService);\n    createFormStructure(addSurveyFormDto: AddSurveyFormDto, user: any): Promise<{\n        createdFormStructure: import(\"mongoose\").Document<unknown, any, SurveyjsForm> & SurveyjsForm & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        };\n        url: string;\n    }>;\n    getAllFormStructures(pageSize: number, pageIndex: number, searchKeyword: string): Promise<{\n        formList: (import(\"mongoose\").Document<unknown, any, SurveyjsForm> & SurveyjsForm & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        total: number;\n    }>;\n    getAllPublishedFormStructures(): Promise<(import(\"mongoose\").Document<unknown, any, SurveyjsForm> & SurveyjsForm & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    })[]>;\n    publishFormStructures(formId: string, isPublished: boolean): Promise<import(\"mongoose\").Document<unknown, any, SurveyjsForm> & SurveyjsForm & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    validatePublishedForm(formId: string): Promise<import(\"mongoose\").Document<unknown, any, SurveyjsForm> & SurveyjsForm & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    editSurveyFormDto(formId: string, editSurveyFormDto: EditSurveyFormDto, user: any): Promise<import(\"mongoose\").Document<unknown, any, SurveyjsForm> & SurveyjsForm & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    addFormResponse(addFormValueDto: any): Promise<import(\"mongoose\").Document<unknown, any, SurveyjsResponse> & SurveyjsResponse & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    getFormResponse(): Promise<(import(\"mongoose\").Document<unknown, any, SurveyjsResponse> & SurveyjsResponse & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    })[]>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/users/dto/approve-user.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/users/dto/approve-user.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class ApproveUserDto {\n    newPwdToken: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/users/dto/create-capnetUser.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/users/dto/create-capnetUser.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class CapnetUserDTO {\n    email: string;\n    fullName: string;\n    position: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/users/dto/create-networkUser.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/users/dto/create-networkUser.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Types } from 'mongoose';\nimport { CapnetUserDTO } from './create-capnetUser.dto';\nexport declare class NetworkUserDTO extends CapnetUserDTO {\n    networkId: Types.ObjectId;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/users/dto/create-partnerUser.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/users/dto/create-partnerUser.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Types } from 'mongoose';\nimport { CapnetUserDTO } from './create-capnetUser.dto';\nexport declare class PartnerUserDTO extends CapnetUserDTO {\n    partnerId: Types.ObjectId;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/users/dto/update-user.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/users/dto/update-user.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class UpdateUserDto {\n    email: string;\n    fullName: string;\n    position: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/users/enum/role.enum.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/users/enum/role.enum.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare enum Role {\n    ADMIN = \"Admin\",\n    CAPNET = \"Capnet\",\n    NETWORK = \"Network\",\n    PARTNER = \"Partner\",\n    GUEST = \"Guest\"\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/users/guards/roles.guard.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/users/guards/roles.guard.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { UserService } from '../user.service';\nexport declare class RolesGuard implements CanActivate {\n    private reflector;\n    private readonly userService;\n    constructor(reflector: Reflector, userService: UserService);\n    canActivate(context: ExecutionContext): Promise<boolean>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/users/schema/base.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/users/schema/base.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indizes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Document } from 'mongoose';\nexport declare class Base extends Document {\n    createdBy: string;\n    updatedBy: string;\n}\nexport declare const BaseSchema: import(\"mongoose\").Schema<Base, import(\"mongoose\").Model<Base, any, any, any, any>, {}, {}, any, {}, \"type\", Base>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/users/schema/roles.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/users/schema/roles.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Document } from 'mongoose';\nimport { Role } from '../enum/role.enum';\nexport declare class Roles extends Document {\n    roleName: Role;\n}\nexport declare const RolesSchema: import(\"mongoose\").Schema<Roles, import(\"mongoose\").Model<Roles, any, any, any, any>, {}, {}, {}, {}, \"type\", Roles>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/users/schema/status.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/users/schema/status.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Document } from 'mongoose';\nexport declare class Status extends Document {\n    statusName: string;\n}\nexport declare const StatusSchema: import(\"mongoose\").Schema<Status, import(\"mongoose\").Model<Status, any, any, any, any>, {}, {}, {}, {}, \"type\", Status>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/users/schema/user.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/users/schema/user.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Types } from 'mongoose';\nimport { Base } from '../../common/schema/base.schema';\nexport declare class User extends Base {\n    userId: string;\n    fullName: string;\n    email: string;\n    position: string;\n    password: string;\n    statusId: Types.ObjectId;\n    isActive: boolean;\n    roleId: Types.ObjectId;\n    roleName?: string;\n    partnerId: Types.ObjectId;\n    networkId: Types.ObjectId;\n    instituteAbbreviation: string;\n    newPwdToken: string;\n    forgetPwdToken: string;\n    createdAt?: Date;\n    updatedAt?: Date;\n}\nexport declare const UserSchema: import(\"mongoose\").Schema<User, import(\"mongoose\").Model<User, any, any, any, any>, {}, {}, {}, {}, \"type\", User>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/users/user.controller.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/users/user.controller.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { UserService } from './user.service';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { MailService } from '../mail/mail.service';\nimport { Role } from './enum/role.enum';\nexport declare class UserController {\n    private userService;\n    private readonly mailService;\n    constructor(userService: UserService, mailService: MailService);\n    getActiveSecretariatUsers(): Promise<(import(\"./schema/user.schema\").User & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    })[]>;\n    viewAllRequests(searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number): Promise<{\n        usersList: any[];\n        total: number;\n    }>;\n    viewApprovedUsers(searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number): Promise<{\n        users: any[];\n        total: number;\n    }>;\n    viewUserRequest(userId: string): Promise<{\n        user: {\n            fullName: string;\n            email: string;\n            position: string;\n            role: Role;\n            userType: string;\n        };\n    }>;\n    updateNameAndPosition(userDto: UpdateUserDto): Promise<import(\"./schema/user.schema\").User & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    approveUserRequest(user: any): Promise<import(\"./schema/user.schema\").User & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    denyUserRequest(user: any): Promise<import(\"./schema/user.schema\").User & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    deactivateUser(user: any): Promise<(import(\"./schema/user.schema\").User & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }) | {\n        message: string;\n    }>;\n    reactivateUser(user: any): Promise<import(\"./schema/user.schema\").User & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    allFocalPersons(request: any): Promise<(import(\"./schema/user.schema\").User & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    })[]>;\n    getUserProfile(request: any): Promise<{\n        name: string;\n        email: string;\n        instituteName: any;\n        position: string;\n    }>;\n    allFocalPersonsForCapnet(request: any): Promise<(import(\"./schema/user.schema\").User & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    })[]>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/users/user.module.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/users/user.module.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class UserModule {\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/users/user.service.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/users/user.service.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { OnModuleInit } from '@nestjs/common';\nimport { Model } from 'mongoose';\nimport { Configuration } from '../common/schema/configuration.schema';\nimport { CapnetUserDTO } from './dto/create-capnetUser.dto';\nimport { NetworkUserDTO } from './dto/create-networkUser.dto';\nimport { PartnerUserDTO } from './dto/create-partnerUser.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { Roles } from './schema/roles.schema';\nimport { Status } from '../common/schema/status.schema';\nimport { User } from './schema/user.schema';\nimport { NetworkService } from '../networks/network.service';\nimport { PartnerService } from '../partners/partner.service';\nimport { ApprovalHierarchy } from '../approvalHierarchy/schema/approvalHierarchy.schema';\nimport { Role } from './enum/role.enum';\nimport { CapnetEnum } from '../common/enum/capnet.enum';\nexport declare class UserService implements OnModuleInit {\n    private userModel;\n    private statusModel;\n    private rolesModel;\n    private configurationModel;\n    private readonly networkService;\n    private readonly partnerService;\n    private approvalHierarchyModel;\n    constructor(userModel: Model<User>, statusModel: Model<Status>, rolesModel: Model<Roles>, configurationModel: Model<Configuration>, networkService: NetworkService, partnerService: PartnerService, approvalHierarchyModel: Model<ApprovalHierarchy>);\n    onModuleInit(): Promise<User & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    getApprovedUsersId(userId: string): Promise<any>;\n    getStatusName(statusId: any): Promise<string>;\n    getStatusId(statusName: string): Promise<any>;\n    getRoleId(roleName: string): Promise<any>;\n    getRoleName(roleId: any): Promise<Role>;\n    getFullName(email: string): Promise<string>;\n    getUserType(networkId: any, partnerId: any): Promise<CapnetEnum.CAPNET | \"Network\" | \"Partner\">;\n    getActiveSecretariatUsers(): Promise<(User & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    })[]>;\n    markEmailAsConfirmed(user: User): Promise<User & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    updateUserPassword(email: string, hashedPassword: string): Promise<User & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    updatePassword(email: string, hashedPassword: string): Promise<User & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    commonFunctionForSearchSort(searchKeyword: string, sortKey: string, sortDirection: number): Promise<{\n        regex: RegExp;\n        sortQuery: {};\n    }>;\n    viewAllRequests(searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number): Promise<{\n        usersList: any[];\n        total: number;\n    }>;\n    viewApprovedUsers(searchKeyword: string, pageLimit: number, pageIndex: number, sortKey: string, sortDirection: number): Promise<{\n        users: any[];\n        total: number;\n    }>;\n    checkIfExistingUser(email: string): Promise<boolean>;\n    findUserByEmail(email: string): Promise<User & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    viewUserRequest(userId: string): Promise<{\n        user: {\n            fullName: string;\n            email: string;\n            position: string;\n            role: Role;\n            userType: string;\n        };\n    }>;\n    registerCapnetSecretariatUser(capnetUser: CapnetUserDTO): Promise<User>;\n    registerCapnetGuestUser(guestUser: CapnetUserDTO): Promise<User>;\n    registerCapnetPartnerUser(partnerUser: PartnerUserDTO): Promise<User & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    registerCapnetNetworkUser(networkUser: NetworkUserDTO): Promise<User & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    updateNameAndPosition(userDto: UpdateUserDto): Promise<User & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    updatePwdToken(mail: string, token: string): Promise<User & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    updateForgetPwdToken(mail: string, token: string): Promise<User & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    getNetworkUsersCount(user: User, approvedStatusId: any): Promise<{\n        networkUsersCount: number;\n        maxNetworkUsersLimit: Configuration & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        };\n    }>;\n    getPartnerUsersCount(user: User, approvedStatusId: any): Promise<{\n        partnerUsersCount: number;\n        maxPartnerUsersLimit: Configuration & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        };\n    }>;\n    approveUserRequest(email: any): Promise<User & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    denyUserRequest(email: string): Promise<User & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    deactivateUser(email: string): Promise<(User & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }) | {\n        message: string;\n    }>;\n    reactivateUser(email: string): Promise<User & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    getById(id: string): Promise<User & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    getUser(id: any): Promise<User & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    getListOfUsersByInstituteId(roleId: any): Promise<void>;\n    getListOfFocalPersons(user: User): Promise<(User & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    })[]>;\n    getListOfFocalPersonsForCapnet(user: User): Promise<(User & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    })[]>;\n    getUserProfile(user: any): Promise<{\n        name: string;\n        email: string;\n        instituteName: any;\n        position: string;\n    }>;\n}\ninterface RequestWithUser extends Request {\n    user: User;\n}\nexport default RequestWithUser;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/utils/error-messages.utils.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/utils/error-messages.utils.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare const errorMessages: {\n    USER_NOT_FOUND: string;\n    USER_EMAIL_ALREADY_EXISTS: string;\n    USER_PER_NETWORK_LIMIT_EXCEEDED: string;\n    USER_PER_PARTNER_LIMIT_EXCEEDED: string;\n    NETWORK_NOT_FOUND: string;\n    NETWORKLIST_NOT_FOUND: string;\n    PARTNER_NOT_FOUND: string;\n    PARTNER_ABBREVIATION_ALREADY_EXISTS: string;\n    USER_DEACTIVATED: string;\n    STATUS_NOT_FOUND: string;\n    ROLE_NOT_FOUND: string;\n    EMAIL_ALREADY_VERIFIED: string;\n    EMAIL_CONFIRMATION_TOKEN_EXPIRED: string;\n    INVALID_CREDENTIALS: string;\n    APPROVAL_TYPE_NOT_FOUND: string;\n    USER_ALREADY_APPROVED: string;\n    USER_ALREADY_DENIED: string;\n    WRONG_CREDENTIALS: string;\n    ACCOUNT_SUSPENDED: string;\n    MELP_NOT_FOUND: string;\n    RESULT_NOT_FOUND: string;\n    MELP_YEAR_EXISTS: string;\n    WORKPLAN_YEAR_EXISTS: string;\n    WORKPLAN_NOT_FOUND: string;\n    OUTCOME_CHALLENGE_NOT_FOUND: string;\n    INDICATOR_NOT_FOUND: string;\n    ACTIVITY_NOT_ADDED: string;\n    ACTIVITY_NOT_FOUND: string;\n    INDICATOR_MONITORING_NOT_FOUND: string;\n    INDICATOR_RISK_NOT_FOUND: string;\n    PROGRESS_MARKER_NOT_FOUND: string;\n    PASSWORD_DUPLICATE: string;\n    PASSWORD_FOR_DEACTIVATED_USER: string;\n    SURVEY_NOT_FOUND: string;\n    SURVEY_ALREADY_EXISTS: string;\n    SURVEY_ALREADY_FILLED: string;\n    SURVEY_DEACTIVATED: string;\n    FILL_MANDATORY_FIELDS: string;\n    IMPACT_STORY_NOT_FOUND: string;\n    UPLOAD_STORY_DRAFT: string;\n    IMPACT_STORY_CANNOT_BE_DELETED: string;\n    PROPOSAL_NOT_FOUND: string;\n    PROPOSAL_CANNOT_BE_DELETED: string;\n    ACTIVITY_PROPOSAL_ALREADY_CREATED: string;\n    OUTPUT_REPORT_EXISTS: string;\n    SELECT_WORKPLAN_ACTIVITY: string;\n    Report_NOT_FOUND: string;\n    PROGRESS_REPORT_NOT_FOUND: string;\n    ANNUAL_REPORT_NOT_FOUND: string;\n    NETWORK_ALREADY_EXISTS: string;\n    ANNUAL_REPORT_ALREADY_SUBMITTED: string;\n    OUTPUT_REPORT_NOT_FOUND: string;\n    OUTPUT_REPORT_NOT_APPROVED: string;\n    OUTCOME_REPORT_NOT_FOUND: string;\n    OUTCOME_REPORT_EXISTS: string;\n    OUTCOME_SURVEY_FORM_NOT_FOUND: string;\n    PROGRESS_REPORT_ALREADY_SUBMITTED: string;\n    INVOICE_NOT_FOUND: string;\n    FILE_SELECT: string;\n    APPROVERS_NOT_ASSIGNED: string;\n    CANNOT_DELETE_MELP: string;\n    DELETE_RESULTS_AND_OUTCOMES: string;\n    DELETE_INDICATORS: string;\n    CANNOT_DELETE_RESULT: string;\n    CANNOT_DELETE_INDICATOR: string;\n    APPROVAL_PENDING_ON_PREVIOUS_LEVEL: string;\n    NOT_ASSIGNED_AS_APPROVER: string;\n    UPLOAD_VALID_FILE_TYPE: string;\n    MAX_5MB_FILE: string;\n    MAX_50MB_FILE: string;\n    BAD_CONFIRMATION_TOKEN: string;\n    CANNOT_DEACTIVATE_USER: string;\n    SURVEY_JS_FOR_NOT_FOUND: string;\n    BLOB_NAME_ALREADY_EXISTS: string;\n    WORKPLAN_ACTIVITY_NOT_FOUND: string;\n    CANNOT_DELETE_WORKPLAN: string;\n    NO_ACTIVITY_ADDED_TO_WORKPLAN: string;\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/utils/excel-downloads.utils.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/utils/excel-downloads.utils.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare const async: any, downloadMelp: (res: any, melpId: string, workbook: exceljs.Workbook) => void;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/utils/file-upload.util.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/utils/file-upload.util.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare const mimetypes: string[];\nexport declare const docFileFilter: (req: any, file: any, callback: any) => void;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/workplans/dto/create-workplan.dto.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/workplans/dto/create-workplan.dto.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class CreateWorkplanDTO {\n    year: number;\n    workplanCode: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/workplans/schema/workplan.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/workplans/schema/workplan.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Base } from '../../common/schema/base.schema';\nimport { Types } from 'mongoose';\nexport declare class Workplan extends Base {\n    workplanId: string;\n    year: number;\n    workplanCode: string;\n    statusId: Types.ObjectId;\n    statusName?: string;\n    networkName?: string;\n    partnerName?: string;\n    networkId: Types.ObjectId;\n    partnerId: Types.ObjectId;\n    instituteName: string;\n    approvedCount: number;\n    isDeleted: boolean;\n    createdAt?: Date;\n    updatedAt?: Date;\n    submittedAt: Date;\n    approvedAt: Date;\n}\nexport declare const WorkplanSchema: import(\"mongoose\").Schema<Workplan, import(\"mongoose\").Model<Workplan, any, any, any, any>, {}, {}, {}, {}, \"type\", Workplan>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/workplans/schema/workplan_activities.schema.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/workplans/schema/workplan_activities.schema.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { Types } from 'mongoose';\nimport { Base } from '../../common/schema/base.schema';\nexport declare class WorkplanActivities extends Base {\n    workplanActivityId: string;\n    workplanId: Types.ObjectId;\n    activityId: Types.ObjectId;\n    isDeleted: boolean;\n}\nexport declare const WorkplanActivitiesSchema: import(\"mongoose\").Schema<WorkplanActivities, import(\"mongoose\").Model<WorkplanActivities, any, any, any, any>, {}, {}, {}, {}, \"type\", WorkplanActivities>;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/workplans/workplan.controller.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/workplans/workplan.controller.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"mongoose/types/aggregate\" />\n/// <reference types=\"mongoose/types/callback\" />\n/// <reference types=\"mongoose/types/collection\" />\n/// <reference types=\"mongoose/types/connection\" />\n/// <reference types=\"mongoose/types/cursor\" />\n/// <reference types=\"mongoose/types/document\" />\n/// <reference types=\"mongoose/types/error\" />\n/// <reference types=\"mongoose/types/expressions\" />\n/// <reference types=\"mongoose/types/helpers\" />\n/// <reference types=\"mongoose/types/middlewares\" />\n/// <reference types=\"mongoose/types/indexes\" />\n/// <reference types=\"mongoose/types/models\" />\n/// <reference types=\"mongoose/types/mongooseoptions\" />\n/// <reference types=\"mongoose/types/pipelinestage\" />\n/// <reference types=\"mongoose/types/populate\" />\n/// <reference types=\"mongoose/types/query\" />\n/// <reference types=\"mongoose/types/schemaoptions\" />\n/// <reference types=\"mongoose/types/schematypes\" />\n/// <reference types=\"mongoose/types/session\" />\n/// <reference types=\"mongoose/types/types\" />\n/// <reference types=\"mongoose/types/utility\" />\n/// <reference types=\"mongoose/types/validation\" />\n/// <reference types=\"mongoose/types/virtuals\" />\n/// <reference types=\"mongoose\" />\n/// <reference types=\"mongoose/types/inferschematype\" />\nimport { CreateActivityDTO } from '../activities/dto/create-activity.dto';\nimport { EditActivityDTO } from '../activities/dto/edit-activity.dto';\nimport { CreateWorkplanDTO } from './dto/create-workplan.dto';\nimport { WorkplanService } from './workplan.service';\nimport { Response } from 'express';\nexport declare class WorkplanController {\n    private readonly workplanService;\n    constructor(workplanService: WorkplanService);\n    createWorkplan(createWorkplanDto: CreateWorkplanDTO, req: any): Promise<import(\"./schema/workplan.schema\").Workplan & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    addActivitiesToWorkplan(req: any, workplanId: string, createActivityDTO: CreateActivityDTO): Promise<{\n        workplanId: string;\n        activityDetails: import(\"../activities/schema/activities.schema\").Activities & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        };\n    }>;\n    getWorkplanById(workplanId: string): Promise<import(\"./schema/workplan.schema\").Workplan & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    allWorkplans(pageSize: number, pageIndex: number, searchKeyword: string, sortType: string, sortDirection: number, year: number): Promise<{\n        workPlanList: (import(\"./schema/workplan.schema\").Workplan & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        total: number;\n    }>;\n    publishWorkplan(workplanId: string): Promise<import(\"./schema/workplan.schema\").Workplan & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    unpublishWorkplan(workplanId: string): Promise<import(\"./schema/workplan.schema\").Workplan & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    deleteWorkplan(workplanId: string, request: any): Promise<import(\"./schema/workplan.schema\").Workplan & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    getPublishedWorkplan(year: number): Promise<{\n        year: number;\n        workplanCode: string;\n        workplanId: string;\n        status: string;\n    }>;\n    getApprovedWorkplan(year: number): Promise<{\n        year: number;\n        workplanCode: string;\n        workplanId: string;\n        statusId: any;\n        status: string;\n    }>;\n    allWorkplansGeneralUser(pageSize: number, pageIndex: number, searchKeyword: string, sortType: string, sortDirection: number, year: number, req: any): Promise<{\n        workPlanList: any[];\n        total: number;\n    }>;\n    updateWorkplan(workplanId: string, editActivityDTO: EditActivityDTO, activityId: string, request: any): Promise<import(\"../activities/schema/activities.schema\").Activities & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    downloadIndividualWorkplan(workplanId: string, res: Response): Promise<void>;\n    downloadMultipleWorkplan(year: number, res: any, req: any): Promise<void>;\n    allActivitiesOfWorkplan(workplanId: string, pageSize: number, pageIndex: number): Promise<{\n        activitiesArray: any[];\n        total: number;\n    }>;\n    manageNetworkWorkplans(pageSize: number, pageIndex: number, searchKeyword: string, sortType: string, sortDirection: number, year: number): Promise<any>;\n    managePartnerWorkplans(pageSize: number, pageIndex: number, searchKeyword: string, sortType: string, sortDirection: number, year: number): Promise<any>;\n    getWorkplanActivitiesListByYear(year: number, request: any): Promise<any[]>;\n    workplanActivitiesDetails(activityId: string): Promise<{\n        activtyData: {};\n        indicatorData: any[];\n    }>;\n    downloadGeneralUserMultipleWorkplan(year: number, isNetwork: boolean, res: any): Promise<void>;\n    checkIfWorkplanExistForYear(year: number, req: any): Promise<import(\"./schema/workplan.schema\").Workplan & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    getWorkplanActivityCount(workplanId: any): Promise<{\n        workplanActivitiesCount: number;\n    }>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/workplans/workplan.module.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/workplans/workplan.module.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare class WorkplanModule {\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/dist/workplans/workplan.service.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: dist/workplans/workplan.service.d.ts.\nThe file must be included in at least one of the projects provided."}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Workplan } from './schema/workplan.schema';\nimport { Model } from 'mongoose';\nimport { CreateWorkplanDTO } from './dto/create-workplan.dto';\nimport { UserService } from '../users/user.service';\nimport { User } from '../users/schema/user.schema';\nimport { CreateActivityDTO } from '../activities/dto/create-activity.dto';\nimport { ActivitiesService } from '../activities/activities.service';\nimport { WorkplanActivities } from './schema/workplan_activities.schema';\nimport { EditActivityDTO } from 'src/activities/dto/edit-activity.dto';\nimport { Worksheet } from 'exceljs';\nimport { MelpService } from '../melp/melp.service';\nimport { NetworkService } from '../networks/network.service';\nimport { PartnerService } from '../partners/partner.service';\nimport { Response } from 'express';\nexport declare class WorkplanService {\n    private workplanModel;\n    private workplanActivitiesModel;\n    private readonly melpService;\n    private readonly userService;\n    private readonly activitiesService;\n    private readonly networkService;\n    private readonly partnerService;\n    constructor(workplanModel: Model<Workplan>, workplanActivitiesModel: Model<WorkplanActivities>, melpService: MelpService, userService: UserService, activitiesService: ActivitiesService, networkService: NetworkService, partnerService: PartnerService);\n    createWorkplan(createWorkplanDto: CreateWorkplanDTO, user: User): Promise<Workplan & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    addActivitiesToWorkplan(user: User, workplanId: string, createActivityDto: CreateActivityDTO): Promise<{\n        workplanId: string;\n        activityDetails: import(\"../activities/schema/activities.schema\").Activities & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        };\n    }>;\n    getWorkplanById(workplanId: string): Promise<Workplan & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    commonFunctionForSearchSort(searchKeyword: string, sortKey: string, sortDirection: number): Promise<{\n        regex: RegExp;\n        sortQuery: {};\n    }>;\n    getAllWorkplans(pageSize: number, pageIndex: number, searchKeyword: string, sortKey: string, sortDirection: number, year: number): Promise<{\n        workPlanList: (Workplan & {\n            _id: import(\"mongoose\").Types.ObjectId;\n        })[];\n        total: number;\n    }>;\n    publishWorkplan(id: string): Promise<Workplan & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    unpublishWorkplan(id: string): Promise<Workplan & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    deleteWorkplan(id: string, user: any): Promise<Workplan & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    updateApprovedCount(count: number, workplanId: string): Promise<Workplan & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    setSubmittedAtTime(workplanId: string, submittedAt: Date): Promise<Workplan & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    setApprovedAtTime(workplanId: string, approvedAt: Date): Promise<Workplan & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    getActivitiesAddedInWorkplan(id: string, pageSize: any, pageIndex: any): Promise<{\n        activitiesArray: any[];\n        total: number;\n    }>;\n    getAllActivitiesOfWorkplan(id: string): Promise<any[]>;\n    getPublishedWorkplan(year: number): Promise<{\n        year: number;\n        workplanCode: string;\n        workplanId: string;\n        status: string;\n    }>;\n    getApprovedWorkplan(year: number): Promise<{\n        year: number;\n        workplanCode: string;\n        workplanId: string;\n        statusId: any;\n        status: string;\n    }>;\n    allWorkplansGeneralUser(pageSize: number, pageIndex: number, searchKeyword: string, sortKey: string, sortDirection: number, year: number, user: any): Promise<{\n        workPlanList: any[];\n        total: number;\n    }>;\n    updateGeneralUserWorkplanStatus(workplanId: any, statusId: any): Promise<Workplan & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    updateWorkplan(workplanId: string, activityId: string, editActivityDTO: EditActivityDTO, user: any): Promise<import(\"../activities/schema/activities.schema\").Activities & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    addColumnAndRowToWorksheet(workplanSheet: Worksheet): Promise<void>;\n    downloadWorkplan(res: any, workplan: any, workplanSheet: any, workplanCount: any): Promise<void>;\n    downloadIndividualWorkplan(res: Response, workplanId: string): Promise<void>;\n    downloadMultipleWorkplan(res: any, year: number, user: any): Promise<void>;\n    getAllNetworkWorkplans(pageSize: number, pageIndex: number, searchKeyword: string, sortKey: string, sortDirection: number, year: number): Promise<any>;\n    getAllPartnerWorkplans(pageSize: number, pageIndex: number, searchKeyword: string, sortKey: string, sortDirection: number, year: number): Promise<any>;\n    workplanActivitiesListByYear(year: number, user: any): Promise<any[]>;\n    workplanActivitiesDetails(activityId: string): Promise<{\n        activtyData: {};\n        indicatorData: any[];\n    }>;\n    downloadGeneralUserMultipleWorkplan(res: any, year: number, isNetwork: boolean): Promise<void>;\n    checkIfWorkplanExistForYear(year: number, user: any): Promise<Workplan & {\n        _id: import(\"mongoose\").Types.ObjectId;\n    }>;\n    getWorkplanActivitiesCount(workplanId: any): Promise<{\n        workplanActivitiesCount: number;\n    }>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/activities/activities.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/activities/activities.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/activities/activities.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/activities/dto/addAdditionalInfo.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/activities/dto/addFinancialDetails.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/activities/dto/baseActivity.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/activities/dto/coordinationCost.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/activities/dto/create-activity.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/activities/dto/create-activityProposal.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/activities/dto/edit-activity.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/activities/dto/editProposal.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/activities/dto/financial.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/activities/dto/locationCost.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/activities/dto/otherCost.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/activities/dto/travelCost.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/activities/schema/activities.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/activities/schema/activityProposals.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/activities/schema/baseActivity.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/activities/schema/coordinationCost.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/activities/schema/financial.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/activities/schema/locationCost.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/activities/schema/otherCost.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/activities/schema/travelCost.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/app.controller.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/app.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/app.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/app.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/approvalHierarchy/approvalHierarchy.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/approvalHierarchy/approvalHierarchy.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/approvalHierarchy/approvalHierarchy.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/approvalHierarchy/dto/createHierarchy.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/approvalHierarchy/dto/denyRequest.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/approvalHierarchy/dto/sendForApproval.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/approvalHierarchy/enum/approvalTypes.enum.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/approvalHierarchy/schema/approvalDetails.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/approvalHierarchy/schema/approvalHierarchy.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/approvalHierarchy/schema/approvalRequests.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/approvalHierarchy/schema/approvalTypes.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/auth/auth.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/auth/auth.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/auth/auth.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/auth/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/auth/dto/logIn.dto.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Matches' is defined but never used.","line":7,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":10}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ApiProperty } from '@nestjs/swagger';\nimport { Transform } from 'class-transformer';\nimport {\n  IsString,\n  IsNotEmpty,\n  MinLength,\n  Matches,\n  IsEmail,\n} from 'class-validator';\n\nexport class LogInDto {\n  @Transform(({ value }) => value.trim())\n  @IsEmail()\n  @IsNotEmpty()\n  @ApiProperty()\n  email: string;\n\n  @Transform(({ value }) => value.trim())\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8, { message: ' The min length of password is 8 ' })\n  // @Matches(/^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=])(?=\\S+$).{8,}$/, {\n  //   message:\n  //     'A password at least contains one numeric digit, one uppercase char and one lowercase char',\n  // })\n  @ApiProperty()\n  password: string;\n}\n\nexport default LogInDto;\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/auth/dto/setPassword.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/auth/guards/jwt-auth.guard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/auth/guards/localAuthentication.guard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/auth/jwt.strategy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/auth/local.strategy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/common/decorators/roles.decorator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/common/enum/capnet.enum.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/common/enum/implementationStatus.enum.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/common/enum/status.enum.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/common/enum/typeOfActivity.enum.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/common/schema/activityLog.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/common/schema/base.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/common/schema/configuration.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/common/schema/status.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/common/staticSchema/activityCategories.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/common/staticSchema/activityScope.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/common/staticSchema/activityStatus.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/common/staticSchema/activityTargetGroup.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/common/staticSchema/activityThematicAreas.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/common/staticSchema/activityTimeframe.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/common/staticSchema/activityTypes.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/common/staticSchema/ageGroup.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/common/staticSchema/beneficiality.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/common/staticSchema/boundaryLevelOfChange.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/common/staticSchema/country.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/common/staticSchema/courseMainObjectives.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/common/staticSchema/degreeOfNewKnowledge.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/common/staticSchema/expectation.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/common/staticSchema/expertiseAreaOrThematicFocus.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/common/staticSchema/gender.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/common/staticSchema/knowledgeApplication.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/common/staticSchema/knowledgeGained.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/common/staticSchema/knowledgeSharing.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/common/staticSchema/modality.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/common/staticSchema/priority.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/common/staticSchema/progressMonitoring.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/common/staticSchema/region.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/common/staticSchema/relevance.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/common/staticSchema/scopeOfWork.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/common/staticSchema/thematicAreaOfChange.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/common/staticSchema/typeOfChangeObserved.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/common/staticSchema/typeOfInstitution.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/common/staticSchema/typeOfMemberShip.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/dashboard/dashboard.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/dashboard/dashboard.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/dashboard/dashboard.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/impactStory/dto/addStoryCreation.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/impactStory/dto/addStoryInfo.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/impactStory/dto/addStorySelection.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/impactStory/dto/addStorytellerInfo.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/impactStory/dto/editStoryInfo.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/impactStory/dto/editStorySelection.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/impactStory/dto/editStorytellerInfo.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/impactStory/dto/proposalIdList.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/impactStory/impactStory.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/impactStory/impactStory.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/impactStory/impactStory.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/impactStory/schema/impactStory.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/mail/dto/confirmEmail.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/mail/mail.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/mail/mail.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/main.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/melp/dto/addIndicator.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/melp/dto/addMelProgress.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/melp/dto/addMelProgressPM.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/melp/dto/addMelProgressSRF.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/melp/dto/addMelTaskDetail.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/melp/dto/addMonitoringRisk.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/melp/dto/addProgressMarker.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/melp/dto/addResult.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/melp/dto/createMelpOM.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/melp/dto/createMelpSRF.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/melp/dto/createNetworkMelpSRF.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/melp/dto/editIndicator.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/melp/dto/editNetworkMelpSRF.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/melp/dto/editOM.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/melp/dto/editResult.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/melp/enum/objectiveLevel.enum.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/melp/melp.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/melp/melp.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/melp/melp.service.ts","messages":[{"ruleId":"prefer-const","severity":2,"message":"'resultsCount' is never reassigned. Use 'const' instead.","line":3304,"column":13,"nodeType":"Identifier","messageId":"useConst","endLine":3304,"endColumn":25,"fix":{"range":[100718,100965],"text":"const { resultsCount, risksCount, outcomesCount } = await this.downloadMelp(\n        // res,\n        melp.melpId,\n        resultsSheet,\n        risksSheet,\n        outcomesSheet,\n        resultCount,\n        riskCount,\n        outcomeCount,\n      );"}},{"ruleId":"prefer-const","severity":2,"message":"'risksCount' is never reassigned. Use 'const' instead.","line":3304,"column":27,"nodeType":"Identifier","messageId":"useConst","endLine":3304,"endColumn":37,"fix":{"range":[100718,100965],"text":"const { resultsCount, risksCount, outcomesCount } = await this.downloadMelp(\n        // res,\n        melp.melpId,\n        resultsSheet,\n        risksSheet,\n        outcomesSheet,\n        resultCount,\n        riskCount,\n        outcomeCount,\n      );"}},{"ruleId":"prefer-const","severity":2,"message":"'outcomesCount' is never reassigned. Use 'const' instead.","line":3304,"column":39,"nodeType":"Identifier","messageId":"useConst","endLine":3304,"endColumn":52,"fix":{"range":[100718,100965],"text":"const { resultsCount, risksCount, outcomesCount } = await this.downloadMelp(\n        // res,\n        melp.melpId,\n        resultsSheet,\n        risksSheet,\n        outcomesSheet,\n        resultCount,\n        riskCount,\n        outcomeCount,\n      );"}}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"import {\n  BadRequestException,\n  ConflictException,\n  Injectable,\n  InternalServerErrorException,\n  Logger,\n  NotFoundException,\n  UnprocessableEntityException,\n} from '@nestjs/common';\nimport { v4 as uuidv4 } from 'uuid';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, Types } from 'mongoose';\nimport { AddIndicatorDTO } from './dto/addIndicator.dto';\nimport { CreateMelpSRFDTO } from './dto/createMelpSRF.dto';\nimport { Melp } from './schema/melp.schema';\nimport { MelpIndicatorMonitoring } from './schema/melpIndicatorMonitoring.schema';\nimport { MelpIndicatorRisks } from './schema/melpIndicatorRisks.schema';\nimport { MelpOutcomeProgressMarkers } from './schema/melpOutcomeProgressMarkers.schema';\nimport { MelpOutcomes } from './schema/melpOutcomes.schema';\nimport { MelpResultIndicators } from './schema/melpResultIndicators.schema';\nimport { MelpResults } from './schema/melpResults.schema';\nimport { AddResultDTO } from './dto/addResult.dto';\nimport { ObjectiveLevel } from './enum/objectiveLevel.enum';\nimport { CreateMelpOMDTO } from './dto/createMelpOM.dto';\nimport { UserService } from '../users/user.service';\nimport { Priority } from '../common/staticSchema/priority.schema';\nimport { ProgressMonitoring } from '../common/staticSchema/progressMonitoring.schema';\nimport { errorMessages } from '../utils/error-messages.utils';\nimport { NetworkService } from '../networks/network.service';\nimport { EditResultDTO } from './dto/editResult.dto';\nimport { EditOmDTO } from './dto/editOM.dto';\nimport { EditIndicatorDTO } from './dto/editIndicator.dto';\nimport { CreateNetworkMelpSRFDTO } from './dto/createNetworkMelpSRF.dto';\nimport { MelpTasks } from './schema/melpTasks.schema';\nimport { MelpTaskDetails } from './schema/melpTaskDetails.schema';\nimport { EditNetworkMelpSRFDTO } from './dto/editNetworkMelpSRF.dto';\nimport * as exceljs from 'exceljs';\nimport { PartnerService } from '../partners/partner.service';\nimport { ActivityLog } from '../common/schema/activityLog.schema';\nimport { AddMelProgressSRFDTO } from './dto/addMelProgressSRF.dto';\nimport { AddMelProgressPMDTO } from './dto/addMelProgressPM.dto';\nimport { StatusEnum } from '../common/enum/status.enum';\nimport { CapnetEnum } from '../common/enum/capnet.enum';\nimport { Activities } from '../activities/schema/activities.schema';\nimport { ActivityProposals } from '../activities/schema/activityProposals.schema';\n\n@Injectable()\nexport class MelpService {\n  constructor(\n    @InjectModel(Melp.name) private melpModel: Model<Melp>,\n\n    @InjectModel(MelpResults.name) private melpResultsModel: Model<MelpResults>,\n\n    @InjectModel(MelpResultIndicators.name)\n    private melpResultIndicatorsModel: Model<MelpResultIndicators>,\n\n    @InjectModel(MelpIndicatorMonitoring.name)\n    private melpIndicatorMonitoringModel: Model<MelpIndicatorMonitoring>,\n\n    @InjectModel(MelpIndicatorRisks.name)\n    private melpIndicatorRisksModel: Model<MelpIndicatorRisks>,\n\n    @InjectModel(MelpOutcomes.name)\n    private melpOutcomesModel: Model<MelpOutcomes>,\n\n    @InjectModel(MelpOutcomeProgressMarkers.name)\n    private melpOutcomeProgressMarkersModel: Model<MelpOutcomeProgressMarkers>,\n\n    @InjectModel(Priority.name)\n    private readonly priorityModel: Model<Priority>,\n\n    @InjectModel(ProgressMonitoring.name)\n    private readonly progressMonitoringModel: Model<ProgressMonitoring>,\n\n    @InjectModel(MelpTasks.name)\n    private readonly melpTaskModel: Model<MelpTasks>,\n\n    @InjectModel(MelpTaskDetails.name)\n    private melpTaskDetailsModel: Model<MelpTaskDetails>,\n\n    @InjectModel(ActivityLog.name) private activityLogModel: Model<ActivityLog>,\n\n    private userService: UserService,\n\n    private networkService: NetworkService,\n\n    private partnerService: PartnerService,\n\n    @InjectModel(Activities.name)\n    private activityModel: Model<Activities>,\n\n    @InjectModel(ActivityProposals.name)\n    private activityProposalModel: Model<ActivityProposals>,\n  ) {}\n\n  // Check If MELP Year for a particulat institute name exists\n  async checkIfMelpYearExists(year: number, instituteName: string) {\n    try {\n      Logger.debug('MelpService.checkIfMelpYearExists');\n      const deniedStatusId = await this.userService.getStatusId(\n        StatusEnum.DENIED,\n      );\n      const existingMelpYear = await this.melpModel\n        .findOne({\n          year: year,\n          isDeleted: false,\n          instituteName: instituteName,\n          statusId: { $ne: deniedStatusId },\n        })\n        .exec();\n      if (existingMelpYear) {\n        return true;\n      } else {\n        return false;\n      }\n    } catch (e) {\n      throw new InternalServerErrorException();\n    }\n  }\n\n  async checkMelpYearExists(year: number, user: any) {\n    Logger.debug('MelpService.checkMelpYearExists');\n    let instituteName;\n    if (user.networkId === null && user.partnerId === null) {\n      instituteName = CapnetEnum.CAPNET;\n    } else if (user.networkId !== null && user.partnerId === null) {\n      instituteName = await this.networkService.getNetworkNameById(\n        user.networkId,\n      );\n    } else if (user.networkId === null && user.partnerId !== null) {\n      instituteName = await this.partnerService.getPartnerInstituteNameById(\n        user.partnerId,\n      );\n    }\n    const exists = await this.checkIfMelpYearExists(year, instituteName);\n    if (exists) throw new ConflictException(errorMessages.MELP_YEAR_EXISTS);\n  }\n\n  // Check If MELP exists\n  async checkIfMelpExists(melpId: string) {\n    try {\n      Logger.debug('MelpService.checkIfMelpExists');\n      const melpExists = await this.melpModel\n        .findOne({\n          melpId: melpId,\n          isDeleted: false,\n        })\n        .exec();\n      if (melpExists) {\n        return true;\n      } else {\n        return false;\n      }\n    } catch (e) {\n      throw new InternalServerErrorException();\n    }\n  }\n\n  // API's to get counts\n  // Get Objective Level Counts For A MELP\n  async getObjectiveLevelCounts(melpId: string) {\n    Logger.debug('MelpService.getObjectiveLevelCounts');\n    const melp = await this.getMelpByMelpId(melpId);\n    if (melp === null)\n      throw new NotFoundException(errorMessages.MELP_NOT_FOUND);\n    const results = await this.melpResultsModel\n      .find({\n        melpId: melp._id,\n      })\n      .exec();\n\n    let impactCount = 0,\n      outcomeCount = 0,\n      outputCount = 0;\n\n    for (const result of results) {\n      // Checking Objective level of each result and increasing the count accordingly\n      if (result.objectiveLevel === ObjectiveLevel.IMPACT) {\n        impactCount++;\n      } else if (result.objectiveLevel === ObjectiveLevel.OUTCOME) {\n        outcomeCount++;\n      } else if (result.objectiveLevel === ObjectiveLevel.OUTPUT) {\n        outputCount++;\n      }\n    }\n\n    return {\n      impactCount,\n      outcomeCount,\n      outputCount,\n    };\n  }\n\n  // Get Outcomes Count for a MELP\n  async getOutcomesCount(melpId: string) {\n    Logger.debug('MelpService.getOutcomesCount');\n    const melp = await this.getMelpByMelpId(melpId);\n    if (melp === null)\n      throw new NotFoundException(errorMessages.MELP_NOT_FOUND);\n\n    const outcomesCount = await this.melpOutcomesModel\n      .find({ melpId: melp._id })\n      .count()\n      .exec();\n\n    return {\n      outcomesCount,\n    };\n  }\n\n  // Get Indicators Count For A Result\n  async getIndicatorsCount(resultId: string) {\n    Logger.debug('MelpService.getIndicatorsCount');\n    const result = await this.melpResultsModel\n      .findOne({\n        resultId: resultId,\n        isDeleted: false,\n      })\n      .exec();\n    if (result === null)\n      throw new NotFoundException(errorMessages.RESULT_NOT_FOUND);\n\n    const indicatorsCount = await this.melpResultIndicatorsModel\n      .find({\n        resultId: result._id,\n      })\n      .count()\n      .exec();\n\n    return { indicatorsCount };\n  }\n\n  // Get Progress Markers Count For A Outcome Challenge\n  async getProgressMarkersCount(outcomeId: string) {\n    Logger.debug('MelpService.getProgressMarkersCount');\n    const outcomeChallenge = await this.melpOutcomesModel\n      .findOne({\n        outcomeId: outcomeId,\n        isDeleted: false,\n      })\n      .exec();\n\n    if (outcomeChallenge === null) {\n      throw new NotFoundException(errorMessages.OUTCOME_CHALLENGE_NOT_FOUND);\n    }\n\n    const progressMarkerCount = await this.melpOutcomeProgressMarkersModel\n      .find({\n        melpOutcomeId: outcomeChallenge._id,\n      })\n      .count()\n      .exec();\n    return { progressMarkerCount };\n  }\n\n  // Static Data Tables Queries\n  // Get Priority\n  async getPriority(priorityId) {\n    Logger.debug('MelpService.getPriority');\n    const priority = await this.priorityModel\n      .findById({ _id: priorityId })\n      .exec();\n    return priority.priority;\n  }\n\n  // Get MELP Task\n  async getMelpTask() {\n    try {\n      Logger.debug('MelpService.getMelpTask');\n      return this.melpTaskModel.find().exec();\n    } catch (error) {\n      throw new InternalServerErrorException();\n    }\n  }\n\n  // Get Priority\n  async getPriorityList() {\n    try {\n      Logger.debug('MelpService.getPriorityList');\n      return this.priorityModel.find().exec();\n    } catch (error) {\n      throw new InternalServerErrorException();\n    }\n  }\n\n  // Get Progress Monitorings\n  async getProgressMonitoring(id: any) {\n    try {\n      Logger.debug('MelpService.getProgressMonitoring');\n      return await this.progressMonitoringModel.findOne({ _id: id }).exec();\n      // if (progressMonitoring === null)\n      // throw new NotFoundException('Monitoring Not Found');\n      // return ' ';\n      // else return progressMonitoring.progressMonitoring;\n    } catch (error) {\n      throw new InternalServerErrorException();\n    }\n  }\n\n  // Get Boundary Partners\n  async boundaryPartners() {\n    Logger.debug('MelpService.boundaryPartners');\n\n    const outcomes = await this.melpOutcomesModel\n      .find({ isDeleted: false })\n      .exec();\n    const boundaryPartnersArray = [];\n\n    for (const outcome of outcomes) {\n      for (const boundaryPartner of outcome.boundaryPartners) {\n        boundaryPartnersArray.push(boundaryPartner);\n      }\n    }\n    return [...new Set(boundaryPartnersArray)];\n  }\n\n  // Get API's from UUID\n  // Get melp by melpId\n  async getMelpByMelpId(melpId: string) {\n    try {\n      Logger.debug('MelpService.getMelpByMelpId');\n      const melpExists = await this.checkIfMelpExists(melpId);\n      if (melpExists) {\n        return await this.melpModel\n          .findOne({\n            melpId: melpId,\n            isDeleted: false,\n          })\n          .exec();\n      } else {\n        return null;\n      }\n    } catch (e) {\n      throw new InternalServerErrorException();\n    }\n  }\n\n  // Get Result by resultId\n  async getResultByResultId(resultId: string) {\n    Logger.debug('MelpService.getResultByResultId');\n    const result = await this.melpResultsModel\n      .findOne({\n        resultId: resultId,\n        isDeleted: false,\n      })\n      .exec();\n\n    if (result === null)\n      throw new NotFoundException(errorMessages.RESULT_NOT_FOUND);\n    else return result;\n  }\n\n  // Get Indicator by indicatorId\n  async getIndicatorByIndicatorId(indicatorId: string) {\n    Logger.debug('MelpService.getIndicatorByIndicatorId');\n    const indicator = await this.melpResultIndicatorsModel\n      .findOne({\n        indicatorId: indicatorId,\n        isDeleted: false,\n      })\n      .exec();\n\n    if (indicator === null)\n      throw new NotFoundException(errorMessages.INDICATOR_NOT_FOUND);\n    else return indicator;\n  }\n\n  // Get Outcome Challenge by outcomeId\n  async getOutcomeByOutcomeId(outcomeId: string) {\n    Logger.debug('MelpService.getOutcomeByOutcomeId');\n    const outcome = await this.melpOutcomesModel\n      .findOne({\n        outcomeId: outcomeId,\n        isDeleted: false,\n      })\n      .exec();\n\n    if (outcome === null)\n      throw new NotFoundException(errorMessages.OUTCOME_CHALLENGE_NOT_FOUND);\n    else return outcome;\n  }\n\n  // Get API's from mongo-id\n  // Get Result by mongoId\n  async getResultById(id: any) {\n    Logger.debug('MelpService.getResultById');\n    const result = await this.melpResultsModel\n      .findOne({\n        _id: id,\n        isDeleted: false,\n      })\n      .exec();\n\n    if (result === null)\n      throw new NotFoundException(errorMessages.RESULT_NOT_FOUND);\n    else return result;\n  }\n\n  // Get Indicator by mongoId\n  async getIndicatorById(indicatorId: any) {\n    Logger.debug('MelpService.getIndicatorById');\n    const indicator = await this.melpResultIndicatorsModel\n      .findOne({\n        _id: indicatorId,\n        isDeleted: false,\n      })\n      .exec();\n\n    if (indicator) return indicator;\n    else return null;\n  }\n\n  //Get MELP Results by year\n  async getMelpResultsByYear(year: number, user: any) {\n    Logger.debug('MelpService.getMelpByYear');\n    let melp;\n    const deniedStatusId = await this.userService.getStatusId(\n      StatusEnum.DENIED,\n    );\n    if (user.networkId) {\n      melp = await this.melpModel\n        .findOne({\n          year: year,\n          isDeleted: false,\n          networkId: user.networkId,\n          statusId: { $ne: deniedStatusId },\n        })\n        .exec();\n    } else if (user.partnerId) {\n      melp = await this.melpModel\n        .findOne({\n          year: year,\n          isDeleted: false,\n          partnerId: user.partnerId,\n          statusId: { $ne: deniedStatusId },\n        })\n        .exec();\n    } else {\n      melp = await this.melpModel\n        .findOne({\n          year: year,\n          isDeleted: false,\n          statusId: { $ne: deniedStatusId },\n          networkId: user.networkId,\n          partnerId: user.partnerId,\n        })\n        .exec();\n    }\n\n    if (!melp) throw new NotFoundException(errorMessages.MELP_NOT_FOUND);\n\n    return this.melpResultsModel\n      .find({\n        melpId: melp._id,\n        isDeleted: false,\n      })\n      .exec();\n  }\n\n  async getMelpResultsByYearForCapnet(year: number, user: any) {\n    Logger.debug('MelpService.getMelpResultsByYearForCapnet');\n    let melp;\n    const deniedStatusId = await this.userService.getStatusId(\n      StatusEnum.DENIED,\n    );\n    if (user.networkId === null && user.partnerId === null) {\n      melp = await this.melpModel\n        .find({\n          year: year,\n          isDeleted: false,\n          statusId: { $ne: deniedStatusId },\n        })\n        .exec();\n    }\n\n    if (!melp) throw new NotFoundException(errorMessages.MELP_NOT_FOUND);\n    let results = [];\n    for (const eachMelp of melp) {\n      const result = await this.melpResultsModel\n        .find({\n          melpId: eachMelp._id,\n          isDeleted: false,\n        })\n        .exec();\n\n      results = [...results, ...result];\n      // results.push(result)\n    }\n    console.log('Results ', results);\n    return results;\n  }\n\n  // Get indicators by resultId\n  async getIndicatorsByResultId(id: string) {\n    Logger.debug('MelpService.getIndicatorsByResultId');\n    return this.melpResultIndicatorsModel\n      .find({\n        isDeleted: false,\n        resultId: id,\n      })\n      .exec();\n  }\n\n  // Common function to return array of melp objects\n  async getArrayOfMelpObjects(melpsList) {\n    Logger.debug('MelpService.getArrayOfMelpObjects');\n    const melpSummary = [];\n    for (const melp of melpsList) {\n      const temp = {};\n      temp['melpId'] = melp.melpId;\n      temp['melpCode'] = melp.melpCode;\n      temp['instituteName'] = melp.instituteName;\n      temp['status'] = await this.userService.getStatusName(melp.statusId);\n      temp['year'] = melp.year;\n      temp['createdAt'] = new Date(melp.createdAt);\n      temp['updateAt'] = melp.updatedAt;\n      temp['isDeleted'] = melp.isDeleted;\n      temp['resultCount'] = await this.melpResultsModel\n        .find({ isDeleted: false, melpId: melp._id })\n        .count()\n        .exec();\n      temp['approvedCount'] = melp.approvedCount;\n      melpSummary.push(temp);\n    }\n    return melpSummary;\n  }\n\n  // Common function for Activity Log\n  async addActivityLog(user: any, description: string) {\n    Logger.debug('MelpService.addActivityLog');\n    let instituteName;\n    if (user.networkId === null && user.partnerId === null) {\n      instituteName = CapnetEnum.CAPNET;\n    } else if (user.networkId !== null && user.partnerId === null) {\n      instituteName = await this.networkService.getNetworkNameById(\n        user.networkId,\n      );\n    } else if (user.networkId === null && user.partnerId !== null) {\n      instituteName = await this.partnerService.getPartnerInstituteNameById(\n        user.partnerId,\n      );\n    }\n\n    await new this.activityLogModel({\n      userId: user._id,\n      name: user.fullName,\n      instituteName: instituteName,\n      description: description,\n      networkId: user.networkId,\n      partnerId: user.partnerId,\n    }).save();\n  }\n\n  async commonFunctionForSearchSort(\n    searchKeyword: string,\n    sortKey: string,\n    sortDirection: number,\n  ) {\n    Logger.debug('MelpService.commonFunctionForSearchSort');\n    const regex = new RegExp(searchKeyword, 'i');\n    sortKey = sortKey.trim().length === 0 ? 'updatedAt' : sortKey;\n    const sortQuery = {};\n    sortQuery[sortKey] = sortDirection === 1 ? 1 : -1;\n\n    return {\n      regex,\n      sortQuery,\n    };\n  }\n\n  // MELP Summary By Year Table\n  async viewMelpSummary(\n    year: number,\n    searchKeyword: string,\n    pageLimit: number,\n    pageIndex: number,\n    sortKey: string,\n    sortDirection: number,\n  ) {\n    try {\n      Logger.debug('MelpService.viewMelpSummary');\n      const { regex, sortQuery } = await this.commonFunctionForSearchSort(\n        searchKeyword,\n        sortKey,\n        sortDirection,\n      );\n      const approvedStatusId = await this.userService.getStatusId(\n        StatusEnum.APPROVED,\n      );\n      const melpsList = await this.melpModel\n        .find({\n          $and: [\n            { isDeleted: false, year: year, statusId: approvedStatusId },\n            {\n              $or: [{ melpCode: regex }, { instituteName: regex }],\n            },\n          ],\n        })\n        .sort(sortQuery)\n        .skip(pageIndex * pageLimit)\n        .limit(pageLimit)\n        .exec();\n\n      const melpsCount = await this.melpModel\n        .find({\n          isDeleted: false,\n          year: year,\n          statusId: approvedStatusId,\n        })\n        .count()\n        .exec();\n\n      const melpSummary = await this.getArrayOfMelpObjects(melpsList);\n      return {\n        melpSummary: melpSummary,\n        melpsCount,\n        pagesCount: Math.ceil(melpsCount / 10),\n      };\n    } catch (error) {\n      throw new InternalServerErrorException();\n    }\n  }\n\n  // View MELP submitted by all the networks\n  async viewAllNetworksMelp(\n    searchKeyword: string,\n    pageLimit: number,\n    pageIndex: number,\n    sortKey: string,\n    sortDirection: number,\n    year: number,\n  ) {\n    try {\n      Logger.debug('MelpService.viewAllNetworksMelp');\n      const { regex, sortQuery } = await this.commonFunctionForSearchSort(\n        searchKeyword,\n        sortKey,\n        sortDirection,\n      );\n      const inProgressStatusId = await this.userService.getStatusId(\n        StatusEnum.IN_PROGRESS,\n      );\n      const melpsList = await this.melpModel\n        .find({\n          $and: [\n            {\n              year,\n              isDeleted: false,\n              networkId: { $ne: null },\n              partnerId: { $eq: null },\n              statusId: { $ne: inProgressStatusId },\n            },\n            {\n              $or: [{ melpCode: regex }, { instituteName: regex }],\n            },\n          ],\n        })\n        .sort(sortQuery)\n        .skip(pageLimit * pageIndex)\n        .limit(pageLimit)\n        .exec();\n\n      const melpsCount = await this.melpModel\n        .find({\n          $and: [\n            {\n              year,\n              isDeleted: false,\n              networkId: { $ne: null },\n              partnerId: { $eq: null },\n              statusId: { $ne: inProgressStatusId },\n            },\n            {\n              $or: [{ melpCode: regex }, { instituteName: regex }],\n            },\n          ],\n        })\n        .count()\n        .exec();\n\n      const melpSummary = await this.getArrayOfMelpObjects(melpsList);\n      return {\n        melpsList: melpSummary,\n        melpsCount,\n        pageCount: Math.ceil(melpsCount / 10),\n      };\n    } catch (error) {\n      throw new InternalServerErrorException();\n    }\n  }\n\n  // View MELP submitted by all the networks\n  async viewAllPartnersMelp(\n    searchKeyword: string,\n    pageLimit: number,\n    pageIndex: number,\n    sortKey: string,\n    sortDirection: number,\n    year: number,\n  ) {\n    try {\n      Logger.debug('MelpService.viewAllPartnersMelp');\n      const { regex, sortQuery } = await this.commonFunctionForSearchSort(\n        searchKeyword,\n        sortKey,\n        sortDirection,\n      );\n      const inProgressStatusId = await this.userService.getStatusId(\n        StatusEnum.IN_PROGRESS,\n      );\n      const melpsList = await this.melpModel\n        .find({\n          $and: [\n            {\n              year,\n              isDeleted: false,\n              partnerId: { $ne: null },\n              networkId: { $eq: null },\n              statusId: { $ne: inProgressStatusId },\n            },\n            {\n              $or: [{ melpCode: regex }, { instituteName: regex }],\n            },\n          ],\n        })\n        .sort(sortQuery)\n        .skip(pageLimit * pageIndex)\n        .limit(pageLimit)\n        .exec();\n\n      const melpsCount = await this.melpModel\n        .find({\n          $and: [\n            {\n              year,\n              isDeleted: false,\n              partnerId: { $ne: null },\n              networkId: { $eq: null },\n              statusId: { $ne: inProgressStatusId },\n            },\n            {\n              $or: [{ melpCode: regex }, { instituteName: regex }],\n            },\n          ],\n        })\n        .count()\n        .exec();\n\n      const melpSummary = await this.getArrayOfMelpObjects(melpsList);\n      return {\n        melpsList: melpSummary,\n        melpsCount,\n        pageCount: Math.ceil(melpsCount / 10),\n      };\n    } catch (error) {\n      throw new InternalServerErrorException();\n    }\n  }\n\n  // Network or Partner MELP Summary By Year - Table\n  async viewNetworkOrPartnerMelpSummary(\n    year: number,\n    searchKeyword: string,\n    pageLimit: number,\n    pageIndex: number,\n    sortKey: string,\n    sortDirection: number,\n    user: any,\n  ) {\n    try {\n      Logger.debug('MelpService.viewNetworkOrPartnerMelpSummary');\n      const { regex, sortQuery } = await this.commonFunctionForSearchSort(\n        searchKeyword,\n        sortKey,\n        sortDirection,\n      );\n      let melpsList, melpsCount;\n      if (user.networkId) {\n        melpsList = await this.melpModel\n          .find({\n            $and: [\n              {\n                isDeleted: false,\n                year: year,\n                networkId: { $ne: null, $eq: user.networkId },\n              },\n              {\n                $or: [{ melpCode: regex }, { instituteName: regex }],\n              },\n            ],\n          })\n          .sort(sortQuery)\n          .skip(pageIndex * pageLimit)\n          .limit(pageLimit)\n          .exec();\n\n        melpsCount = await this.melpModel\n          .find({ isDeleted: false, year: year, networkId: user.networkId })\n          .count()\n          .exec();\n      } else if (user.partnerId) {\n        melpsList = await this.melpModel\n          .find({\n            $and: [\n              {\n                isDeleted: false,\n                year: year,\n                partnerId: { $ne: null, $eq: user.partnerId },\n                networkId: null,\n              },\n              {\n                $or: [{ melpCode: regex }, { instituteName: regex }],\n              },\n            ],\n          })\n          .sort(sortQuery)\n          .skip(pageIndex * pageLimit)\n          .limit(pageLimit)\n          .exec();\n\n        melpsCount = await this.melpModel\n          .find({\n            isDeleted: false,\n            year: year,\n            npartnerId: user.partnerId,\n            networkId: null,\n          })\n          .count()\n          .exec();\n      }\n\n      const melpSummary = await this.getArrayOfMelpObjects(melpsList);\n\n      return {\n        melpsList: melpSummary,\n        melpsCount,\n        pageCount: Math.ceil(melpsCount / 10),\n      };\n    } catch (error) {\n      throw new InternalServerErrorException();\n    }\n  }\n\n  // SRF Summary Table\n  async viewMelpSrfSummary(\n    melpId: string,\n    searchKeyword: string,\n    pageLimit: number,\n    pageIndex: number,\n    sortKey: string,\n    sortDirection: number,\n  ) {\n    try {\n      Logger.debug('MelpService.viewMelpSrfSummary');\n      const { regex, sortQuery } = await this.commonFunctionForSearchSort(\n        searchKeyword,\n        sortKey,\n        sortDirection,\n      );\n      const melp = await this.getMelpByMelpId(melpId);\n      if (melp === null) {\n        throw new NotFoundException(errorMessages.MELP_NOT_FOUND);\n      }\n      const results = await this.melpResultsModel\n        .find({\n          $and: [\n            {\n              melpId: melp._id,\n              isDeleted: false,\n            },\n            {\n              $or: [{ resultCode: regex }, { resultName: regex }],\n            },\n          ],\n        })\n        .sort(sortQuery)\n        .skip(pageIndex * pageLimit)\n        .limit(pageLimit)\n        .exec();\n\n      const resultsCount = await this.melpResultsModel\n        .find({\n          melpId: melp._id,\n          isDeleted: false,\n        })\n        .count()\n        .exec();\n\n      let resultList = [];\n      for (const result of results) {\n        const temp = {};\n        const indicatorsCount = await this.melpResultIndicatorsModel\n          .find({\n            resultId: result._id,\n            isDeleted: false,\n          })\n          .count()\n          .exec();\n        temp['resultId'] = result.resultId;\n        temp['resultCode'] = result.resultCode;\n        temp['resultName'] = result.resultName;\n        temp['indicatorsCount'] = indicatorsCount;\n        resultList = [...resultList, { ...temp }];\n      }\n\n      return {\n        results: resultList,\n        resultsCount,\n        pageCount: Math.ceil(resultsCount / 10),\n      };\n    } catch (error) {\n      throw new InternalServerErrorException();\n    }\n  }\n\n  // View MELP SRF - Detailed\n  async viewMelpSrf(resultId: string, pageLimit: number, pageIndex: number) {\n    try {\n      Logger.debug('MelpService.viewMelpSrf');\n      const result = await this.melpResultsModel\n        .findOne({\n          resultId: resultId,\n          isDeleted: false,\n        })\n        .exec();\n\n      const melp = await this.melpModel.findOne({ _id: result.melpId }).exec();\n\n      const indicators = await this.melpResultIndicatorsModel\n        .find({\n          resultId: result._id,\n          isDeleted: false,\n        })\n        .skip(pageLimit * pageIndex)\n        .limit(pageLimit)\n        .exec();\n\n      const indicatorsCount = await this.melpResultIndicatorsModel\n        .find({ resultId: result._id })\n        .count()\n        .exec();\n\n      const pageCount = await this.melpResultIndicatorsModel\n        .find({ resultId: result._id, isDeleted: false })\n        .count()\n        .exec();\n\n      let indicatorList = [];\n      for (const indicator of indicators) {\n        const temp = {};\n        const monitorings = await this.melpIndicatorMonitoringModel\n          .find({\n            resultIndicatorId: indicator._id,\n            isDeleted: false,\n          })\n          .exec();\n\n        const risks = await this.melpIndicatorRisksModel\n          .find({\n            resultIndicatorId: indicator._id,\n            isDeleted: false,\n          })\n          .exec();\n        temp['indicator'] = indicator;\n        temp['monitorings'] = monitorings;\n        temp['risks'] = risks;\n        indicatorList = [...indicatorList, { ...temp }];\n      }\n\n      return {\n        melpId: melp.melpId,\n        melpYear: melp.year,\n        melpCode: melp.melpCode,\n        resultId: result.resultId,\n        resultCode: result.resultCode,\n        resultName: result.resultName,\n        objectiveLevel: result.objectiveLevel,\n        indicatorList,\n        indicatorsCount,\n        pageCount,\n      };\n    } catch (error) {\n      throw new InternalServerErrorException();\n    }\n  }\n\n  // OM Summary - Table\n  async viewMelpOMSummary(\n    melpId: string,\n    searchKeyword: string,\n    pageLimit: number,\n    pageIndex: number,\n    sortKey: string,\n    sortDirection: number,\n  ) {\n    try {\n      Logger.debug('MelpService.viewMelpOMSummary');\n      const { regex, sortQuery } = await this.commonFunctionForSearchSort(\n        searchKeyword,\n        sortKey,\n        sortDirection,\n      );\n      const melp = await this.getMelpByMelpId(melpId);\n      if (melp === null) {\n        throw new NotFoundException(errorMessages.MELP_NOT_FOUND);\n      }\n\n      const outcomes = await this.melpOutcomesModel\n        .find({\n          $and: [\n            {\n              melpId: melp._id,\n              isDeleted: false,\n            },\n            {\n              $or: [{ outcomeCode: regex }, { outcomeChallenge: regex }],\n            },\n          ],\n        })\n        .sort(sortQuery)\n        .skip(pageIndex * pageLimit)\n        .limit(pageLimit)\n        .exec();\n\n      const outcomesCount = await this.melpOutcomesModel\n        .find({\n          melpId: melp._id,\n          isDeleted: false,\n        })\n        .count()\n        .exec();\n\n      let omList = [];\n      for (const outcome of outcomes) {\n        const temp = {};\n        const progressMarkerTotalCount =\n          await this.melpOutcomeProgressMarkersModel\n            .find({\n              outcomeId: outcome._id,\n              isDeleted: false,\n            })\n            .count()\n            .exec();\n        temp['outcomeId'] = outcome.outcomeId;\n        temp['outcomeCode'] = outcome.outcomeCode;\n        temp['outcomeChallenge'] = outcome.outcomeChallenge;\n        temp['progressMarkerTotalCount'] = progressMarkerTotalCount;\n        omList = [...omList, { ...temp }];\n      }\n\n      return {\n        results: omList,\n        outcomesCount,\n        pageCount: Math.ceil(outcomesCount / 10),\n      };\n    } catch (error) {\n      throw new InternalServerErrorException();\n    }\n  }\n\n  // View MELP OM - Detailed\n  async viewMelpOm(outcomeId: string) {\n    Logger.debug('MelpService.viewMelpOm');\n    const outcome = await this.getOutcomeByOutcomeId(outcomeId);\n    const progressMarkers = await this.melpOutcomeProgressMarkersModel\n      .find({\n        outcomeId: outcome._id,\n        isDeleted: false,\n      })\n      .exec();\n\n    let progressMarkerList = [];\n    for (const marker of progressMarkers) {\n      const temp = {};\n      temp['progressMarkersId'] = marker.progressMarkersId;\n      temp['progressMarkerCode'] = marker.progressMarkerCode;\n      temp['progressMarker'] = marker.progressMarker;\n      temp['priority'] = marker.priorityId;\n      progressMarkerList = [...progressMarkerList, { ...temp }];\n    }\n\n    const progressMarkerTotalCount = await this.melpOutcomeProgressMarkersModel\n      .find({ outcomeId: outcome._id })\n      .count()\n      .exec();\n\n    return {\n      outcome,\n      progressMarkers: progressMarkerList,\n      // boundaryPartners: boundaryPartners,\n      progressMarkerTotalCount,\n    };\n  }\n\n  // SRF Monitorings - For View MEL Progress and Global SRF Monitorings\n  async getMelpSRFMonitoringsGlobal(\n    melpId: string,\n    searchKeyword: string,\n    sortKey: string,\n    sortDirection: number | any,\n  ) {\n    Logger.debug('MelpService.getMelpSRFMonitoringsGlobal');\n\n    const melp = await this.getMelpByMelpId(melpId);\n    if (melp === null) {\n      throw new NotFoundException(errorMessages.MELP_NOT_FOUND);\n    }\n    const regex = new RegExp(searchKeyword, 'i');\n    sortKey = sortKey.trim().length === 0 ? 'updatedAt' : sortKey;\n    const sortFilters: any = {\n      instituteName: 'instituteName',\n      resultCode: 'resultsList.resultCode',\n      indicatorCode: 'indicatorsList.indicatorCode',\n      indicatorName: 'indicatorsList.indicatorName',\n      measurementUnit: 'indicatorsList.measurementUnit',\n      cumulativeTarget: 'indicatorsList.cumulativeTarget',\n      targetAchieved: 'monitoringsList.targetAchieved',\n      explaination: 'monitoringsList.explaination',\n      progress: 'monitoringsList.progress',\n      baseline: 'monitoringsList.baseline',\n      updatedAt: 'updatedAt',\n    };\n\n    return this.melpModel\n      .aggregate([\n        {\n          $match: {\n            _id: melp._id,\n            $or: [{ instituteName: { $regex: regex } }],\n          },\n        },\n        {\n          $lookup: {\n            from: 'melpresults',\n            pipeline: [\n              {\n                $match: {\n                  $expr: {\n                    $and: [\n                      { $eq: ['$melpId', melp._id] },\n                      { $eq: ['$isDeleted', false] },\n                    ],\n                  },\n                },\n              },\n            ],\n            as: 'resultsList',\n          },\n        },\n        { $unwind: '$resultsList' },\n        {\n          $lookup: {\n            from: 'melpresultindicators',\n            let: { resultId: '$resultsList._id' },\n            pipeline: [\n              {\n                $match: {\n                  $expr: {\n                    $and: [\n                      { $eq: ['$resultId', '$$resultId'] },\n                      { $eq: ['$isDeleted', false] },\n                    ],\n                  },\n                },\n              },\n            ],\n            as: 'indicatorsList',\n          },\n        },\n        { $unwind: '$indicatorsList' },\n        {\n          $lookup: {\n            from: 'melpindicatormonitorings',\n            let: { resultIndicatorId: '$indicatorsList._id' },\n            pipeline: [\n              {\n                $match: {\n                  $expr: {\n                    $and: [\n                      { $eq: ['$resultIndicatorId', '$$resultIndicatorId'] },\n                      { $eq: ['$isDeleted', false] },\n                    ],\n                  },\n                },\n              },\n            ],\n            as: 'monitoringsList',\n          },\n        },\n        { $unwind: '$monitoringsList' },\n        {\n          $sort: {\n            [`${sortFilters[sortKey]}`]: sortDirection,\n          },\n        },\n        // {\n        //   $facet: {\n        //     records: [],\n        //     totalCount: [{ $count: 'count' }],\n        //   },\n        // },\n      ])\n      .exec();\n  }\n\n  async getMelpProgressMarkerMonitoringsGlobal(\n    melpId: string,\n    searchKeyword: string,\n    sortKey: string,\n    sortDirection: number | any,\n  ) {\n    Logger.debug('MelpService.getMelpProgressMarkerMonitoringsGlobal');\n    const melp = await this.getMelpByMelpId(melpId);\n    if (melp === null) {\n      throw new NotFoundException(errorMessages.MELP_NOT_FOUND);\n    }\n\n    sortKey = sortKey.trim().length === 0 ? 'updatedAt' : sortKey;\n    const regex = new RegExp(searchKeyword, 'i');\n    const sortFilters: any = {\n      instituteName: 'instituteName',\n      outcomeCode: 'outcomesList.outcomeCode',\n      progressMarkerCode: 'progressMarkersList.progressMarkerCode',\n      progressMarker: 'progressMarkersList.progressMarker',\n      descriptionOfChange: 'progressMarkersList.descriptionOfChange',\n      contributingFactors: 'progressMarkersList.contributingFactors',\n      sourceOfEvidence: 'progressMarkersList.sourceOfEvidence',\n      unintendedChanges: 'progressMarkersList.unintendedChanges',\n      updatedAt: 'updatedAt',\n    };\n\n    return this.melpModel\n      .aggregate([\n        {\n          $match: {\n            _id: melp._id,\n            $or: [{ instituteName: { $regex: regex } }],\n          },\n        },\n        {\n          $lookup: {\n            from: 'melpoutcomes',\n            pipeline: [\n              {\n                $match: {\n                  $expr: {\n                    $and: [\n                      { $eq: ['$melpId', melp._id] },\n                      { $eq: ['$isDeleted', false] },\n                    ],\n                  },\n                },\n              },\n            ],\n            as: 'outcomesList',\n          },\n        },\n        { $unwind: '$outcomesList' },\n        {\n          $lookup: {\n            from: 'melpoutcomeprogressmarkers',\n            let: { outcomeId: '$outcomesList._id' },\n            pipeline: [\n              {\n                $match: {\n                  $expr: {\n                    $and: [\n                      { $eq: ['$outcomeId', '$$outcomeId'] },\n                      { $eq: ['$isDeleted', false] },\n                    ],\n                  },\n                },\n              },\n            ],\n            as: 'progressMarkersList',\n          },\n        },\n        { $unwind: '$progressMarkersList' },\n        {\n          $sort: {\n            [`${sortFilters[sortKey]}`]: sortDirection,\n          },\n        },\n      ])\n      .exec();\n  }\n\n  async getArrayOfObjectsForMelpProgressSRF(results) {\n    Logger.debug('MelpService.getArrayOfObjectsForMelpProgress');\n    let indicatorsMonitoringList = [],\n      indicatorsTotalCount;\n    for (const result of results) {\n      for (let i = 0; i < result.records.length; i++) {\n        const temp = {};\n        temp['instituteName'] = result.records[i].instituteName;\n        temp['resultCode'] = result.records[i].resultsList.resultCode;\n        temp['indicatorCode'] = result.records[i].indicatorsList.indicatorCode;\n        temp['indicator'] = result.records[i].indicatorsList.indicatorName;\n        temp['indicatorMonitoringId'] =\n          result.records[i].monitoringsList.indicatorMonitoringId;\n        temp['measurementUnit'] =\n          result.records[i].indicatorsList.measurementUnit;\n        temp['cumulativeTarget'] =\n          result.records[i].indicatorsList.cumulativeTarget;\n        temp['baseline'] = result.records[i].monitoringsList.baseline;\n        temp['target'] = result.records[i].monitoringsList.targetAchieved;\n        temp['progress'] = result.records[i].monitoringsList.progress;\n        temp['explaination'] = result.records[i].monitoringsList.explaination;\n        indicatorsMonitoringList = [...indicatorsMonitoringList, { ...temp }];\n      }\n      indicatorsTotalCount =\n        result.records.length === 0 ? 0 : result.totalCount[0].count;\n    }\n\n    return {\n      indicatorsMonitoringList,\n      indicatorsTotalCount,\n    };\n  }\n\n  async getArrayOfObjectsForMelpProgressSRFGlobal(results) {\n    Logger.debug('MelpService.getArrayOfObjectsForMelpProgressSRFGlobal');\n    let indicatorsMonitoringList = [],\n      count = 0;\n    for (const result of results) {\n      console.log('Length ', result);\n      for (let i = 0; i < result.length; i++) {\n        const temp = {};\n        temp['instituteName'] = result[i].instituteName;\n        temp['resultCode'] = result[i].resultsList.resultCode;\n        temp['indicatorCode'] = result[i].indicatorsList.indicatorCode;\n        temp['indicator'] = result[i].indicatorsList.indicatorName;\n        temp['indicatorMonitoringId'] =\n          result[i].monitoringsList.indicatorMonitoringId;\n        temp['measurementUnit'] = result[i].indicatorsList.measurementUnit;\n        temp['cumulativeTarget'] = result[i].indicatorsList.cumulativeTarget;\n        temp['baseline'] = result[i].monitoringsList.baseline;\n        temp['target'] = result[i].monitoringsList.targetAchieved;\n        temp['progress'] = result[i].monitoringsList.progress;\n        temp['explaination'] = result[i].monitoringsList.explaination;\n        indicatorsMonitoringList = [...indicatorsMonitoringList, { ...temp }];\n      }\n      count += result.length;\n    }\n    const indicatorsTotalCount = count;\n    return {\n      indicatorsMonitoringList,\n      indicatorsTotalCount,\n    };\n  }\n\n  async getArrayOfObjectsForMelpProgressPM(outcomeMappings) {\n    Logger.debug('MelpService.getArrayOfObjectsForMelpProgressPM');\n    let progressMonitoringList = [],\n      progressMonitoringsTotalCount;\n    for (const mapping of outcomeMappings) {\n      for (let i = 0; i < mapping.records.length; i++) {\n        const temp = {};\n        temp['instituteName'] = mapping.records[i].instituteName;\n        temp['outcomeCode'] = mapping.records[i].outcomesList.outcomeCode;\n        temp['progressMarkerCode'] =\n          mapping.records[i].progressMarkersList.progressMarkerCode;\n        temp['marker'] = mapping.records[i].progressMarkersList.progressMarker;\n        temp['progressMarkerId'] =\n          mapping.records[i].progressMarkersList.progressMarkersId;\n        temp['progressMonitoringQ2'] = await this.getProgressMonitoring(\n          mapping.records[i].progressMarkersList.progressMonitoringQ2,\n        );\n        temp['progressMonitoringQ4'] = await this.getProgressMonitoring(\n          mapping.records[i].progressMarkersList.progressMonitoringQ4,\n        );\n        temp['descriptionOfChange'] =\n          mapping.records[i].progressMarkersList.descriptionOfChange;\n        temp['contributingFactors'] =\n          mapping.records[i].progressMarkersList.contributingFactors;\n        temp['sourceOfEvidence'] =\n          mapping.records[i].progressMarkersList.sourceOfEvidence;\n        temp['unintendedChanges'] =\n          mapping.records[i].progressMarkersList.unintendedChanges;\n        progressMonitoringList = [...progressMonitoringList, { ...temp }];\n      }\n      progressMonitoringsTotalCount =\n        mapping.records.length === 0 ? 0 : mapping.totalCount[0].count;\n    }\n\n    return {\n      progressMonitoringList,\n      progressMonitoringsTotalCount,\n    };\n  }\n\n  async getArrayOfObjectsForMelpProgressPMGlobal(outcomeMappings) {\n    Logger.debug('MelpService.getArrayOfObjectsForMelpProgressPMGlobal');\n    let progressMonitoringList = [],\n      count = 0;\n    for (const mapping of outcomeMappings) {\n      for (let i = 0; i < mapping.length; i++) {\n        const temp = {};\n        temp['instituteName'] = mapping[i].instituteName;\n        temp['outcomeCode'] = mapping[i].outcomesList.outcomeCode;\n        temp['progressMarkerCode'] =\n          mapping[i].progressMarkersList.progressMarkerCode;\n        temp['marker'] = mapping[i].progressMarkersList.progressMarker;\n        temp['progressMarkerId'] =\n          mapping[i].progressMarkersList.progressMarkersId;\n        temp['progressMonitoringQ2'] = await this.getProgressMonitoring(\n          mapping[i].progressMarkersList.progressMonitoringQ2,\n        );\n        temp['progressMonitoringQ4'] = await this.getProgressMonitoring(\n          mapping[i].progressMarkersList.progressMonitoringQ4,\n        );\n        temp['descriptionOfChange'] =\n          mapping[i].progressMarkersList.descriptionOfChange;\n        temp['contributingFactors'] =\n          mapping[i].progressMarkersList.contributingFactors;\n        temp['sourceOfEvidence'] =\n          mapping[i].progressMarkersList.sourceOfEvidence;\n        temp['unintendedChanges'] =\n          mapping[i].progressMarkersList.unintendedChanges;\n        progressMonitoringList = [...progressMonitoringList, { ...temp }];\n      }\n      count += mapping.length;\n    }\n    const progressMonitoringsTotalCount = count;\n    return {\n      progressMonitoringList,\n      progressMonitoringsTotalCount,\n    };\n  }\n\n  // MEL Progress - SRF\n  async viewMelProgressSRF(\n    melpId: string,\n    searchKeyword: string,\n    pageLimit: number,\n    pageIndex: number,\n    sortKey: string,\n    sortDirection: number,\n  ) {\n    Logger.debug('MelpService.viewMelProgressSRF');\n    const melp = await this.getMelpByMelpId(melpId);\n    if (melp === null) {\n      throw new NotFoundException(errorMessages.MELP_NOT_FOUND);\n    }\n\n    // const results = await this.getMelpSRFMonitorings(\n    //   melpId,\n    //   searchKeyword,\n    //   pageLimit,\n    //   pageIndex,\n    //   sortKey,\n    //   sortDirection,\n    // );\n\n    const results = await this.getMelpSRFMonitoringsGlobal(\n      melpId,\n      searchKeyword,\n      sortKey,\n      sortDirection,\n    );\n\n    // const { indicatorsMonitoringList, indicatorsTotalCount } =\n    //   await this.getArrayOfObjectsForMelpProgressSRF(results);\n\n    const { indicatorsMonitoringList, indicatorsTotalCount } =\n      await this.getArrayOfObjectsForMelpProgressSRFGlobal([results]);\n\n    return {\n      IndicatorsMonitoring: indicatorsMonitoringList.slice(\n        (pageIndex - 1) * pageLimit,\n        pageIndex * pageLimit,\n      ),\n      indicatorsTotalCount,\n      pageCount: Math.ceil(indicatorsTotalCount / 10),\n    };\n  }\n\n  // MEL Progress - PM\n  async viewMelProgressPM(\n    melpId: string,\n    searchKeyword: string,\n    pageLimit: number,\n    pageIndex: number,\n    sortKey: string,\n    sortDirection: number,\n  ) {\n    Logger.debug('MelpService.viewMelProgressPM');\n    const melp = await this.getMelpByMelpId(melpId);\n\n    if (melp === null) {\n      throw new NotFoundException(errorMessages.MELP_NOT_FOUND);\n    }\n\n    // const outcomeMappings = await this.getMelpProgressMarkerMonitorings(\n    //   melpId,\n    //   searchKeyword,\n    //   pageLimit,\n    //   pageIndex,\n    //   sortKey,\n    //   sortDirection,\n    // );\n\n    const outcomeMappings = await this.getMelpProgressMarkerMonitoringsGlobal(\n      melpId,\n      searchKeyword,\n      sortKey,\n      sortDirection,\n    );\n\n    // const { progressMonitoringList, progressMonitoringsTotalCount } =\n    //   await this.getArrayOfObjectsForMelpProgressPM(outcomeMappings);\n\n    const { progressMonitoringList, progressMonitoringsTotalCount } =\n      await this.getArrayOfObjectsForMelpProgressPMGlobal([outcomeMappings]);\n\n    return {\n      ProgressMonitoring: progressMonitoringList.slice(\n        (pageIndex - 1) * pageLimit,\n        pageIndex * pageLimit,\n      ),\n      progressMonitoringsTotalCount,\n      progressMonitoringPageCount: Math.ceil(\n        progressMonitoringsTotalCount / 10,\n      ),\n    };\n  }\n\n  // Create MEL Progress- SRF\n  async createMelProgressSRF(\n    melpId: string,\n    addMelProgressSRF: AddMelProgressSRFDTO,\n    user: any,\n  ) {\n    Logger.debug('MelpService.createMelProgressSRF');\n    const melp = await this.getMelpByMelpId(melpId);\n    if (melp === null) {\n      throw new NotFoundException(errorMessages.MELP_NOT_FOUND);\n    }\n\n    const indicatorMonitoringsList = addMelProgressSRF.indicatorMonitorings.map(\n      (data) => ({ ...data, updatedBy: user._id }),\n    );\n\n    for (const indicatorMonitoring of indicatorMonitoringsList) {\n      await this.melpIndicatorMonitoringModel\n        .findOneAndUpdate(\n          {\n            indicatorMonitoringId: indicatorMonitoring.indicatorMonitoringId,\n            isDeleted: false,\n          },\n          indicatorMonitoring,\n        )\n        .exec();\n    }\n\n    return {\n      message: 'MEL Progress SRF created',\n    };\n  }\n\n  // Create MEL Progress - PM\n  async createMelProgressPM(\n    melpId: string,\n    addMelProgressPM: AddMelProgressPMDTO,\n    user: any,\n  ) {\n    Logger.debug('MelpService.createMelProgressPM');\n    const melp = await this.getMelpByMelpId(melpId);\n    if (melp === null) {\n      throw new NotFoundException(errorMessages.MELP_NOT_FOUND);\n    }\n\n    const progressMarkersList = addMelProgressPM.progressMarkerMonitorings.map(\n      (data) => ({ ...data, updatedBy: user._id }),\n    );\n\n    for (const progressMarker of progressMarkersList) {\n      await this.melpOutcomeProgressMarkersModel\n        .findOneAndUpdate(\n          {\n            progressMarkersId: progressMarker.progressMarkersId,\n            isDeleted: false,\n          },\n          progressMarker,\n        )\n        .exec();\n    }\n\n    return {\n      message: 'MEL Progress PM created',\n    };\n  }\n\n  // Create New MELP - SRF\n  async createCapnetMelpSRF(\n    createMelpSRF: CreateMelpSRFDTO,\n    addResult: AddResultDTO,\n    addIndicator: AddIndicatorDTO,\n    user: any,\n  ) {\n    Logger.debug('MelpService.createCapnetMelpSRF');\n    const existingMelpYear = await this.checkIfMelpYearExists(\n      createMelpSRF.year,\n      CapnetEnum.CAPNET,\n    );\n    if (existingMelpYear) {\n      throw new ConflictException(errorMessages.MELP_YEAR_EXISTS);\n    } else {\n      const approvedStatusId = await this.userService.getStatusId(\n        StatusEnum.APPROVED,\n      );\n      const melp = await this.melpModel.create({\n        year: createMelpSRF.year,\n        melpId: uuidv4(),\n        melpCode: createMelpSRF.melpCode,\n        instituteName: CapnetEnum.CAPNET,\n        statusId: approvedStatusId,\n        createdBy: user._id,\n        updatedBy: user._id,\n      });\n\n      await this.activityLogModel.create({\n        userId: user._id,\n        name: user.fullName,\n        description: `MELP - ${melp.melpCode} created`,\n      });\n\n      const {\n        melpResult,\n        indicatorsCount,\n        impactCount,\n        outcomeCount,\n        outputCount,\n        pageCount,\n      } = await this.addResult(melp.melpId, addResult, addIndicator, user);\n      return {\n        melp,\n        melpResult,\n        indicatorsCount,\n        impactCount,\n        outcomeCount,\n        outputCount,\n        pageCount,\n      };\n    }\n  }\n\n  // Create New Network or Partner MELP - SRF\n  async createNetworkOrPartnerMelpSRF(\n    createNetworkOrPartnerMelpSRF: CreateNetworkMelpSRFDTO,\n    user: any,\n  ) {\n    Logger.debug('MelpService.createNetworkOrPartnerMelpSRF');\n    let instituteName;\n    if (user.networkId !== null && user.partnerId === null) {\n      instituteName = await this.networkService.getNetworkNameById(\n        user.networkId,\n      );\n    } else if (user.partnerId !== null && user.networkId === null) {\n      instituteName = await this.partnerService.getPartnerInstituteNameById(\n        user.partnerId,\n      );\n    }\n\n    const existingMelpYear = await this.checkIfMelpYearExists(\n      createNetworkOrPartnerMelpSRF.year,\n      instituteName,\n    );\n\n    if (existingMelpYear) {\n      throw new ConflictException(errorMessages.MELP_YEAR_EXISTS);\n    } else {\n      const inProgressStatusId = await this.userService.getStatusId(\n        StatusEnum.IN_PROGRESS,\n      );\n      const melp = await this.melpModel.create({\n        year: createNetworkOrPartnerMelpSRF.year,\n        melpId: uuidv4(),\n        melpCode: createNetworkOrPartnerMelpSRF.melpCode,\n        instituteName: instituteName,\n        statusId: inProgressStatusId,\n        networkId: user.networkId,\n        partnerId: user.partnerId,\n        scopeAndPurpose: createNetworkOrPartnerMelpSRF.scopeAndPurpose,\n        createdBy: user._id,\n        updatedBy: user._id,\n      });\n\n      const taskDetailsList = createNetworkOrPartnerMelpSRF.taskDetails.map(\n        (data) => ({\n          ...data,\n          melpId: melp._id,\n          taskDetailsId: uuidv4(),\n          createdBy: user._id,\n          updatedBy: user._id,\n        }),\n      );\n      const melpTasks = await this.melpTaskDetailsModel.insertMany(\n        taskDetailsList,\n      );\n\n      await this.activityLogModel.create({\n        userId: user._id,\n        instituteName,\n        name: user.fullName,\n        description: `MELP - ${melp.melpCode} created`,\n        networkId: user.networkId,\n        partnerId: user.partnerId,\n      });\n\n      return { melp, melpTasks };\n    }\n  }\n\n  // Add New Result to MELP\n  async addResult(\n    melpId: string,\n    addResult: AddResultDTO,\n    addIndicator: AddIndicatorDTO,\n    user: any,\n  ) {\n    Logger.debug('MelpService.addResult');\n    const melp = await this.melpModel\n      .findOne({ melpId: melpId, isDeleted: false })\n      .exec();\n    if (melp === null) {\n      throw new NotFoundException(errorMessages.MELP_NOT_FOUND);\n    }\n\n    const melpResult = await this.melpResultsModel.create({\n      melpId: melp._id,\n      resultId: uuidv4(),\n      resultName: addResult.resultName,\n      objectiveLevel: addResult.objectiveLevel,\n      resultCode: addResult.resultCode,\n      createdBy: user._id,\n      updatedBy: user._id,\n    });\n\n    await this.addActivityLog(user, `Result - ${melpResult.resultCode} added`);\n    const { indicatorsCount, pageCount } = await this.addIndicator(\n      melpResult.resultId,\n      addIndicator,\n      user,\n    );\n    const { impactCount, outcomeCount, outputCount } =\n      await this.getObjectiveLevelCounts(melp.melpId);\n\n    return {\n      melp,\n      melpResult,\n      indicatorsCount,\n      impactCount,\n      outcomeCount,\n      outputCount,\n      pageCount,\n    };\n  }\n\n  // Add New Indicator to Result\n  async addIndicator(\n    resultId: string,\n    addIndicator: AddIndicatorDTO,\n    user: any,\n  ) {\n    Logger.debug('MelpService.addIndicator');\n    const result = await this.melpResultsModel\n      .findOne({ resultId: resultId, isDeleted: false })\n      .exec();\n    if (result === null) {\n      throw new NotFoundException(errorMessages.RESULT_NOT_FOUND);\n    }\n    const melp = await this.melpModel\n      .findOne({ _id: result.melpId, isDeleted: false })\n      .exec();\n    if (melp === null) {\n      throw new NotFoundException(errorMessages.MELP_NOT_FOUND);\n    }\n\n    const resultIndicator = await this.melpResultIndicatorsModel.create({\n      indicatorId: uuidv4(),\n      resultId: result._id,\n      indicatorName: addIndicator.indicatorName,\n      indicatorCode: addIndicator.indicatorCode,\n      definition: addIndicator.definition,\n      completionYear: addIndicator.completionYear,\n      measurementUnit: addIndicator.measurementUnit,\n      cumulativeTarget: addIndicator.cumulativeTarget,\n      sourceOfData: addIndicator.sourceOfData,\n      collectionMethodType: addIndicator.collectionMethodType,\n      collectionMethodName: addIndicator.collectionMethodName,\n      collectionFrequencyType: addIndicator.collectionFrequencyType,\n      collectionFrequencyName: addIndicator.collectionFrequencyName,\n      createdBy: user._id,\n      updatedBy: user._id,\n    });\n\n    const indicatorsMonitoringList = addIndicator.indicatorsMonitoring.map(\n      (data) => ({\n        ...data,\n        indicatorMonitoringId: uuidv4(),\n        resultIndicatorId: resultIndicator._id,\n        createdBy: user._id,\n        updatedBy: user._id,\n      }),\n    );\n    await this.melpIndicatorMonitoringModel.insertMany(\n      indicatorsMonitoringList,\n    );\n    const monitoringRisksList = addIndicator.monitoringRisks.map((data) => ({\n      ...data,\n      indicatorRisksId: uuidv4(),\n      resultIndicatorId: resultIndicator._id,\n      createdBy: user._id,\n      updatedBy: user._id,\n    }));\n    await this.melpIndicatorRisksModel.insertMany(monitoringRisksList);\n    await this.addActivityLog(\n      user,\n      `Indicator - ${resultIndicator.indicatorCode} added`,\n    );\n\n    const indicatorsCount = await this.melpResultIndicatorsModel\n      .find({\n        resultId: result._id,\n      })\n      .count()\n      .exec();\n    const pageCount = await this.melpResultIndicatorsModel\n      .find({\n        resultId: result._id,\n        isDeleted: false,\n      })\n      .count()\n      .exec();\n    const { impactCount, outcomeCount, outputCount } =\n      await this.getObjectiveLevelCounts(melp.melpId);\n    return {\n      melpResult: result,\n      melp,\n      indicatorsCount,\n      impactCount,\n      outcomeCount,\n      outputCount,\n      pageCount,\n    };\n  }\n\n  // Create New Melp - OM\n  async createMelpOM(melpId: string, createMelpOM: CreateMelpOMDTO, user: any) {\n    Logger.debug('MelpService.createMelpOM');\n    const melp = await this.getMelpByMelpId(melpId);\n    if (melp === null) {\n      throw new NotFoundException(errorMessages.MELP_NOT_FOUND);\n    }\n    const melpOM = await this.melpOutcomesModel.create({\n      melpId: melp._id,\n      outcomeId: uuidv4(),\n      outcomeChallenge: createMelpOM.outcomeChallenge,\n      outcomeCode: createMelpOM.outcomeCode,\n      boundaryPartners: createMelpOM.boundaryPartners,\n      progressMarkerCount: createMelpOM.progressMarkerCount,\n      createdBy: user._id,\n      updatedBy: user._id,\n    });\n    const progressMarkersList = createMelpOM.progressMarkers.map((data) => ({\n      ...data,\n      progressMarkersId: uuidv4(),\n      outcomeId: melpOM._id,\n      createdBy: user._id,\n      updatedBy: user._id,\n    }));\n    const progresSMarkers =\n      await this.melpOutcomeProgressMarkersModel.insertMany(\n        progressMarkersList,\n      );\n\n    await this.addActivityLog(\n      user,\n      `Outcome challenge - ${melpOM.outcomeCode} added`,\n    );\n    return progresSMarkers;\n  }\n\n  // Get Global MELP - SRF Indicator Monitoring\n  async getGlobalMelpSRFMonitorings(\n    year: number,\n    searchKeyword: string,\n    pageLimit: number,\n    pageIndex: number,\n    sortKey: string,\n    sortDirection: number,\n  ) {\n    Logger.debug('MelpService.getGlobalMelpSRFMonitorings');\n    const approvedStatusId = await this.userService.getStatusId(\n      StatusEnum.APPROVED,\n    );\n    const melps = await this.melpModel\n      .find({\n        year: year,\n        isDeleted: false,\n        statusId: approvedStatusId,\n      })\n      .exec();\n    if (melps.length === 0) {\n      throw new NotFoundException(errorMessages.MELP_NOT_FOUND);\n    }\n\n    let results = [];\n    for (const melp of melps) {\n      const x = await this.getMelpSRFMonitoringsGlobal(\n        melp.melpId,\n        searchKeyword,\n        sortKey,\n        sortDirection,\n      );\n      results = [...results, x];\n    }\n    console.log('REsults ', results.length);\n    const { indicatorsMonitoringList, indicatorsTotalCount } =\n      await this.getArrayOfObjectsForMelpProgressSRFGlobal(results);\n\n    return {\n      IndicatorsMonitoring: indicatorsMonitoringList.slice(\n        (pageIndex - 1) * pageLimit,\n        pageIndex * pageLimit,\n      ),\n      indicatorsTotalCount,\n      pageCount: Math.ceil(indicatorsTotalCount / 10),\n    };\n  }\n\n  // Get Global MELP - Progress Marker Monitoring\n  async getGlobalMelpProgressMarkerMonitorings(\n    year: number,\n    searchKeyword: string,\n    pageLimit: number,\n    pageIndex: number,\n    sortKey: string,\n    sortDirection: number,\n  ) {\n    Logger.debug('MelpService.getGlobalMelpProgressMarkerMonitorings');\n    const approvedStatusId = await this.userService.getStatusId(\n      StatusEnum.APPROVED,\n    );\n    const melpsList = await this.melpModel\n      .find({\n        year: year,\n        isDeleted: false,\n        statusId: approvedStatusId,\n      })\n      .exec();\n\n    if (melpsList.length === 0) {\n      throw new NotFoundException(errorMessages.MELP_NOT_FOUND);\n    }\n    let outcomeMappings = [];\n    for (const melp of melpsList) {\n      const x = await this.getMelpProgressMarkerMonitoringsGlobal(\n        melp.melpId,\n        searchKeyword,\n        sortKey,\n        sortDirection,\n      );\n      outcomeMappings = [...outcomeMappings, x];\n    }\n    const { progressMonitoringList, progressMonitoringsTotalCount } =\n      await this.getArrayOfObjectsForMelpProgressPMGlobal(outcomeMappings);\n\n    return {\n      ProgressMonitoring: progressMonitoringList.slice(\n        (pageIndex - 1) * pageLimit,\n        pageIndex * pageLimit,\n      ),\n      progressMonitoringsTotalCount,\n      progressMonitoringPageCount: Math.ceil(\n        progressMonitoringsTotalCount / 10,\n      ),\n    };\n  }\n\n  // Get current melp - indicators\n  // async getCurrentMelpIndicators(year: number, user: any, searchKeyword: string,\n  //   pageLimit: number,\n  //   pageIndex: number,\n  //   sortKey: string,\n  //   sortDirection: number\n  //   ){\n  //   Logger.debug('MelpService.getCurrentMelpIndicators')\n  //   const approvedStatusId = await this.userService.getStatusId('Approved');\n  //   let melp;\n  //   if(user.networkId !== null && user.partnerId === null){\n  //     melp = await this.melpModel\n  //     .findOne({\n  //       year: year,\n  //       isDeleted: false,\n  //       statusId: approvedStatusId,\n  //       networkId: user.networkId\n  //     })\n  //     .exec();\n  //   } else if(user.partnerId !== null && user.networkId === null){\n  //     melp = await this.melpModel\n  //     .findOne({\n  //       year: year,\n  //       isDeleted: false,\n  //       statusId: approvedStatusId,\n  //       networkId: user.networkId\n  //     })\n  //     .exec();\n  //   }\n\n  //   const sortQuery = {};\n  //   sortKey = sortKey.length === 0 ? 'updatedAt' : sortKey;\n  //   // sortQuery[sortKey] = sortDirection;\n  //   sortQuery[sortKey] = sortDirection == 1 ? '1' : '-1';\n\n  //   const results = await this.getMelpSRFMonitorings(\n  //     melp.melpId,\n  //       searchKeyword,\n  //       pageLimit,\n  //       pageIndex,\n  //       sortQuery\n  //   )\n\n  //   let output = [];\n  //   for (const result of results) {\n  //     const temp = {};\n  //     temp['resultCode'] = result.resultsList.resultCode;\n  //     temp['indicatorCode'] = result.indicatorsList.indicatorCode;\n  //     temp['indicator'] = result.indicatorsList.indicatorName;\n  //     temp['measurementUnit'] = result.indicatorsList.measurementUnit;\n  //     temp['cumulativeTarget'] = result.indicatorsList.cumulativeTarget;\n  //     temp['baseline'] = result.monitoringsList.baseline;\n  //     temp['target'] = result.monitoringsList.targetAchieved;\n  //     temp['progress'] = result.monitoringsList.progress;\n  //     temp['explaination'] = result.monitoringsList.explaination;\n  //     output = [...output, { ...temp }];\n  //   }\n  //   return {\n  //     IndicatorsMonitoring: output,\n  //   };\n  // }\n\n  // View Network or Partner MELP SRF\n  async viewNetworkOrPartnerMelpSRF(melpId: string) {\n    Logger.debug('MelpService.viewNetworkOrPartnerMelpSRF');\n    const melp = await this.getMelpByMelpId(melpId);\n    if (melp === null) {\n      throw new NotFoundException(errorMessages.MELP_NOT_FOUND);\n    }\n\n    const melpTaskDetails = await this.melpTaskDetailsModel\n      .find({\n        melpId: melp._id,\n      })\n      .exec();\n    return {\n      melp,\n      melpTaskDetails,\n    };\n  }\n\n  // Edit SRF Scope and MEL Tasks\n  async editNetworkSRFScope(\n    melpId: string,\n    editNetworkSRF: EditNetworkMelpSRFDTO,\n    user: any,\n  ) {\n    Logger.debug('MelpService.editNetworkSRFScope');\n    await this.getMelpByMelpId(melpId);\n    const inProgressStatusId = await this.userService.getStatusId(\n      StatusEnum.IN_PROGRESS,\n    );\n    const infoRequestedStatusId = await this.userService.getStatusId(\n      StatusEnum.INFORMATION_REQUESTED,\n    );\n    const updatedMelp = await this.melpModel\n      .findOneAndUpdate(\n        {\n          melpId: melpId,\n          isDeleted: false,\n          statusId: {\n            $in: [inProgressStatusId, infoRequestedStatusId],\n          },\n        },\n        { ...editNetworkSRF, updatedBy: user._id },\n        { new: true },\n      )\n      .exec();\n\n    const taskDetailsList = editNetworkSRF.taskDetails.map((data) => ({\n      ...data,\n    }));\n    for (const taskDetail of taskDetailsList) {\n      await this.melpTaskDetailsModel\n        .updateOne(\n          {\n            melpId: updatedMelp._id,\n            melpTaskId: taskDetail.melpTaskId,\n          },\n          taskDetail,\n        )\n        .exec();\n    }\n\n    await this.addActivityLog(user, `MELP ${updatedMelp.melpCode} updated`);\n    return updatedMelp;\n  }\n\n  async checkIfMelpResultIndicatorCanBeEdited(melpId: string, user: any) {\n    Logger.debug('MelpService.checkIfMelpResultIndicatorCanBeEdited');\n    if (user.partnerId === null && user.networkId === null) {\n      return this.getMelpByMelpId(melpId);\n    } else {\n      const inProgressStatusId = await this.userService.getStatusId(\n        StatusEnum.IN_PROGRESS,\n      );\n      const infoRequestedStatusId = await this.userService.getStatusId(\n        StatusEnum.INFORMATION_REQUESTED,\n      );\n\n      return this.melpModel\n        .findOne({\n          melpId,\n          isDeleted: false,\n          statusId: {\n            $in: [inProgressStatusId, infoRequestedStatusId],\n          },\n        })\n        .exec();\n    }\n  }\n\n  async checkIfResultIsUsedInWorkplanActivity(resultId, user: any) {\n    Logger.debug('MelpService.checkIfResultIsUsedInWorkplanActivity');\n    return this.activityModel\n      .findOne({\n        resultId,\n        networkId: user.networkId,\n        partnerId: user.partnerId,\n        isDeleted: false,\n      })\n      .exec();\n  }\n\n  async checkIfResultIsUsedInProposal(resultId, user: any) {\n    Logger.debug('MelpService.checkIfResultIsUsedInProposal');\n    return this.activityProposalModel\n      .findOne({\n        resultId,\n        networkId: user.networkId,\n        partnerId: user.partnerId,\n        isDeleted: false,\n      })\n      .exec();\n  }\n\n  async checkIfIndicatorIsUsedInWorkplanActivity(indicatorId, user: any) {\n    Logger.debug('MelpService.checkIfIndicatorIsUsedInWorkplanActivity');\n    return this.activityModel\n      .findOne({\n        indicatorId: { $in: indicatorId },\n        networkId: user.networkId,\n        partnerId: user.partnerId,\n        isDeleted: false,\n      })\n      .exec();\n  }\n\n  async checkIfIndicatorIsUsedInProposal(indicatorId, user: any) {\n    Logger.debug('MelpService.checkIfIndicatorIsUsedInProposal');\n    return this.activityProposalModel\n      .findOne({\n        indicatorId: { $in: indicatorId },\n        networkId: user.networkId,\n        partnerId: user.partnerId,\n        isDeleted: false,\n      })\n      .exec();\n  }\n\n  // Edit Result\n  async editResult(\n    resultId: string,\n    melpId: string,\n    editResult: EditResultDTO,\n    user: any,\n  ) {\n    Logger.debug('MelpService.editResult');\n    const result = await this.getResultByResultId(resultId);\n    const melp = await this.checkIfMelpResultIndicatorCanBeEdited(melpId, user);\n    if (melp === null)\n      throw new UnprocessableEntityException('Cannot edit this result');\n    const activity = await this.checkIfResultIsUsedInWorkplanActivity(\n      result._id,\n      user,\n    );\n    if (activity !== null)\n      throw new UnprocessableEntityException('This result cannot be edited');\n    const proposal = await this.checkIfResultIsUsedInProposal(result._id, user);\n    if (proposal !== null)\n      throw new UnprocessableEntityException('This result cannot be edited');\n    const updatedResult = await this.melpResultsModel\n      .findOneAndUpdate(\n        {\n          resultId,\n          isDeleted: false,\n        },\n        { ...editResult, updatedBy: user._id },\n        { new: true },\n      )\n      .exec();\n    await this.addActivityLog(\n      user,\n      `Result - ${updatedResult.resultCode} updated`,\n    );\n    return updatedResult;\n  }\n\n  // Edit Indicators\n  async editIndicator(\n    indicatorId: string,\n    melpId: string,\n    editIndicator: EditIndicatorDTO,\n    user: any,\n  ) {\n    Logger.debug('MelpService.editIndicator');\n    const indicator = await this.getIndicatorByIndicatorId(indicatorId);\n    const melp = await this.checkIfMelpResultIndicatorCanBeEdited(melpId, user);\n    if (melp === null)\n      throw new UnprocessableEntityException('Cannot edit this indicator');\n    const activity = await this.checkIfIndicatorIsUsedInWorkplanActivity(\n      indicator._id,\n      user,\n    );\n    if (activity !== null)\n      throw new UnprocessableEntityException('This indicator cannot be edited');\n    const proposal = await this.checkIfIndicatorIsUsedInProposal(\n      indicator._id,\n      user,\n    );\n    if (proposal !== null)\n      throw new UnprocessableEntityException('This indicator cannot be edited');\n    const updatedIndicator = await this.melpResultIndicatorsModel\n      .findOneAndUpdate(\n        {\n          indicatorId,\n          isDeleted: false,\n        },\n        { ...editIndicator, updatedBy: user._id },\n        { new: true },\n      )\n      .exec();\n\n    // Updating indicator monitoring one by one & frontend should send indicatorMonitoringId(uuid) to update indicators monitoring\n    const indicatorsMonitoringList = editIndicator.indicatorsMonitoring.map(\n      (data) => ({ ...data, updatedBy: user._id }),\n    );\n    for (const indicatorMonitoring of indicatorsMonitoringList) {\n      if (indicatorMonitoring.indicatorMonitoringId !== undefined) {\n        await this.melpIndicatorMonitoringModel\n          .updateOne(\n            {\n              resultIndicatorId: updatedIndicator._id,\n              indicatorMonitoringId: indicatorMonitoring.indicatorMonitoringId,\n              isDeleted: false,\n            },\n            indicatorMonitoring,\n          )\n          .exec();\n      } else {\n        await this.melpIndicatorMonitoringModel.create({\n          ...indicatorMonitoring,\n          indicatorMonitoringId: uuidv4(),\n          resultIndicatorId: updatedIndicator._id,\n          createdBy: user._id,\n        });\n      }\n    }\n\n    // Updating monitoring risks one by one & frontend should send indicatorRisksId(uuid) to update monitoring risks\n    const monitoringRisksList = editIndicator.monitoringRisks.map((data) => ({\n      ...data,\n      updatedBy: user._id,\n    }));\n    for (const monitoringRisk of monitoringRisksList) {\n      if (monitoringRisk.indicatorRisksId !== undefined) {\n        await this.melpIndicatorRisksModel\n          .updateOne(\n            {\n              resultIndicatorId: updatedIndicator._id,\n              indicatorRisksId: monitoringRisk.indicatorRisksId,\n              isDeleted: false,\n            },\n            monitoringRisk,\n          )\n          .exec();\n      } else {\n        await this.melpIndicatorRisksModel.create({\n          ...monitoringRisk,\n          indicatorRisksId: uuidv4(),\n          resultIndicatorId: updatedIndicator._id,\n          createdBy: user._id,\n        });\n      }\n    }\n\n    await this.addActivityLog(\n      user,\n      `Indicator - ${updatedIndicator.indicatorCode} updated`,\n    );\n    return updatedIndicator;\n  }\n\n  // Edit Outcome Mapping\n  async editOM(\n    outcomeId: string,\n    melpId: string,\n    editOM: EditOmDTO,\n    user: any,\n  ) {\n    Logger.debug('MelpService.editOM');\n    await this.getOutcomeByOutcomeId(outcomeId);\n    const melp = await this.checkIfMelpResultIndicatorCanBeEdited(melpId, user);\n    if (melp === null)\n      throw new UnprocessableEntityException(\n        'Cannot edit this outcome challenge',\n      );\n    const updatedOM = await this.melpOutcomesModel\n      .findOneAndUpdate(\n        {\n          outcomeId,\n          isDeleted: false,\n        },\n        { ...editOM, updatedBy: user._id },\n        { new: true },\n      )\n      .exec();\n\n    // Updating progress markers one by one & frontend should send progressMarkersId(uuid) to update progress markers\n    const progressMarkersList = editOM.progressMarkers.map((data) => ({\n      ...data,\n      updatedBy: user._id,\n    }));\n    for (const marker of progressMarkersList) {\n      if (marker.progressMarkersId !== undefined) {\n        await this.melpOutcomeProgressMarkersModel\n          .updateOne(\n            {\n              outcomeId: updatedOM._id,\n              progressMarkersId: marker.progressMarkersId,\n              isDeleted: false,\n            },\n            marker,\n          )\n          .exec();\n      } else {\n        await this.melpOutcomeProgressMarkersModel.create({\n          ...marker,\n          progressMarkersId: uuidv4(),\n          outcomeId: updatedOM._id,\n          createdBy: user._id,\n        });\n      }\n    }\n\n    await this.addActivityLog(\n      user,\n      `Outcome Challenge - ${updatedOM.outcomeCode} updated`,\n    );\n    return updatedOM;\n  }\n\n  async checkIfMelpResultIndicatorCanBeDeleted(melpId: string, user: any) {\n    Logger.debug('MelpService.checkIfMelpResultIndicatorCanBeDeleted');\n    if (user.partnerId === null && user.networkId === null) {\n      return this.getMelpByMelpId(melpId);\n    } else {\n      const inProgressStatusId = await this.userService.getStatusId(\n        StatusEnum.IN_PROGRESS,\n      );\n      const infoRequestedStatusId = await this.userService.getStatusId(\n        StatusEnum.INFORMATION_REQUESTED,\n      );\n      const deniedStatusId = await this.userService.getStatusId(\n        StatusEnum.DENIED,\n      );\n      return this.melpModel\n        .findOne({\n          melpId,\n          isDeleted: false,\n          statusId: {\n            $in: [inProgressStatusId, infoRequestedStatusId, deniedStatusId],\n          },\n        })\n        .exec();\n    }\n  }\n\n  // Delete MELP\n  async deleteMelp(melpId: string, user: any) {\n    Logger.debug('MelpService.deleteMelp');\n    const melp = await this.checkIfMelpResultIndicatorCanBeEdited(melpId, user);\n    if (melp === null)\n      throw new UnprocessableEntityException(errorMessages.CANNOT_DELETE_MELP);\n\n    const resultsCount = await this.melpResultsModel\n      .find({\n        melpId: melp._id,\n        isDeleted: false,\n      })\n      .count()\n      .exec();\n\n    const outcomesCount = await this.melpOutcomesModel\n      .find({\n        melpId: melp._id,\n        isDeleted: false,\n      })\n      .count()\n      .exec();\n    let deletedMelp;\n    if (resultsCount > 1 || outcomesCount > 0) {\n      throw new BadRequestException(errorMessages.DELETE_RESULTS_AND_OUTCOMES);\n    } else if (resultsCount === 1) {\n      const result = await this.melpResultsModel\n        .findOne({\n          melpId: melp._id,\n          isDeleted: false,\n        })\n        .exec();\n\n      // const indicator = await this.melpResultIndicatorsModel\n      //   .findOne({\n      //     resultId:result._id,\n      //     isDeleted: false\n      //   })\n      //   .exec();\n\n      const activityForResult =\n        await this.checkIfResultIsUsedInWorkplanActivity(result._id, user);\n      if (activityForResult !== null)\n        throw new UnprocessableEntityException(\n          errorMessages.CANNOT_DELETE_RESULT,\n        );\n\n      const proposalForResult = await this.checkIfResultIsUsedInProposal(\n        result._id,\n        user,\n      );\n      if (proposalForResult !== null)\n        throw new UnprocessableEntityException(\n          errorMessages.CANNOT_DELETE_RESULT,\n        );\n\n      deletedMelp = await this.melpModel\n        .findOneAndUpdate(\n          {\n            melpId: melpId,\n            isDeleted: false,\n          },\n          { isDeleted: true, updatedBy: user._id },\n          { new: true },\n        )\n        .exec();\n\n      const deletedResult = await this.melpResultsModel\n        .findOneAndUpdate(\n          {\n            melpId: deletedMelp._id,\n            isDeleted: false,\n          },\n          { isDeleted: true, updatedBy: user._id },\n          { new: true },\n        )\n        .exec();\n\n      const deletedIndicator = await this.melpResultIndicatorsModel\n        .findOneAndUpdate(\n          {\n            resultId: deletedResult._id,\n            isDeleted: false,\n          },\n          { isDeleted: true, updatedBy: user._id },\n          { new: true },\n        )\n        .exec();\n\n      await this.melpIndicatorMonitoringModel\n        .updateMany(\n          {\n            resultIndicatorId: deletedIndicator._id,\n            isDeleted: false,\n          },\n          { $set: { isDeleted: true, updatedBy: user._id } },\n        )\n        .exec();\n\n      await this.melpIndicatorRisksModel\n        .updateMany(\n          {\n            resultIndicatorId: deletedIndicator._id,\n            isDeleted: false,\n          },\n          { $set: { isDeleted: true, updatedBy: user._id } },\n        )\n        .exec();\n    }\n    await this.addActivityLog(user, `MELP - ${melp.melpCode} deleted`);\n    return deletedMelp;\n  }\n\n  async deleteResult(resultId: string, melpId: string, user: any) {\n    Logger.debug('MelpService.deleteResult');\n    const melp = await this.checkIfMelpResultIndicatorCanBeEdited(melpId, user);\n    if (melp === null)\n      throw new UnprocessableEntityException('Result cannot be deleted');\n    const result = await this.getResultByResultId(resultId);\n    const activityForResult = await this.checkIfResultIsUsedInWorkplanActivity(\n      result._id,\n      user,\n    );\n    if (activityForResult !== null)\n      throw new UnprocessableEntityException(\n        errorMessages.CANNOT_DELETE_RESULT,\n      );\n\n    const proposalForResult = await this.checkIfResultIsUsedInProposal(\n      result._id,\n      user,\n    );\n    if (proposalForResult !== null)\n      throw new UnprocessableEntityException(\n        errorMessages.CANNOT_DELETE_RESULT,\n      );\n\n    const resultsCount = await this.melpResultsModel\n      .find({\n        melpId: melp._id,\n        isDeleted: false,\n      })\n      .count()\n      .exec();\n    const indicatorsCount = await this.melpResultIndicatorsModel\n      .find({\n        resultId: result._id,\n        isDeleted: false,\n      })\n      .count()\n      .exec();\n\n    let deletedResult;\n    if (indicatorsCount > 1) {\n      throw new BadRequestException(errorMessages.DELETE_INDICATORS);\n    } else if (resultsCount === 1) {\n      throw new UnprocessableEntityException(\n        errorMessages.CANNOT_DELETE_RESULT,\n      );\n    } else if (indicatorsCount === 1 && resultsCount > 1) {\n      const indicator = await this.melpResultIndicatorsModel\n        .findOneAndUpdate(\n          {\n            resultId: result._id,\n            isDeleted: false,\n          },\n          { isDeleted: true, updatedBy: user._id },\n          { new: true },\n        )\n        .exec();\n\n      await this.melpIndicatorMonitoringModel\n        .updateMany(\n          {\n            resultIndicatorId: indicator._id,\n            isDeleted: false,\n          },\n          { $set: { isDeleted: true, updatedBy: user._id } },\n        )\n        .exec();\n\n      await this.melpIndicatorRisksModel\n        .updateMany(\n          {\n            resultIndicatorId: indicator._id,\n            isDeleted: false,\n          },\n          { $set: { isDeleted: true, updatedBy: user._id } },\n        )\n        .exec();\n\n      deletedResult = await this.melpResultsModel\n        .findOneAndUpdate(\n          {\n            resultId: resultId,\n            isDeleted: false,\n          },\n          { isDeleted: true, updatedBy: user._id },\n          { new: true },\n        )\n        .exec();\n    }\n    await this.addActivityLog(user, `Result - ${result.resultCode} deleted`);\n    return deletedResult;\n  }\n\n  async deleteIndicator(\n    indicatorId: string,\n    resultId: string,\n    melpId: string,\n    user: any,\n  ) {\n    Logger.debug('MelpService.deleteIndicator');\n    const melp = await this.checkIfMelpResultIndicatorCanBeEdited(melpId, user);\n    if (melp === null)\n      throw new UnprocessableEntityException('Indicator cannot be deleted');\n    const indicator = await this.getIndicatorByIndicatorId(indicatorId);\n    const result = await this.getResultByResultId(resultId);\n    const activityForIndicator =\n      await this.checkIfIndicatorIsUsedInWorkplanActivity(indicator._id, user);\n    if (activityForIndicator !== null)\n      throw new UnprocessableEntityException(\n        'This indicator cannot be deleted',\n      );\n\n    const proposalForIndicator = await this.checkIfIndicatorIsUsedInProposal(\n      indicator._id,\n      user,\n    );\n    if (proposalForIndicator !== null)\n      throw new UnprocessableEntityException(\n        'This indicator cannot be deleted',\n      );\n\n    const indicatorsCount = await this.melpResultIndicatorsModel\n      .find({\n        resultId: result._id,\n        isDeleted: false,\n      })\n      .count()\n      .exec();\n\n    if (indicatorsCount === 1)\n      throw new UnprocessableEntityException(\"Indicator can't be deleted\");\n\n    await this.melpIndicatorMonitoringModel\n      .updateMany(\n        {\n          resultIndicatorId: indicator._id,\n          isDeleted: false,\n        },\n        { $set: { isDeleted: true, updatedBy: user._id } },\n      )\n      .exec();\n\n    await this.melpIndicatorRisksModel\n      .updateMany(\n        {\n          resultIndicatorId: indicator._id,\n          isDeleted: false,\n        },\n        { $set: { isDeleted: true, updatedBy: user._id } },\n      )\n      .exec();\n\n    const deletedIndicator = await this.melpResultIndicatorsModel\n      .findOneAndUpdate(\n        {\n          indicatorId,\n          isDeleted: false,\n        },\n        { isDeleted: true, updatedBy: user._id },\n        { new: true },\n      )\n      .exec();\n\n    await this.addActivityLog(\n      user,\n      `Indicator - ${indicator.indicatorCode} deleted`,\n    );\n    return deletedIndicator;\n  }\n\n  // Delete Outcome Mapping\n  async deleteOM(outcomeId: string, melpId: string, user: any) {\n    Logger.debug('MelpService.deleteOM');\n    const outcome = await this.getOutcomeByOutcomeId(outcomeId);\n    const melp = await this.checkIfMelpResultIndicatorCanBeEdited(melpId, user);\n    if (melp === null)\n      throw new UnprocessableEntityException(\n        'Outcome Challenge cannot be deleted',\n      );\n    await this.melpOutcomeProgressMarkersModel\n      .updateMany(\n        {\n          outcomeId: outcome._id,\n          isDeleted: false,\n        },\n        { $set: { isDeleted: true, updatedBy: user._id } },\n      )\n      .exec();\n\n    const deletedOM = await this.melpOutcomesModel\n      .findOneAndUpdate(\n        { outcomeId: outcomeId, isDeleted: false },\n        { isDeleted: true, updatedBy: user._id },\n        { new: true },\n      )\n      .exec();\n\n    await this.addActivityLog(\n      user,\n      `Outcome Challenge - ${outcome.outcomeCode} deleted`,\n    );\n\n    return deletedOM;\n  }\n\n  // Delete Indicators Monitoring\n  async deleteIndicatorsMonitoring(\n    indicatorMonitoringId: string,\n    melpId: string,\n    user: any,\n  ) {\n    Logger.debug('MelpService.deleteIndicatorsMonitoring');\n    const indicatorMonitoring = await this.melpIndicatorMonitoringModel\n      .findOne({\n        indicatorMonitoringId: indicatorMonitoringId,\n        isDeleted: false,\n      })\n      .exec();\n\n    if (indicatorMonitoring === null) {\n      throw new NotFoundException(errorMessages.INDICATOR_MONITORING_NOT_FOUND);\n    }\n\n    const melp = await this.checkIfMelpResultIndicatorCanBeEdited(melpId, user);\n    if (melp === null)\n      throw new UnprocessableEntityException(\n        'Indicator Monitoring cannot be deleted',\n      );\n\n    const deletedIndicatorsMonitoring = await this.melpIndicatorMonitoringModel\n      .findOneAndUpdate(\n        { indicatorMonitoringId: indicatorMonitoringId, isDeleted: false },\n        { isDeleted: true, updatedBy: user._id },\n        { new: true },\n      )\n      .exec();\n\n    await this.addActivityLog(user, `Indicators Monitoring deleted`);\n    return deletedIndicatorsMonitoring;\n  }\n\n  // Delete Monitoring Risk\n  async deleteMonitoringRisk(\n    monitoringRiskId: string,\n    melpId: string,\n    user: any,\n  ) {\n    Logger.debug('MelpService.deleteMonitoringRisk');\n    const monitoringRisk = await this.melpIndicatorRisksModel\n      .findOne({ indicatorRisksId: monitoringRiskId, isDeleted: false })\n      .exec();\n\n    if (monitoringRisk === null) {\n      throw new NotFoundException(errorMessages.INDICATOR_RISK_NOT_FOUND);\n    }\n    const melp = await this.checkIfMelpResultIndicatorCanBeEdited(melpId, user);\n    if (melp === null)\n      throw new UnprocessableEntityException(\n        'Monitoring Risk cannot be deleted',\n      );\n\n    const deletedMonitoringRisk = await this.melpIndicatorRisksModel\n      .findOneAndUpdate(\n        { indicatorRisksId: monitoringRiskId, isDeleted: false },\n        { isDeleted: true, updatedBy: user._id },\n        { new: true },\n      )\n      .exec();\n\n    await this.addActivityLog(user, `Monitoring risk  deleted`);\n    return deletedMonitoringRisk;\n  }\n\n  // Delete Progress Marker\n  async deleteProgressMarker(\n    progressMarkerId: string,\n    melpId: string,\n    user: any,\n  ) {\n    Logger.debug('MelpService.deleteProgressMarker');\n    const progressMarker = await this.melpOutcomeProgressMarkersModel\n      .findOne({ progressMarkersId: progressMarkerId, isDeleted: false })\n      .exec();\n\n    if (progressMarker === null) {\n      throw new NotFoundException(errorMessages.PROGRESS_MARKER_NOT_FOUND);\n    }\n\n    const melp = await this.checkIfMelpResultIndicatorCanBeEdited(melpId, user);\n    if (melp === null)\n      throw new UnprocessableEntityException(\n        'Progress Marker cannot be deleted',\n      );\n\n    const deletedProgressMarker = await this.melpOutcomeProgressMarkersModel\n      .findOneAndUpdate(\n        { progressMarkersId: progressMarkerId, isDeleted: false },\n        { isDeleted: true, updatedBy: user._id },\n        { new: true },\n      )\n      .exec();\n\n    await this.addActivityLog(\n      user,\n      `Progress Marker - ${progressMarker.progressMarkerCode} deleted`,\n    );\n    return deletedProgressMarker;\n  }\n\n  async updateGeneralUserMelpStatus(melpId, statusId) {\n    Logger.debug('MelpService.updateGeneralUserMelpStatus');\n    return this.melpModel\n      .findOneAndUpdate(\n        { melpId, isDeleted: false },\n        { statusId },\n        { new: true },\n      )\n      .exec();\n  }\n\n  async updateApprovedCount(count: number, melpId: string) {\n    Logger.debug('MelpService.updateApprovedCount');\n    return this.melpModel\n      .findOneAndUpdate(\n        { melpId, isDeleted: false },\n        { approvedCount: count },\n        { new: true },\n      )\n      .exec();\n  }\n\n  async setSubmittedAtTime(melpId: string, submittedAt: Date) {\n    Logger.debug('MelpService.setSubmittedAtTime');\n    return this.melpModel\n      .findOneAndUpdate(\n        {\n          melpId,\n          isDeleted: false,\n        },\n        { submittedAt },\n        { new: true },\n      )\n      .exec();\n  }\n\n  async setApprovedAtTime(melpId: string, approvedAt: Date) {\n    Logger.debug('MelpService.setApprovedAtTime');\n    return this.melpModel\n      .findOneAndUpdate(\n        {\n          melpId,\n          isDeleted: false,\n        },\n        { approvedAt },\n        { new: true },\n      )\n      .exec();\n  }\n\n  async worksheetCreation(\n    resultsSheet: exceljs.Worksheet,\n    risksSheet: exceljs.Worksheet,\n    outcomesSheet: exceljs.Worksheet,\n  ) {\n    Logger.debug('MelpService.worksheetCreation');\n    resultsSheet.columns = [\n      { header: 'MelpCode', key: 'melpCode', width: 20 },\n      { header: 'Year', key: 'year', width: 6 },\n      { header: 'InstituteName', key: 'instituteName', width: 20 },\n      { header: 'ResultCode', key: 'resultCode', width: 10 },\n      { header: 'ObjectiveLevel', key: 'objectiveLevel', width: 15 },\n      { header: 'ResultDescription', key: 'resultDescription', width: 30 },\n      { header: 'IndicatorCode', key: 'indicatorCode', width: 15 },\n      { header: 'IndicatorName', key: 'indicatorName', width: 15 },\n      { header: 'IndicatorDefinition', key: 'indicatorDefinition', width: 30 },\n      { header: 'MeasurementUnit', key: 'measurementUnit', width: 10 },\n      { header: 'CumulativeTarget', key: 'cumulativeTarget', width: 20 },\n      {\n        header: 'YearOfTargetCompletion',\n        key: 'yearOfTargetCompletion',\n        width: 20,\n      },\n      {\n        header: 'DataCollectionSource',\n        key: 'dataCollectionSource',\n        width: 20,\n      },\n      {\n        header: 'DataCollectionMethodType',\n        key: 'dataCollectionMethodType',\n        width: 20,\n      },\n      {\n        header: 'DataCollectionMethodName',\n        key: 'dataCollectionMethodName',\n        width: 20,\n      },\n      {\n        header: 'DataCollectionFrequencyType',\n        key: 'dataCollectionFrequencyType',\n        width: 20,\n      },\n      {\n        header: 'DataCollectionFrequencyName',\n        key: 'dataCollectionFrequencyName',\n        width: 20,\n      },\n      {\n        header: 'IndicatorsMonitoringYear',\n        key: 'indicatorsMonitoringYear',\n        width: 20,\n      },\n      { header: 'TargetAchieved', key: 'targetAchieved', width: 20 },\n      { header: 'Progress', key: 'progress', width: 20 },\n      { header: 'Baseline', key: 'baseline', width: 20 },\n      {\n        header: 'ExplainationOfResultsAchieved',\n        key: 'xxplainationOfResultsAchieved',\n        width: 20,\n      },\n    ];\n\n    risksSheet.columns = [\n      { header: 'MelpCode', key: 'melpCode', width: 20 },\n      { header: 'Year', key: 'year', width: 6 },\n      { header: 'InstituteName', key: 'instituteName', width: 20 },\n      { header: 'ResultCode', key: 'resultCode', width: 10 },\n      { header: 'ObjectiveLevel', key: 'objectiveLevel', width: 15 },\n      { header: 'ResultDescription', key: 'resultDescription', width: 30 },\n      { header: 'IndicatorCode', key: 'indicatorCode', width: 15 },\n      { header: 'IndicatorName', key: 'indicatorName', width: 15 },\n      { header: 'IndicatorDefinition', key: 'indicatorDefinition', width: 30 },\n      { header: 'MeasurementUnit', key: 'measurementUnit', width: 10 },\n      { header: 'CumulativeTarget', key: 'cumulativeTarget', width: 20 },\n      {\n        header: 'YearOfTargetCompletion',\n        key: 'yearOfTargetCompletion',\n        width: 20,\n      },\n      {\n        header: 'DataCollectionSource',\n        key: 'dataCollectionSource',\n        width: 20,\n      },\n      {\n        header: 'DataCollectionMethodType',\n        key: 'dataCollectionMethodType',\n        width: 20,\n      },\n      {\n        header: 'DataCollectionMethodName',\n        key: 'dataCollectionMethodName',\n        width: 20,\n      },\n      {\n        header: 'DataCollectionFrequencyType',\n        key: 'dataCollectionFrequencyType',\n        width: 20,\n      },\n      {\n        header: 'DataCollectionFrequencyName',\n        key: 'dataCollectionFrequencyName',\n        width: 20,\n      },\n      {\n        header: 'Issues',\n        key: 'issues',\n        width: 20,\n      },\n      { header: 'MitigatingActions', key: 'mitigatingActions', width: 20 },\n    ];\n\n    outcomesSheet.columns = [\n      { header: 'MelpCode', key: 'melpCode', width: 20 },\n      { header: 'Year', key: 'year', width: 6 },\n      { header: 'InstituteName', key: 'instituteName', width: 20 },\n      { header: 'OC-Code', key: 'ocCode', width: 10 },\n      { header: 'OutcomeChallenge', key: 'outcomeChallenge', width: 20 },\n      { header: 'BoundaryPartners', key: 'boundaryPartners', width: 20 },\n      { header: 'PM-Code', key: 'pmCode', width: 10 },\n      { header: 'ProgressMarker', key: 'progressMarker', width: 20 },\n      { header: 'Priority', key: 'priority', width: 20 },\n      {\n        header: 'ProgressMonitoringQ2',\n        key: 'progressMonitoringQ2',\n        width: 20,\n      },\n      {\n        header: 'ProgressMonitoringQ4',\n        key: 'progressMonitoringQ4',\n        width: 20,\n      },\n      { header: 'DescriptionOfChange', key: 'descriptionOfChange', width: 20 },\n      { header: 'ContributingFactors', key: 'contributingFactors', width: 20 },\n      { header: 'SourceOfEvidence', key: 'sourceOfEvidence', width: 20 },\n      { header: 'UnintendedChanges', key: 'unintendedChanges', width: 20 },\n    ];\n\n    resultsSheet.addRow({\n      melpCode: 'MelpCode',\n      year: 'Year',\n      instituteName: 'Institute Name',\n      resultCode: 'ResultCode',\n      objectiveLevel: 'Objective Level',\n      resultDescription: 'Description',\n      indicatorCode: 'Indicator Code',\n      indicatorName: 'Indicator Name',\n      indicatorDefinition: ' Indicator Definition',\n      measurementUnit: 'Measurement Unit',\n      cumulativeTarget: 'Cumulative Target',\n      yearOfTargetCompletion: 'Target Completion Year',\n      dataCollectionSource: 'Data Collection Source',\n      dataCollectionMethodType: 'Data Collection Method Type',\n      dataCollectionMethodName: 'Data Collection Method Name',\n      dataCollectionFrequencyType: 'DataCollectionFrequencyType',\n      dataCollectionFrequencyName: 'DataCollectionFrequencyName',\n      indicatorsMonitoringYear: 'IndicatorsMonitoringYear',\n      targetAchieved: 'TargetAchieved',\n      progress: 'Progress',\n      baseline: 'Baseline',\n      explainationOfResultsAchieved: 'Explaination',\n    });\n\n    risksSheet.addRow({\n      melpCode: 'MelpCode',\n      year: 'Year',\n      instituteName: 'Institute Name',\n      resultCode: 'ResultCode',\n      objectiveLevel: 'Objective Level',\n      resultDescription: 'Description',\n      indicatorCode: 'Indicator Code',\n      indicatorName: 'Indicator Name',\n      indicatorDefinition: ' Indicator Definition',\n      measurementUnit: 'Measurement Unit',\n      cumulativeTarget: 'Cumulative Target',\n      yearOfTargetCompletion: 'Target Completion Year',\n      dataCollectionSource: 'Data Collection Source',\n      dataCollectionMethodType: 'Data Collection Method Type',\n      dataCollectionMethodName: 'Data Collection Method Name',\n      dataCollectionFrequencyType: 'DataCollectionFrequencyType',\n      dataCollectionFrequencyName: 'DataCollectionFrequencyName',\n      issues: 'Issues',\n      mitigatingActions: 'Mitigating Actions',\n    });\n\n    outcomesSheet.addRow({\n      melpCode: 'MelpCode',\n      year: 'Year',\n      instituteName: 'Institute Name',\n      ocCode: 'OC Code',\n      outcomeChallenge: 'Outcome Challenge',\n      boundaryPartners: 'Boundary Partners',\n      pmCode: 'PM Code',\n      progressMarker: 'Progress Marker',\n      priority: 'Priority',\n      progressMonitoringQ2: 'ProgressMonitoringQ2',\n      progressMonitoringQ4: 'ProgressMonitoringQ4',\n      descriptionOfChange: 'DescriptionOfChange',\n      contributingFactors: 'ContributingFactors',\n      sourceOfEvidence: 'SourceOfEvidence',\n      unintendedChanges: 'UnintendedChanges',\n    });\n    resultsSheet.getRow(1).eachCell((cell) => {\n      cell.font = { bold: true };\n    });\n\n    risksSheet.getRow(1).eachCell((cell) => {\n      cell.font = { bold: true };\n    });\n\n    outcomesSheet.getRow(1).eachCell((cell) => {\n      cell.font = { bold: true };\n    });\n  }\n\n  // Download MELP Common Logic\n  async downloadMelp(\n    // res,\n    melpId: string,\n    resultsSheet: exceljs.Worksheet,\n    risksSheet: exceljs.Worksheet,\n    outcomesSheet: exceljs.Worksheet,\n    resultCount: number,\n    riskCount: number,\n    outcomeCount: number,\n  ) {\n    Logger.debug('MelpService.downloadMelp');\n    const melp = await this.melpModel.findOne({ melpId }).exec();\n    const results = await this.melpResultsModel\n      .find({ melpId: melp._id, isDeleted: false })\n      .exec();\n    for (const result of results) {\n      const indicators = await this.melpResultIndicatorsModel\n        .find({\n          resultId: result._id,\n          isDeleted: false,\n        })\n        .exec();\n\n      for (const indicator of indicators) {\n        const indicatorMonitorings = await this.melpIndicatorMonitoringModel\n          .find({\n            resultIndicatorId: indicator._id,\n            isDeleted: false,\n          })\n          .exec();\n\n        for (const monitoring of indicatorMonitorings) {\n          resultsSheet.getRow(resultCount).values = {\n            melpCode: melp.melpCode,\n            year: melp.year,\n            instituteName: melp.instituteName,\n            resultCode: result.resultCode,\n            objectiveLevel: result.objectiveLevel,\n            resultDescription: result.resultName,\n            indicatorCode: indicator.indicatorCode,\n            indicatorName: indicator.indicatorName,\n            indicatorDefinition: indicator.definition,\n            measurementUnit: indicator.measurementUnit,\n            cumulativeTarget: indicator.cumulativeTarget,\n            yearOfTargetCompletion: indicator.completionYear,\n            dataCollectionSource: indicator.sourceOfData,\n            dataCollectionMethodType: indicator.collectionMethodType,\n            dataCollectionMethodName: indicator.collectionMethodName,\n            dataCollectionFrequencyType: indicator.collectionFrequencyType,\n            dataCollectionFrequencyName:\n              indicator.collectionFrequencyName.length > 0\n                ? indicator.collectionFrequencyName\n                : 'NA',\n            indicatorsMonitoringYear: monitoring.year,\n            targetAchieved: monitoring.targetAchieved,\n            progress: monitoring.progress,\n            baseline: monitoring.baseline,\n            explainationOfResultsAchieved: monitoring.explaination,\n          };\n          resultCount++;\n        }\n\n        const monitoringRisks = await this.melpIndicatorRisksModel\n          .find({\n            resultIndicatorId: indicator._id,\n            isDeleted: false,\n          })\n          .exec();\n\n        for (const risk of monitoringRisks) {\n          risksSheet.getRow(riskCount).values = {\n            melpCode: melp.melpCode,\n            year: melp.year,\n            instituteName: melp.instituteName,\n            resultCode: result.resultCode,\n            objectiveLevel: result.objectiveLevel,\n            resultDescription: result.resultName,\n            indicatorCode: indicator.indicatorCode,\n            indicatorName: indicator.indicatorName,\n            indicatorDefinition: indicator.definition,\n            measurementUnit: indicator.measurementUnit,\n            cumulativeTarget: indicator.cumulativeTarget,\n            yearOfTargetCompletion: indicator.completionYear,\n            dataCollectionSource: indicator.sourceOfData,\n            dataCollectionMethodType: indicator.collectionMethodType,\n            dataCollectionMethodName: indicator.collectionMethodName,\n            dataCollectionFrequencyType: indicator.collectionFrequencyType,\n            dataCollectionFrequencyName:\n              indicator.collectionFrequencyName.length > 0\n                ? indicator.collectionFrequencyName\n                : 'NA',\n            issues: risk.issue,\n            mitigatingActions: risk.mitigatingAction,\n          };\n          riskCount++;\n        }\n      }\n    }\n\n    const outcomes = await this.melpOutcomesModel\n      .find({ melpId: melp._id, isDeleted: false })\n      .exec();\n\n    for (const outcome of outcomes) {\n      const markers = await this.melpOutcomeProgressMarkersModel\n        .find({ outcomeId: outcome._id, isDeleted: false })\n        .exec();\n      console.log('Markers ', markers);\n      for (const marker of markers) {\n        let partners = '';\n        for (let i = 0; i < outcome.boundaryPartners.length; i++) {\n          if (i === outcome.boundaryPartners.length - 1) {\n            partners = partners + outcome.boundaryPartners[i] + '.';\n          } else {\n            partners = partners + outcome.boundaryPartners[i] + ', ';\n          }\n        }\n\n        const progressMonitoringQ2 = await this.getProgressMonitoring(\n          marker.progressMonitoringQ2,\n        );\n        const progressMonitoringQ4 = await this.getProgressMonitoring(\n          marker.progressMonitoringQ4,\n        );\n\n        const progressQ2 =\n          progressMonitoringQ2 === null\n            ? ' '\n            : progressMonitoringQ2.progressMonitoring;\n\n        const progressQ4 =\n          progressMonitoringQ4 === null\n            ? ' '\n            : progressMonitoringQ4.progressMonitoring;\n        console.log('Evidence ', marker.sourceOfEvidence);\n        outcomesSheet.getRow(outcomeCount).values = {\n          melpCode: melp.melpCode,\n          year: melp.year,\n          instituteName: melp.instituteName,\n          ocCode: outcome.outcomeCode,\n          outcomeChallenge: outcome.outcomeChallenge,\n          boundaryPartners: partners,\n          pmCode: marker.progressMarkerCode,\n          progressMarker: marker.progressMarker,\n          priority: await this.getPriority(marker.priorityId),\n          progressMonitoringQ2: progressQ2,\n          progressMonitoringQ4: progressQ4,\n          descriptionOfChange: marker.descriptionOfChange,\n          contributingFactors: marker.contributingFactors,\n          sourceOfEvidence: marker.sourceOfEvidence,\n          unintendedChanges: marker.unintendedChanges,\n        };\n        outcomeCount++;\n      }\n    }\n\n    return {\n      resultsCount: resultCount,\n      risksCount: riskCount,\n      outcomesCount: outcomeCount,\n    };\n  }\n\n  // Download Individual MELP\n  async downloadIndividualMelp(res, melpId: string) {\n    Logger.debug('MelpService.downloadIndividualMelp');\n    const workbook = new exceljs.Workbook();\n    const melp = await this.melpModel\n      .findOne({ melpId, isDeleted: false })\n      .exec();\n    const resultsSheet = workbook.addWorksheet(\n      melp.melpCode + '-Results - Indicators Monitoring',\n    );\n    const risksSheet = workbook.addWorksheet(\n      melp.melpCode + '-Results - Risks Monitoring',\n    );\n    const outcomesSheet = workbook.addWorksheet(melp.melpCode + '-Outcomes');\n    const resultCount = 2,\n      riskCount = 2,\n      outcomeCount = 2;\n    await this.worksheetCreation(resultsSheet, risksSheet, outcomesSheet);\n    await this.downloadMelp(\n      // res,\n      melpId,\n      resultsSheet,\n      risksSheet,\n      outcomesSheet,\n      resultCount,\n      riskCount,\n      outcomeCount,\n    );\n    res.set({\n      'Access-Control-Expose-Headers': 'Content-Disposition',\n      'Content-Disposition': 'attachment; filename=' + melp.melpCode + '.xlsx',\n    });\n    res.contentType(\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    );\n    await workbook.xlsx.write(res);\n  }\n\n  async commonFunctionForMultipleDownload(\n    res,\n    year,\n    melpList: Melp[],\n    resultsSheet: exceljs.Worksheet,\n    risksSheet: exceljs.Worksheet,\n    outcomesSheet: exceljs.Worksheet,\n    workbook: exceljs.Workbook,\n  ) {\n    Logger.debug('MelpService.commonFunctionForMultipleDownload');\n    let resultCount = 2,\n      riskCount = 2,\n      outcomeCount = 2;\n    for (const melp of melpList) {\n      let { resultsCount, risksCount, outcomesCount } = await this.downloadMelp(\n        // res,\n        melp.melpId,\n        resultsSheet,\n        risksSheet,\n        outcomesSheet,\n        resultCount,\n        riskCount,\n        outcomeCount,\n      );\n      resultCount = resultsCount;\n      riskCount = risksCount;\n      outcomeCount = outcomesCount;\n    }\n    res.set({\n      'Access-Control-Expose-Headers': 'Content-Disposition',\n      'Content-Disposition': 'attachment; filename=' + 'Melp-' + year + '.xlsx',\n    });\n    res.contentType(\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    );\n    await workbook.xlsx.write(res);\n  }\n\n  // Download Multiple MELP\n  async downloadMultipleMelp(res, year: number, user: any) {\n    Logger.debug('MelpService.downloadMultipleMelp');\n    const workbook = new exceljs.Workbook();\n    const resultsSheet = workbook.addWorksheet(\n      'MELP' + year + '-Results - Indicators Monitoring',\n    );\n    const risksSheet = workbook.addWorksheet(\n      'MELP' + year + '-Results - Risks Monitoring',\n    );\n    const outcomesSheet = workbook.addWorksheet('MELP' + year + '-Outcomes');\n    await this.worksheetCreation(resultsSheet, risksSheet, outcomesSheet);\n    let melpList;\n    const approvedStatusId = await this.userService.getStatusId(\n      StatusEnum.APPROVED,\n    );\n\n    if (user.networkId === null && user.partnerId === null) {\n      melpList = await this.melpModel\n        .find({ year, isDeleted: false, statusId: approvedStatusId })\n        .exec();\n    } else {\n      melpList = await this.melpModel\n        .find({\n          year,\n          isDeleted: false,\n          networkId: user.networkId,\n          partnerId: user.partnerId,\n        })\n        .exec();\n    }\n    await this.commonFunctionForMultipleDownload(\n      res,\n      year,\n      melpList,\n      resultsSheet,\n      risksSheet,\n      outcomesSheet,\n      workbook,\n    );\n  }\n\n  async downloadGeneralUserMultipleMelp(\n    res,\n    year: number,\n    isNetworkMelp: boolean,\n  ) {\n    Logger.debug('MelpService.downloadGeneralUserMultipleMelp');\n    const workbook = new exceljs.Workbook();\n    const resultsSheet = workbook.addWorksheet(\n      'MELP' + year + '-Results - Indicators Monitoring',\n    );\n    const risksSheet = workbook.addWorksheet(\n      'MELP' + year + '-Results - Risks Monitoring',\n    );\n    const outcomesSheet = workbook.addWorksheet('MELP' + year + '-Outcomes');\n    await this.worksheetCreation(resultsSheet, risksSheet, outcomesSheet);\n    let melpList;\n    const inProgressStatusId = await this.userService.getStatusId(\n      StatusEnum.IN_PROGRESS,\n    );\n\n    if (isNetworkMelp) {\n      melpList = await this.melpModel\n        .find({\n          year,\n          isDeleted: false,\n          networkId: { $ne: null },\n          partnerId: { $eq: null },\n          statusId: { $ne: inProgressStatusId },\n        })\n        .exec();\n    } else {\n      melpList = await this.melpModel\n        .find({\n          year,\n          isDeleted: false,\n          partnerId: { $ne: null },\n          networkId: { $eq: null },\n          statusId: { $ne: inProgressStatusId },\n        })\n        .exec();\n    }\n    await this.commonFunctionForMultipleDownload(\n      res,\n      year,\n      melpList,\n      resultsSheet,\n      risksSheet,\n      outcomesSheet,\n      workbook,\n    );\n  }\n\n  async getPMCodeCount(outcomeId) {\n    Logger.debug('MelpService.getPMCodeCount');\n    await this.getOutcomeByOutcomeId(outcomeId);\n    const outcome = await this.melpOutcomesModel\n      .findOne({ outcomeId, isDeleted: false })\n      .exec();\n    return outcome.progressMarkerCount;\n  }\n\n  async increasePMCodeCount(outcomeId) {\n    Logger.debug('MelpService.increasePMCodeCount');\n    await this.getOutcomeByOutcomeId(outcomeId);\n    const outcome = await this.melpOutcomesModel\n      .findOne({ outcomeId, isDeleted: false })\n      .exec();\n    return this.melpOutcomesModel\n      .findOneAndUpdate(\n        { outcomeId, isDeleted: false },\n        { progressMarkerCount: outcome.progressMarkerCount + 1 },\n        { new: true },\n      )\n      .exec();\n  }\n\n  async getProgressMonitoringList() {\n    Logger.debug('MelpService.getProgressMonitoringList');\n    return this.progressMonitoringModel.find().exec();\n  }\n\n  async getProgressMonitoringIdByName(progressMonitoring: string) {\n    try {\n      Logger.debug('MelpService.getProgressMonitoring');\n      const progressMonitoringObject = await this.progressMonitoringModel\n        .findOne({ progressMonitoring })\n        .exec();\n      return progressMonitoringObject._id;\n    } catch (error) {\n      throw new InternalServerErrorException();\n    }\n  }\n\n  async getListOfMelpByYear(year: number, networkId: any, partnerId: any) {\n    Logger.debug('MelpService.getProgressMonitoringList');\n    const approvedStatusId = await this.userService.getStatusId(\n      StatusEnum.APPROVED,\n    );\n\n    if (networkId === 'null') networkId = null;\n    else networkId = new Types.ObjectId(networkId);\n\n    if (partnerId === 'null') partnerId = null;\n    else partnerId = new Types.ObjectId(partnerId);\n\n    if (networkId === null && partnerId === null) {\n      return this.melpModel\n        .find({\n          year,\n          isDeleted: false,\n          statusId: approvedStatusId,\n        })\n        .exec();\n    } else {\n      return this.melpModel\n        .find({\n          year,\n          isDeleted: false,\n          statusId: approvedStatusId,\n          networkId: networkId,\n          partnerId: partnerId,\n        })\n        .exec();\n    }\n  }\n\n  async getProgressMonitoringCountsByMelpId(melpId, isQ2: boolean) {\n    Logger.debug('MelpService.getProgressMonitoringCountsByMelpId');\n    const outcomes = await this.melpOutcomesModel\n      .find({\n        melpId,\n        isDeleted: false,\n      })\n      .exec();\n\n    let totalLowPMCount = 0,\n      totalMediumPMCount = 0,\n      totalHighPMCount = 0;\n    for (const outcome of outcomes) {\n      let lowPMCount = 0,\n        highPMCount = 0,\n        mediumPMCount = 0;\n      const progressMonitoringList = await this.getProgressMonitoringList();\n      if (isQ2) {\n        lowPMCount += await this.melpOutcomeProgressMarkersModel\n          .find({\n            outcomeId: outcome._id,\n            isDeleted: false,\n            progressMonitoringQ2: progressMonitoringList[0]._id,\n          })\n          .count()\n          .exec();\n\n        mediumPMCount += await this.melpOutcomeProgressMarkersModel\n          .find({\n            outcomeId: outcome._id,\n            isDeleted: false,\n            progressMonitoringQ2: progressMonitoringList[1]._id,\n          })\n          .count()\n          .exec();\n\n        highPMCount += await this.melpOutcomeProgressMarkersModel\n          .find({\n            outcomeId: outcome._id,\n            isDeleted: false,\n            progressMonitoringQ2: progressMonitoringList[2]._id,\n          })\n          .count()\n          .exec();\n      } else {\n        lowPMCount += await this.melpOutcomeProgressMarkersModel\n          .find({\n            outcomeId: outcome._id,\n            isDeleted: false,\n            progressMonitoringQ4: progressMonitoringList[0]._id,\n          })\n          .count()\n          .exec();\n\n        mediumPMCount += await this.melpOutcomeProgressMarkersModel\n          .find({\n            outcomeId: outcome._id,\n            isDeleted: false,\n            progressMonitoringQ4: progressMonitoringList[1]._id,\n          })\n          .count()\n          .exec();\n\n        highPMCount += await this.melpOutcomeProgressMarkersModel\n          .find({\n            outcomeId: outcome._id,\n            isDeleted: false,\n            progressMonitoringQ4: progressMonitoringList[2]._id,\n          })\n          .count()\n          .exec();\n      }\n\n      totalLowPMCount += lowPMCount;\n      totalMediumPMCount += mediumPMCount;\n      totalHighPMCount += highPMCount;\n    }\n\n    return {\n      totalLowPMCount,\n      totalMediumPMCount,\n      totalHighPMCount,\n    };\n  }\n\n  async getMelp(melpId: string) {\n    Logger.debug('MelpService.getMelp');\n    const melp = await this.melpModel.find({ melpId, isDeleted: false }).exec();\n    if (melp === null)\n      throw new NotFoundException(errorMessages.MELP_NOT_FOUND);\n    else return melp;\n  }\n\n  async getIndicatorMonitoringCounts(\n    year: number,\n    networkId: any,\n    partnerId: any,\n  ) {\n    Logger.debug('MelpService.getIndicatorMonitoringCounts');\n    const melpList = await this.getListOfMelpByYear(year, networkId, partnerId);\n    let indicatorsCount = 0;\n    for (const melp of melpList) {\n      const resultList = await this.melpResultsModel\n        .find({\n          melpId: melp._id,\n          isDeleted: false,\n        })\n        .exec();\n\n      for (const result of resultList) {\n        indicatorsCount += await this.melpResultIndicatorsModel\n          .find({\n            resultId: result._id,\n            isDeleted: false,\n          })\n          .count()\n          .exec();\n      }\n    }\n    return {\n      indicatorsCount,\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/melp/schema/boundaryPartners.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/melp/schema/melp.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/melp/schema/melpIndicatorMonitoring.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/melp/schema/melpIndicatorRisks.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/melp/schema/melpOutcomeProgressMarkers.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/melp/schema/melpOutcomes.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/melp/schema/melpResultIndicators.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/melp/schema/melpResults.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/melp/schema/melpTaskDetails.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/melp/schema/melpTasks.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/networkReporting/dto/addInvoice.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/networkReporting/dto/commonBankData.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/networkReporting/dto/commonReport.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/networkReporting/dto/createAnnualReport.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/networkReporting/dto/createProgressReport.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/networkReporting/dto/editAnnualReport.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/networkReporting/dto/editInvoice.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/networkReporting/dto/editProgressReport.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/networkReporting/networkReporting.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/networkReporting/networkReporting.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/networkReporting/networkReporting.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/networkReporting/schema/annualReport.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/networkReporting/schema/commonReport.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/networkReporting/schema/invoice.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/networkReporting/schema/progressReport.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/networks/dto/activateOrDeactivateNetwork.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/networks/dto/addAnalysis.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/networks/dto/addIndividualMembers.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/networks/dto/addInstitutionalMembers.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/networks/dto/create-network.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/networks/dto/createNetworkProfile.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/networks/dto/editIndividualMember.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/networks/dto/editInstitutionalMember.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/networks/dto/editNetworkName.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/networks/dto/editNetworkProfile.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/networks/dto/members.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/networks/enum/title.enum.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/networks/enum/typeOfMembership.enum.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/networks/network.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/networks/network.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/networks/network.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/networks/schema/individualMember.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/networks/schema/institutionalMember.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/networks/schema/members.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/networks/schema/network.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/partners/dto/add-partner.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/partners/partner.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/partners/partner.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/partners/partners.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/partners/schema/partner.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/reports/dto/activityParticipationProfile.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/reports/dto/addAdditionalInfo.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/reports/dto/addParticipantInfo.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/reports/dto/createOutcomeReport.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/reports/dto/createOutputReport.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/reports/dto/editOutcomeReport.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/reports/dto/editOutputReport.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/reports/dto/knowledgeAppliedByGender.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/reports/dto/outreach.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/reports/dto/positiveResponses.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/reports/reports.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/reports/reports.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/reports/reports.service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'user' is defined but never used.","line":269,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":269,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'user' is defined but never used.","line":717,"column":66,"nodeType":"Identifier","messageId":"unusedVar","endLine":717,"endColumn":75},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'user' is defined but never used.","line":1807,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":1807,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  ConflictException,\n  Injectable,\n  InternalServerErrorException,\n  Logger,\n  NotFoundException,\n  UnprocessableEntityException,\n} from '@nestjs/common';\nimport { PartnerService } from '../partners/partner.service';\nimport { NetworkService } from '../networks/network.service';\nimport { CreateOutputReportDTO } from './dto/createOutputReport.dto';\nimport { ActivitiesService } from '../activities/activities.service';\nimport { errorMessages } from '../utils/error-messages.utils';\nimport { OutputReport } from './schema/outputReport.schema';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Model, Types } from 'mongoose';\nimport { UserService } from '../users/user.service';\nimport { StatusEnum } from '../common/enum/status.enum';\nimport { ActivityLog } from '../common/schema/activityLog.schema';\nimport { EditOutputReportDTO } from './dto/editOutputReport.dto';\nimport { Workbook, Worksheet } from 'exceljs';\nimport { CreateOutcomeReportDTO } from './dto/createOutcomeReport.dto';\nimport { OutcomeReport } from './schema/outcomeReport.schema';\nimport { StaticSurveyService } from '../staticSurveys/staticSurvey.service';\nimport { EditOutcomeReportDTO } from './dto/editOutcomeReport.dto';\nimport { RegionEnum } from '../staticSurveys/enum/region.enum';\nimport { TypeOfInstitutionEnum } from '../staticSurveys/enum/typeOfInstitution.enum';\nimport { BenefitsLevelEnum } from '../staticSurveys/enum/benefitsLevel.enum';\nimport { RelevanceLevelEnum } from '../staticSurveys/enum/relevanceLevel.enum';\nimport { ExpectationLevelEnum } from '../staticSurveys/enum/expectationLevel.enum';\nimport { DegreeOfKnowledgeGainedEnum } from '../staticSurveys/enum/degreeOfKnowledgeGained.enum';\nimport { KnowledgeGainedEnum } from '../staticSurveys/enum/knowledgeGained.enum';\nimport { S3 } from 'aws-sdk';\nimport { ConfigService } from '@nestjs/config';\nimport { MelpService } from '../melp/melp.service';\nimport { CapnetEnum } from '../common/enum/capnet.enum';\nimport { BlobServiceClient } from '@azure/storage-blob';\nimport { mimetypes } from '../utils/file-upload.util';\nimport { AddParticipantInfoDTO } from './dto/addParticipantInfo.dto';\nimport { AddAdditionalInfoDTO } from 'src/activities/dto/addAdditionalInfo.dto';\n\n@Injectable()\nexport class ReportsService {\n  constructor(\n    @InjectModel(OutputReport.name)\n    private outputReportModel: Model<OutputReport>,\n    @InjectModel(OutcomeReport.name)\n    private outcomeReportModel: Model<OutcomeReport>,\n\n    @InjectModel(ActivityLog.name) private activityLogModel: Model<ActivityLog>,\n\n    private readonly networkService: NetworkService,\n    private readonly partnerService: PartnerService,\n    private readonly activitiesService: ActivitiesService,\n    private readonly userService: UserService,\n    private readonly staticSurveyService: StaticSurveyService,\n    private readonly configService: ConfigService,\n    private readonly melpService: MelpService,\n  ) {}\n\n  //Common function for search & sort\n  async commonFunctionForSearchSort(\n    searchKeyword: string,\n    sortKey: string,\n    sortDirection: number,\n  ) {\n    Logger.debug('WorkplanService.commonFunctionForSearchSort');\n    const regex = new RegExp(searchKeyword, 'i');\n    sortKey = sortKey.trim().length === 0 ? 'updatedAt' : sortKey;\n    const sortQuery = {};\n    sortQuery[sortKey] = sortDirection === 1 ? 1 : -1;\n\n    return {\n      regex,\n      sortQuery,\n    };\n  }\n\n  async checkIfOutputReportExists(reportId: string) {\n    Logger.debug('ActivitiesService.checkIfOutputReportExists');\n    const outputReport = await this.outputReportModel\n      .findOne({\n        outputReportId: reportId,\n        isDeleted: false,\n      })\n      .exec();\n    if (outputReport === null)\n      throw new NotFoundException(errorMessages.OUTPUT_REPORT_NOT_FOUND);\n    return outputReport;\n  }\n\n  async checkIfOutcomeReportExists(reportId: string) {\n    Logger.debug('ActivitiesService.checkIfOutcomeReportExists');\n    const outcomeReport = await this.outcomeReportModel\n      .findOne({\n        outcomeReportId: reportId,\n        isDeleted: false,\n      })\n      .exec();\n    if (!outcomeReport)\n      throw new NotFoundException(errorMessages.OUTCOME_REPORT_NOT_FOUND);\n    return outcomeReport;\n  }\n  //Total count for gender-wise activity participation\n  //need controller\n  async getGenderCountTotal(participantCountObj: any) {\n    Logger.debug('ReportsService.getGenderCountTotal');\n    const preEnrolledTotal =\n      participantCountObj.preEnrolled['male'] +\n      participantCountObj.preEnrolled['female'] +\n      participantCountObj.preEnrolled['ratherNotSay'] +\n      participantCountObj.preEnrolled['other'];\n    const enrolledTotal =\n      participantCountObj.enrolled['male'] +\n      participantCountObj.enrolled['female'] +\n      participantCountObj.enrolled['ratherNotSay'] +\n      participantCountObj.enrolled['other'];\n    const completedTotal =\n      participantCountObj.completed['male'] +\n      participantCountObj.completed['female'] +\n      participantCountObj.completed['ratherNotSay'] +\n      participantCountObj.completed['other'];\n    return {\n      preEnrolledTotal,\n      enrolledTotal,\n      completedTotal,\n    };\n  }\n  //Total count for age-wise activity participation\n  //need controller\n  async getAgeCountTotal(participantCountObj: any) {\n    Logger.debug('ReportsService.getAgeCountTotal');\n    return (\n      participantCountObj.below18 +\n      participantCountObj.below25 +\n      participantCountObj.below65 +\n      participantCountObj.above65\n    );\n  }\n  //Total count for country-wise activity participation\n  async getCountTotal(\n    countryCountObj: any,\n    regionCountTotal: any,\n    institutionalAffiliation: any,\n    degreeOfKnowledgeBeforeParticipating: any,\n    degreeOfKnowledgeAfterParticipating: any,\n    overallLearningObjective: any,\n    relevance: any,\n    levelOfExpectationsMet: any,\n    knowledgeApplication: any,\n  ) {\n    Logger.debug('ReportsService.getCountTotal');\n\n    function addValues(total, number) {\n      return total.value + number.value;\n    }\n\n    const countryTotal = countryCountObj.reduce(addValues);\n    console.log('countryTotal = ', countryTotal);\n    const regionTotal = regionCountTotal.reduce(addValues);\n    const institutionalAffiliationTotal =\n      institutionalAffiliation.reduce(addValues);\n    const knowledgeBeforeParticipatingTotal =\n      degreeOfKnowledgeBeforeParticipating.reduce(addValues);\n    const knowledgeAfterParticipatingTotal =\n      degreeOfKnowledgeAfterParticipating.reduce(addValues);\n    const overallLearningObjectiveTotal =\n      overallLearningObjective.reduce(addValues);\n    const relevanceTotal = relevance.reduce(addValues);\n    const levelOfExpectationsMetTotal =\n      levelOfExpectationsMet.reduce(addValues);\n    const knowledgeApplicationTotal = knowledgeApplication.reduce(addValues);\n    return {\n      countryTotal,\n      regionTotal,\n      institutionalAffiliationTotal,\n      knowledgeBeforeParticipatingTotal,\n      knowledgeAfterParticipatingTotal,\n      overallLearningObjectiveTotal,\n      relevanceTotal,\n      levelOfExpectationsMetTotal,\n      knowledgeApplicationTotal,\n    };\n  }\n  // Create a Output report\n  async addOutputReport(\n    createOutputReportDto: CreateOutputReportDTO,\n    user: any,\n  ) {\n    Logger.debug('ReportsService.addOutputReport');\n    let instituteName;\n\n    const statusId = await this.userService.getStatusId(StatusEnum.IN_PROGRESS);\n\n    if (user.networkId === null && user.partnerId === null) {\n      const existingReport = await this.outputReportModel\n        .findOne({\n          year: createOutputReportDto.year,\n          activityCode: createOutputReportDto.activityCode,\n          isDeleted: false,\n          instituteName: CapnetEnum.CAPNET,\n        })\n        .exec();\n      if (existingReport)\n        throw new ConflictException(errorMessages.OUTPUT_REPORT_EXISTS);\n\n      instituteName = CapnetEnum.CAPNET;\n    } else if (user.networkId) {\n      instituteName = await this.networkService.getNetworkNameById(\n        user.networkId,\n      );\n      const existingReport = await this.outputReportModel\n        .findOne({\n          year: createOutputReportDto.year,\n          activityCode: createOutputReportDto.activityCode,\n          isDeleted: false,\n          instituteName,\n        })\n        .exec();\n      if (existingReport)\n        throw new ConflictException(errorMessages.OUTPUT_REPORT_EXISTS);\n    } else if (user.partnerId) {\n      instituteName = await this.partnerService.getPartnerInstituteNameById(\n        user.partnerId,\n      );\n      const existingReport = await this.outputReportModel\n        .findOne({\n          year: createOutputReportDto.year,\n          activityCode: createOutputReportDto.activityCode,\n          isDeleted: false,\n          instituteName,\n        })\n        .exec();\n      if (existingReport)\n        throw new ConflictException(errorMessages.OUTPUT_REPORT_EXISTS);\n    }\n\n    const newOutputReport = await this.outputReportModel.create({\n      ...createOutputReportDto,\n      outputReportId: uuidv4(),\n      instituteName,\n      outputReportStatus: statusId,\n      networkId: user.networkId,\n      partnerId: user.partnerId,\n      createdBy: user._id,\n      updatedBy: user._id,\n    });\n\n    await this.melpService.addActivityLog(\n      user,\n      `Output Report - ${newOutputReport.outputReportCode} created`,\n    );\n\n    Logger.debug('Created new output report');\n    Logger.verbose(newOutputReport);\n\n    return newOutputReport;\n  }\n\n  async getAllOutputReports(\n    pageSize: number,\n    pageIndex: number,\n    searchKeyword: string,\n    // status\n    sortType: string,\n    sortDirection: number,\n    year: number,\n    user: any,\n  ) {\n    Logger.debug('ReportsService.getAllOutputReports');\n    const sortObject = {};\n    const stype = sortType;\n    const sdir = sortDirection;\n    sortObject[stype] = sdir;\n    console.log('sortObject = ', sortObject);\n\n    const regex = new RegExp(searchKeyword, 'i');\n    const inprogressStatusId = await this.userService.getStatusId(\n      StatusEnum.IN_PROGRESS,\n    );\n\n    console.log('inprogressStatusId = ', inprogressStatusId);\n\n    const allReportsData = await this.outputReportModel\n      .aggregate([\n        {\n          $match: {\n            $and: [\n              {\n                year,\n                isDeleted: false,\n              },\n              {\n                $or: [\n                  {\n                    $and: [\n                      { instituteName: { $ne: CapnetEnum.CAPNET } },\n                      { outputReportStatus: { $ne: inprogressStatusId } },\n                    ],\n                  },\n                  { instituteName: CapnetEnum.CAPNET },\n                ],\n              },\n              {\n                $or: [\n                  { instituteName: { $regex: regex } },\n                  { activityCode: { $regex: regex } },\n                  { activityName: { $regex: regex } },\n                ],\n              },\n            ],\n          },\n        },\n\n        {\n          $lookup: {\n            from: 'activityproposals',\n            let: { id: '$proposalId' },\n            pipeline: [\n              {\n                $match: {\n                  $expr: {\n                    $and: [\n                      { $eq: ['$_id', '$$id'] },\n                      { $eq: ['$isDeleted', false] },\n                    ],\n                  },\n                },\n              },\n            ],\n            as: 'proposalData',\n          },\n        },\n        { $unwind: '$proposalData' },\n        { $sort: sortObject },\n        {\n          $facet: {\n            records: [{ $skip: pageIndex * pageSize }, { $limit: pageSize }],\n            // totalCount: [{ $count: 'count' }],\n          },\n        },\n      ])\n      .exec();\n\n    const count = allReportsData[0].records.length;\n    let statusName;\n    console.log('allReportsData = ', allReportsData[0].records);\n    console.log(\n      'allReportsData[0].records=',\n      allReportsData[0].records[0].outputReportStatus,\n    );\n    for (const data of allReportsData[0].records) {\n      statusName = await this.userService.getStatusName(\n        data.outputReportStatus,\n      );\n      data.statusName = statusName;\n    }\n\n    return { records: allReportsData[0].records, count: Math.ceil(count / 10) };\n  }\n\n  async getOutputReportById(reportId: string) {\n    Logger.debug('ReportsService.getOutputReportById');\n    let outputReport;\n    try {\n      outputReport = await this.outputReportModel\n        .aggregate([\n          {\n            $match: {\n              outputReportId: reportId,\n              isDeleted: false,\n            },\n          },\n          {\n            $lookup: {\n              from: 'activityproposals',\n              let: { id: '$proposalId' },\n              pipeline: [\n                {\n                  $match: {\n                    $expr: {\n                      $and: [\n                        { $eq: ['$_id', '$$id'] },\n                        { $eq: ['$isDeleted', false] },\n                      ],\n                    },\n                  },\n                },\n              ],\n              as: 'proposalData',\n            },\n          },\n          { $unwind: '$proposalData' },\n          {\n            $lookup: {\n              from: 'activitytypes',\n              let: { activityTypeId: '$proposalData.activityTypeId' },\n              pipeline: [\n                {\n                  $match: {\n                    $expr: {\n                      $eq: ['$_id', '$$activityTypeId'],\n                    },\n                  },\n                },\n              ],\n              as: 'activityTypeObj',\n            },\n          },\n          { $unwind: '$activityTypeObj' },\n        ])\n        .exec();\n      // file = await this.getEachFileByKeyFromS3(\n      //   outputReport[0].additionalInfoFile.key,\n      // );\n      // let url = await this.getSignedUrl(outputReport[0].additionalInfoFile.key);\n      return {\n        outputReport,\n        // file: {\n        //   originalname: outputReport[0].additionalInfoFile.fileName,\n        //   key: outputReport[0].additionalInfoFile.key,\n        //   url,\n        // },\n      };\n    } catch (error) {\n      console.log('getOutputReportById.catch', error);\n      throw new InternalServerErrorException(error);\n    }\n  }\n\n  async getOutputReportByActivityProposalId(proposalId: any) {\n    Logger.debug('ReportsService.getOutputReportByActivityProposalId');\n    proposalId = new Types.ObjectId(proposalId);\n    console.log('proposalId in service type = ', proposalId);\n\n    try {\n      return await this.outputReportModel\n        .aggregate([\n          {\n            $match: {\n              proposalId,\n              isDeleted: false,\n            },\n          },\n          {\n            $lookup: {\n              from: 'activityproposals',\n              // let: { id: '$proposalId' },\n              pipeline: [\n                {\n                  $match: {\n                    $expr: {\n                      $and: [\n                        { $eq: ['$_id', proposalId] },\n                        { $eq: ['$isDeleted', false] },\n                      ],\n                    },\n                  },\n                },\n              ],\n              as: 'proposalData',\n            },\n          },\n          { $unwind: '$proposalData' },\n          {\n            $lookup: {\n              from: 'activitytypes',\n              let: { activityTypeId: '$proposalData.activityTypeId' },\n              pipeline: [\n                {\n                  $match: {\n                    $expr: {\n                      $eq: ['$_id', '$$activityTypeId'],\n                    },\n                  },\n                },\n              ],\n              as: 'activityTypeObj',\n            },\n          },\n          { $unwind: '$activityTypeObj' },\n        ])\n        .exec();\n    } catch (error) {\n      console.log('getOutputReportById.catch', error);\n      throw new InternalServerErrorException(error);\n    }\n  }\n\n  async getApprovedOutputReports(year: number, user: any) {\n    Logger.debug('ReportsService.getApprovedOutputReports');\n    const approvedStatusId = await this.userService.getStatusId(\n      StatusEnum.APPROVED,\n    );\n\n    return this.outputReportModel\n      .find({\n        year,\n        isDeleted: false,\n        outputReportStatus: approvedStatusId,\n        networkId: user.networkId,\n        partnerId: user.partnerId,\n      })\n      .exec();\n  }\n\n  async getApprovedOutputReportsForCapnet(year: number) {\n    Logger.debug('ReportsService.getApprovedOutputReportsForCapnet');\n    const approvedStatusId = await this.userService.getStatusId(\n      StatusEnum.APPROVED,\n    );\n    return this.outputReportModel\n      .find({\n        year,\n        isDeleted: false,\n        outputReportStatus: approvedStatusId,\n      })\n      .exec();\n  }\n\n  async updateReport(\n    reportId: string,\n    editReportDTO: EditOutputReportDTO,\n    user: any,\n  ) {\n    Logger.debug('ReportsService.updateReport');\n    try {\n      const foundReport = await this.outputReportModel\n        .findOne({\n          isDeleted: false,\n          outputReportId: reportId,\n        })\n        .exec();\n      console.log('foundReport = ', foundReport);\n      if (!foundReport)\n        throw new NotFoundException(errorMessages.OUTPUT_REPORT_NOT_FOUND);\n\n      const updatedReport = await this.outputReportModel\n        .findOneAndUpdate(\n          { outputReportId: reportId, isDeleted: false },\n          editReportDTO,\n          {\n            new: true,\n          },\n        )\n        .exec();\n      await this.melpService.addActivityLog(\n        user,\n        `Output Report - ${updatedReport.outputReportCode} has been updated.`,\n      );\n\n      return updatedReport;\n    } catch (error) {\n      /**Handle errors here */\n      Logger.debug('Catch: ReportsService.updateReport');\n      console.log(error);\n    }\n  }\n\n  async addOrEditParticipantInfo(\n    reportId: string,\n    addParticipantInfoDTO: AddParticipantInfoDTO,\n    user: any,\n  ) {\n    Logger.debug('ReportsService.addOrEditParticipantInfo');\n    try {\n      await this.checkIfOutputReportExists(reportId);\n\n      const inProgressStatusId = await this.userService.getStatusId(\n        StatusEnum.IN_PROGRESS,\n      );\n      const infoRequestedStatusId = await this.userService.getStatusId(\n        StatusEnum.INFORMATION_REQUESTED,\n      );\n\n      const updatedReport = await this.outputReportModel\n        .findOneAndUpdate(\n          {\n            outputReportId: reportId,\n            isDeleted: false,\n            outputReportStatus: {\n              $in: [inProgressStatusId, infoRequestedStatusId],\n            },\n          },\n          { ...addParticipantInfoDTO, updatedBy: user._id },\n          { new: true },\n        )\n        .exec();\n\n      await this.melpService.addActivityLog(\n        user,\n        `Output Report - ${updatedReport.outputReportCode} has been updated.`,\n      );\n      const genderWiseTotal = await this.getGenderCountTotal(\n        updatedReport.participantProfileActivityParticipation,\n      );\n      const ageWiseTotal = await this.getAgeCountTotal(\n        updatedReport.participantProfileAge,\n      );\n      const allTotal = await this.getCountTotal(\n        updatedReport.participantProfileCountry,\n        updatedReport.participantProfileRegion,\n        updatedReport.participantProfileInstitutionalAffiliation,\n        updatedReport.degreeOfKnowledgeBeforeParticipating,\n        updatedReport.degreeOfKnowledgeAfterParticipating,\n        updatedReport.benefitOnOverallLearningObjective,\n        updatedReport.relevanceInSustainableWaterResourceManagement,\n        updatedReport.levelOfExpectationsMet,\n        updatedReport.knowledgeApplication,\n      );\n      console.log('allTotal = ', allTotal);\n\n      return {\n        ...genderWiseTotal,\n        ageWiseTotal,\n        ...allTotal,\n        updatedReport,\n      };\n    } catch (error) {\n      Logger.log('addOrEditParticipantInfo.catch', error);\n      return error;\n    }\n  }\n\n  async addOrEditAdditionalInfo(\n    reportId: string,\n    addAdditionaltInfoDTO: AddAdditionalInfoDTO,\n    user: any,\n  ) {\n    Logger.debug('ReportsService.addOrEditAdditionalInfo');\n    try {\n      await this.checkIfOutputReportExists(reportId);\n\n      const inProgressStatusId = await this.userService.getStatusId(\n        StatusEnum.IN_PROGRESS,\n      );\n      const infoRequestedStatusId = await this.userService.getStatusId(\n        StatusEnum.INFORMATION_REQUESTED,\n      );\n\n      const updatedReport = await this.outputReportModel\n        .findOneAndUpdate(\n          {\n            outputReportId: reportId,\n            isDeleted: false,\n            outputReportStatus: {\n              $in: [inProgressStatusId, infoRequestedStatusId],\n            },\n          },\n          { ...addAdditionaltInfoDTO, updatedBy: user._id },\n          { new: true },\n        )\n        .exec();\n\n      await this.melpService.addActivityLog(\n        user,\n        `Output Report - ${updatedReport.outputReportCode} has been updated.`,\n      );\n\n      return updatedReport;\n    } catch (error) {\n      Logger.log('addOrEditAdditionalInfo.catch', error);\n      return error;\n    }\n  }\n\n  async deleteOutputReport(reportId: string, user: any) {\n    Logger.debug('ReportsService.deleteOutputReport');\n    try {\n      const updatedReport = await this.outputReportModel\n        .findOneAndUpdate(\n          {\n            isDeleted: false,\n            outputReportId: reportId,\n          },\n          { isDeleted: true },\n          { new: true },\n        )\n        .exec();\n      await this.melpService.addActivityLog(\n        user,\n        `Output Report - ${updatedReport.outputReportCode} has been deleted.`,\n      );\n      return updatedReport;\n    } catch (error) {\n      console.log('getOutputReportById.catch', error);\n      throw new InternalServerErrorException(error);\n    }\n  }\n\n  async updateGeneralUserReportStatus(reportId, statusId, user: any) {\n    Logger.debug('ReportsService.updateGeneralUserReportStatus');\n\n    try {\n      const statusName = await this.userService.getStatusName(statusId);\n      const updatedReport = await this.outputReportModel\n        .findOneAndUpdate(\n          {\n            isDeleted: false,\n            outputReportId: reportId,\n          },\n          { outputReportStatus: statusId, statusName },\n          { new: true },\n        )\n        .exec();\n      await this.melpService.addActivityLog(\n        user,\n        `Output Report - ${updatedReport.outputReportCode} has been updated.`,\n      );\n      return updatedReport;\n    } catch (error) {\n      console.log('updateGeneralUserReportStatus.catch', error);\n    }\n  }\n\n  async updateGeneralUserOutcomeReportStatus(reportId, statusId, user: any) {\n    Logger.debug('ReportsService.updateGeneralUserOutcomeReportStatus');\n    try {\n      return this.outcomeReportModel\n        .findOneAndUpdate(\n          {\n            isDeleted: false,\n            outcomeReportId: reportId,\n          },\n          { outcomeReportStatus: statusId, statusName: StatusEnum.APPROVED },\n          { new: true },\n        )\n        .exec();\n    } catch (error) {\n      console.log('updateGeneralUserOutcomeReportStatus.catch', error);\n    }\n  }\n\n  // async downloadCaseStudyManual(\n  //   year: number,\n  //   caseStudySheet: Worksheet,\n  //   activityCode: string,\n  //   activityName: string,\n  //   reportCode: string,\n  //   caseStudyManual: any,\n  // ) {\n  //   Logger.debug('ReportsService.downloadCaseStudyManual');\n  //   caseStudySheet.columns = [\n  //     { header: 'Year', key: 'year', width: 6 },\n  //     { header: 'Output Report Code', key: 'reportCode', width: 20 },\n  //     { header: 'Activity Code', key: 'activityCode', width: 20 },\n  //     { header: 'Activity Name', key: 'activityName', width: 20 },\n  //     { header: 'Case Study Manual File', key: 'link', width: 40 },\n  //   ];\n\n  //   caseStudySheet.addRow({\n  //     year,\n  //     reportCode,\n  //     activityCode,\n  //     activityName,\n  //     link: caseStudyManual.fileName,\n  //   });\n\n  //   caseStudySheet.getRow(1).eachCell((cell) => {\n  //     cell.font = { bold: true };\n  //   });\n  // }\n\n  async downloadActivityParticipation(\n    year: number,\n    activityParticipationSheet: Worksheet,\n    activityCode: string,\n    activityName: string,\n    reportCode: string,\n    activityParticipation: any,\n  ) {\n    Logger.debug('ReportsService.downloadActivityParticipation');\n    activityParticipationSheet.columns = [\n      { header: 'Year', key: 'year', width: 6 },\n      { header: 'Output Report Code', key: 'reportCode', width: 6 },\n      { header: 'Activity Code', key: 'activityCode', width: 20 },\n      { header: 'Activity Name', key: 'activityName', width: 20 },\n      { header: 'Pre-Enrolled-Participants', key: 'preEnrolled', width: 20 },\n      { header: 'Enrolled-Participants', key: 'enrolled', width: 20 },\n      { header: 'Completed-Participants', key: 'completed', width: 20 },\n    ];\n\n    const preObj =\n      'male= ' +\n      activityParticipation.preEnrolled.male +\n      ', ' +\n      'female= ' +\n      activityParticipation.preEnrolled.female +\n      ', ' +\n      'rather_not_say= ' +\n      activityParticipation.preEnrolled.ratherNotSay +\n      ', ' +\n      'other= ' +\n      activityParticipation.preEnrolled.other;\n\n    const enrolledObj =\n      'male= ' +\n      activityParticipation.enrolled.male +\n      ', ' +\n      'female= ' +\n      activityParticipation.enrolled.female +\n      ', ' +\n      'rather_not_say= ' +\n      activityParticipation.enrolled.ratherNotSay +\n      ', ' +\n      'other= ' +\n      activityParticipation.enrolled.other;\n\n    const completedObj =\n      'male= ' +\n      activityParticipation.completed.male +\n      ', ' +\n      'female= ' +\n      activityParticipation.completed.female +\n      ', ' +\n      'rather_not_say= ' +\n      activityParticipation.completed.ratherNotSay +\n      ', ' +\n      'other= ' +\n      activityParticipation.completed.other;\n\n    activityParticipationSheet.addRow({\n      year,\n      reportCode,\n      activityCode,\n      activityName,\n      preEnrolled: preObj,\n      enrolled: enrolledObj,\n      completed: completedObj,\n    });\n\n    activityParticipationSheet.getRow(1).eachCell((cell) => {\n      cell.font = { bold: true };\n    });\n  }\n\n  async downloadProfileAge(\n    year: number,\n    profileAgeSheet: Worksheet,\n    activityCode: string,\n    activityName: string,\n    reportCode: string,\n    ageDetails: any,\n  ) {\n    Logger.debug('ReportsService.downloadProfileAge');\n    profileAgeSheet.columns = [\n      { header: 'Year', key: 'year', width: 6 },\n      { header: 'Output Report Code', key: 'reportCode', width: 6 },\n      { header: 'Activity Code', key: 'activityCode', width: 20 },\n      { header: 'Activity Name', key: 'activityName', width: 20 },\n      { header: 'Below 18', key: 'below18', width: 20 },\n      { header: 'Below 25', key: 'below25', width: 20 },\n      { header: 'Below 65', key: 'below65', width: 20 },\n      { header: 'Above 65', key: 'above65', width: 20 },\n    ];\n\n    profileAgeSheet.addRow({\n      year,\n      reportCode,\n      activityCode,\n      activityName,\n      below18: ageDetails.below18,\n      below25: ageDetails.below25,\n      below65: ageDetails.below65,\n      above65: ageDetails.above65,\n    });\n\n    profileAgeSheet.getRow(1).eachCell((cell) => {\n      cell.font = { bold: true };\n    });\n  }\n\n  async downloadProfileCountry(\n    year: number,\n    countrySheet: Worksheet,\n    activityCode: string,\n    activityName: string,\n    reportCode: string,\n    countryData: any,\n  ) {\n    Logger.debug('ReportsService.downloadProfileCountry');\n    countrySheet.columns = [\n      { header: 'Year', key: 'year', width: 6 },\n      { header: 'Output Report Code', key: 'reportCode', width: 6 },\n      { header: 'Activity Code', key: 'activityCode', width: 20 },\n      { header: 'Activity Name', key: 'activityName', width: 20 },\n      { header: 'Country Name', key: 'countryName', width: 40 },\n      { header: 'No.of Participants', key: 'participantCount', width: 20 },\n    ];\n    for (const obj of countryData) {\n      countrySheet.addRow({\n        year,\n        reportCode,\n        activityCode,\n        activityName,\n        countryName: !obj.key ? 'NA' : obj.key,\n        participantCount: !obj.value ? 0 : obj.value,\n      });\n    }\n    countrySheet.getRow(1).eachCell((cell) => {\n      cell.font = { bold: true };\n    });\n  }\n\n  async downloadProfileRegion(\n    year: number,\n    regionSheet: Worksheet,\n    activityCode: string,\n    activityName: string,\n    reportCode: string,\n    regionData: any,\n  ) {\n    Logger.debug('ReportsService.downloadProfileRegion');\n    regionSheet.columns = [\n      { header: 'Year', key: 'year', width: 6 },\n      { header: 'Output Report Code', key: 'reportCode', width: 6 },\n      { header: 'Activity Code', key: 'activityCode', width: 20 },\n      { header: 'Activity Name', key: 'activityName', width: 20 },\n      { header: 'Region Name', key: 'regionName', width: 40 },\n      { header: 'No.of Participants', key: 'participantCount', width: 20 },\n    ];\n    for (const obj of regionData) {\n      regionSheet.addRow({\n        year,\n        reportCode,\n        activityCode,\n        activityName,\n        regionName: obj.key,\n        participantCount: obj.value,\n      });\n    }\n    regionSheet.getRow(1).eachCell((cell) => {\n      cell.font = { bold: true };\n    });\n  }\n\n  async downloadProfileInstitutionalAffiliation(\n    year: number,\n    institutionalAffiliationSheet: Worksheet,\n    activityCode: string,\n    activityName: string,\n    reportCode: string,\n    institutionalAffiliationData: any,\n  ) {\n    Logger.debug('ReportsService.InstitutionalAffiliation');\n    institutionalAffiliationSheet.columns = [\n      { header: 'Year', key: 'year', width: 6 },\n      { header: 'Output Report Code', key: 'reportCode', width: 6 },\n      { header: 'Activity Code', key: 'activityCode', width: 20 },\n      { header: 'Activity Name', key: 'activityName', width: 20 },\n      {\n        header: \"Participant's Institution\",\n        key: 'institutionName',\n        width: 40,\n      },\n      { header: 'No.of Participants', key: 'participantCount', width: 20 },\n    ];\n    for (const obj of institutionalAffiliationData) {\n      institutionalAffiliationSheet.addRow({\n        year,\n        reportCode,\n        activityCode,\n        activityName,\n        institutionName: obj.key,\n        participantCount: obj.value,\n      });\n    }\n    institutionalAffiliationSheet.getRow(1).eachCell((cell) => {\n      cell.font = { bold: true };\n    });\n  }\n\n  async downloadKnowledgeParticipating(\n    year: number,\n    knowledgeParticipatingSheet: Worksheet,\n    activityCode: string,\n    activityName: string,\n    reportCode: string,\n    knowledgeParticipatingData: any,\n  ) {\n    Logger.debug('ReportsService.downloadKnowledgeParticipating');\n    knowledgeParticipatingSheet.columns = [\n      { header: 'Year', key: 'year', width: 6 },\n      { header: 'Output Report Code', key: 'reportCode', width: 6 },\n      { header: 'Activity Code', key: 'activityCode', width: 20 },\n      { header: 'Activity Name', key: 'activityName', width: 20 },\n      { header: 'Degree of Knowledge', key: 'degree', width: 40 },\n      { header: 'No.of Participants', key: 'participantCount', width: 20 },\n    ];\n    for (const obj of knowledgeParticipatingData) {\n      knowledgeParticipatingSheet.addRow({\n        year,\n        reportCode,\n        activityCode,\n        activityName,\n        degree: obj.key,\n        participantCount: obj.value,\n      });\n    }\n    knowledgeParticipatingSheet.getRow(1).eachCell((cell) => {\n      cell.font = { bold: true };\n    });\n  }\n\n  async downloadOverallLearningObjective(\n    year: number,\n    overallLearningObjectiveSheet: Worksheet,\n    activityCode: string,\n    activityName: string,\n    reportCode: string,\n    learingObjectiveData: any,\n  ) {\n    Logger.debug('ReportsService.downloadOverallLearningObjective');\n    overallLearningObjectiveSheet.columns = [\n      { header: 'Year', key: 'year', width: 6 },\n      { header: 'Output Report Code', key: 'reportCode', width: 6 },\n      { header: 'Activity Code', key: 'activityCode', width: 20 },\n      { header: 'Activity Name', key: 'activityName', width: 20 },\n      {\n        header: 'Benefit on Overall Learning Objective',\n        key: 'benefit',\n        width: 40,\n      },\n      { header: 'No.of Participants', key: 'participantCount', width: 20 },\n    ];\n    for (const obj of learingObjectiveData) {\n      overallLearningObjectiveSheet.addRow({\n        year,\n        reportCode,\n        activityCode,\n        activityName,\n        benefit: obj.key,\n        participantCount: obj.value,\n      });\n    }\n    overallLearningObjectiveSheet.getRow(1).eachCell((cell) => {\n      cell.font = { bold: true };\n    });\n  }\n\n  async downloadWaterResourceManagement(\n    year: number,\n    waterResourceManagementSheet: Worksheet,\n    activityCode: string,\n    activityName: string,\n    reportCode: string,\n    waterResourceManagementData: any,\n  ) {\n    Logger.debug('ReportsService.downloadWaterResourceManagement');\n    waterResourceManagementSheet.columns = [\n      { header: 'Year', key: 'year', width: 6 },\n      { header: 'Output Report Code', key: 'reportCode', width: 6 },\n      { header: 'Activity Code', key: 'activityCode', width: 20 },\n      { header: 'Activity Name', key: 'activityName', width: 20 },\n      {\n        header: 'Relevance in Sustainable Water Resource Management',\n        key: 'relevance',\n        width: 40,\n      },\n      { header: 'No.of Participants', key: 'participantCount', width: 20 },\n    ];\n    for (const obj of waterResourceManagementData) {\n      waterResourceManagementSheet.addRow({\n        year,\n        reportCode,\n        activityCode,\n        activityName,\n        relevance: obj.key,\n        participantCount: obj.value,\n      });\n    }\n    waterResourceManagementSheet.getRow(1).eachCell((cell) => {\n      cell.font = { bold: true };\n    });\n  }\n\n  async downloadExpectationsMet(\n    year: number,\n    levelOfExpectationsMetSheet: Worksheet,\n    activityCode: string,\n    activityName: string,\n    reportCode: string,\n    data: any,\n  ) {\n    Logger.debug('ReportsService.downloadExpectationsMet');\n    levelOfExpectationsMetSheet.columns = [\n      { header: 'Year', key: 'year', width: 6 },\n      { header: 'Output Report Code', key: 'reportCode', width: 6 },\n      { header: 'Activity Code', key: 'activityCode', width: 20 },\n      { header: 'Activity Name', key: 'activityName', width: 20 },\n      { header: 'Level of Expectations', key: 'level', width: 40 },\n      { header: 'No.of Participants', key: 'participantCount', width: 20 },\n    ];\n    for (const obj of data) {\n      levelOfExpectationsMetSheet.addRow({\n        year,\n        reportCode,\n        activityCode,\n        activityName,\n        level: obj.key,\n        participantCount: obj.value,\n      });\n    }\n    levelOfExpectationsMetSheet.getRow(1).eachCell((cell) => {\n      cell.font = { bold: true };\n    });\n  }\n\n  async downloadKnowledgeApplication(\n    year: number,\n    knowledgeApplicationSheet: Worksheet,\n    activityCode: string,\n    activityName: string,\n    reportCode: string,\n    data: any,\n  ) {\n    Logger.debug('ReportsService.downloadKnowledgeApplication');\n    knowledgeApplicationSheet.columns = [\n      { header: 'Year', key: 'year', width: 6 },\n      { header: 'Output Report Code', key: 'reportCode', width: 6 },\n      { header: 'Activity Code', key: 'activityCode', width: 20 },\n      { header: 'Activity Name', key: 'activityName', width: 20 },\n      { header: 'Description', key: 'description', width: 40 },\n      { header: 'No.of Participants', key: 'participantCount', width: 20 },\n    ];\n    for (const obj of data) {\n      knowledgeApplicationSheet.addRow({\n        year,\n        reportCode,\n        activityCode,\n        activityName,\n        description: obj.key,\n        participantCount: obj.value,\n      });\n    }\n    knowledgeApplicationSheet.getRow(1).eachCell((cell) => {\n      cell.font = { bold: true };\n    });\n  }\n\n  async downloadOutputReport(res, report, workbook: Workbook) {\n    Logger.debug('ReportsService.downloadOutputReport');\n\n    /** Get selected thematic-area or other-thematic-area if other is selected */\n    const thematicArea =\n      await this.activitiesService.getActivityThematicAreaById(\n        report.thematicAreaId,\n      );\n    let thematicAreaValue;\n    if (thematicArea.thematicAreaName === 'Other') {\n      thematicAreaValue = report.otherThematicArea;\n    } else {\n      thematicAreaValue = thematicArea.thematicAreaName;\n    }\n\n    const activityType = await this.activitiesService.getTypeOfActivityById(\n      report.activityTypeId,\n    );\n    const activityScope = await this.activitiesService.getActivityScopeById(\n      report.activityScopeId,\n    );\n    console.log('activityScope = ', activityScope);\n    let countryName;\n\n    if (report.countryId) {\n      countryName = await this.activitiesService.getCountryNameById(\n        report.countryId,\n      );\n      console.log('countryName = ', countryName);\n    }\n\n    const statusName = await this.userService.getStatusName(\n      report.outputReportStatus,\n    );\n\n    let outputReportSheet,\n      activityParticipationSheet,\n      profileAgeSheet,\n      countrySheet,\n      regionSheet,\n      institutionalAffiliationSheet,\n      knowledgeBeforeParticipatingSheet,\n      knowledgeAfterParticipatingSheet,\n      overallLearningObjectiveSheet,\n      sustainableWaterResourceManagementSheet,\n      levelOfExpectationsMetSheet,\n      knowledgeApplicationSheet;\n\n    if (!workbook.getWorksheet('Output_Report_Details'))\n      outputReportSheet = workbook.addWorksheet('Output_Report_Details');\n    else outputReportSheet = workbook.getWorksheet('Output_Report_Details');\n\n    outputReportSheet.columns = [\n      { header: 'Year', key: 'year', width: 6 },\n      { header: 'Output Report Code', key: 'reportCode', width: 6 },\n      { header: 'Activity Code', key: 'activityCode', width: 20 },\n      { header: 'Activity Name', key: 'activityName', width: 40 },\n      { header: 'Institute Name', key: 'instituteName', width: 20 },\n      { header: 'Thematic Area', key: 'thematicArea', width: 40 },\n      { header: 'Activity Start Date', key: 'activityStartDate', width: 20 },\n      { header: 'Activity End Date', key: 'activityEndDate', width: 20 },\n      { header: 'Activity Type', key: 'typeOfActivity', width: 40 },\n      { header: 'Language', key: 'language', width: 20 },\n      { header: 'Activity Scope', key: 'activityScope', width: 20 },\n      { header: 'Country', key: 'country', width: 20 },\n      { header: 'City/Town', key: 'cityTown', width: 20 },\n      { header: 'Main Partners', key: 'mainPartners', width: 20 },\n      { header: 'Expected Outputs', key: 'expectedOutputs', width: 20 },\n      { header: 'Completed Outputs', key: 'completedOutputs', width: 20 },\n      {\n        header: 'Practice New Technologies',\n        key: 'inclusionOrPracticeOfNewTechnologies',\n        width: 20,\n      },\n      {\n        header: 'More Inclusion Details',\n        key: ' moreInclusionDetails',\n        width: 20,\n      },\n      {\n        header: 'Address Social Inclusion Issue',\n        key: 'addressSocialInclusionIssue',\n        width: 20,\n      },\n      {\n        header: 'More Details Address Social Inclusion Issue',\n        key: 'moreDetailsOnAddressSocialInclusionIssue',\n        width: 20,\n      },\n      {\n        header: 'Gender Specific Methodology',\n        key: 'includeGenderSpecificMethodology',\n        width: 20,\n      },\n      {\n        header: 'More Details Gender Specific Methodology',\n        key: 'moreDetailsOnGenderSpecificMethodology',\n        width: 20,\n      },\n      { header: 'Facilitators', key: 'facilitators', width: 20 },\n      {\n        header: 'Enrollment Method',\n        key: 'methodOfEnrollmentInActivity',\n        width: 20,\n      },\n      {\n        header: 'Exit Survey Method',\n        key: 'methodOfFillingExitSurvey',\n        width: 20,\n      },\n      {\n        header: 'Capnet Affiliation',\n        key: 'participantProfileCapnetAffiliation',\n        width: 20,\n      },\n      { header: 'Report Status', key: 'outputReportStatus', width: 20 },\n      { header: 'Submitted Date', key: 'submittedAt', width: 20 },\n      { header: 'Approval Date', key: 'approvedAt', width: 20 },\n      {\n        header: 'Exit Survey Response Rate',\n        key: 'exitSurveyResponseRate',\n        width: 20,\n      },\n    ];\n\n    outputReportSheet.addRow({\n      year: report.year,\n      reportCode: report.outputReportCode,\n      activityCode: report.activityCode,\n      activityName: report.activityName,\n      instituteName: report.instituteName,\n      thematicArea: thematicAreaValue,\n      activityStartDate: report.activityStartDate,\n      activityEndDate: report.activityEndDate,\n      typeOfActivity: activityType.activityTypeName,\n      language: report.language,\n      activityScope: activityScope.activityScopeName,\n      country: !countryName ? 'NA' : countryName,\n      cityTown: !report.cityTown ? 'NA' : report.cityTown,\n      mainPartners: report.mainPartners,\n      expectedOutputs: report.expectedOutputs,\n      completedOutputs: report.completedOutputs,\n      inclusionOrPracticeOfNewTechnologies:\n        report.inclusionOrPracticeOfNewTechnologies ? 'Yes' : 'No',\n      moreInclusionDetails: report.moreInclusionDetails,\n      addressSocialInclusionIssue: report.addressSocialInclusionIssue\n        ? 'Yes'\n        : 'No',\n      moreDetailsOnAddressSocialInclusionIssue:\n        report.moreDetailsOnAddressSocialInclusionIssue,\n      includeGenderSpecificMethodology: report.includeGenderSpecificMethodology\n        ? 'Yes'\n        : 'No',\n      moreDetailsOnGenderSpecificMethodology:\n        report.moreDetailsOnGenderSpecificMethodology,\n      facilitators: report.facilitators,\n      methodOfEnrollmentInActivity: report.methodOfEnrollmentInActivity,\n      methodOfFillingExitSurvey: report.methodOfFillingExitSurvey,\n      participantProfileCapnetAffiliation:\n        report.participantProfileCapnetAffiliation,\n      outputReportStatus: statusName,\n      submittedAt: report.submittedAt,\n      approvedAt: report.approvedAt,\n      exitSurveyResponseRate: report.exitSurveyResponseRate,\n    });\n\n    outputReportSheet.getRow(1).eachCell((cell) => {\n      cell.font = { bold: true };\n    });\n\n    // if (!workbook.getWorksheet('Case_Study'))\n    //   caseStudySheet = workbook.addWorksheet('Case_Study');\n    // else caseStudySheet = workbook.getWorksheet('Case_Study');\n\n    // await this.downloadCaseStudyManual(\n    //   report.year,\n    //   caseStudySheet,\n    //   report.activityCode,\n    //   report.activityName,\n    //   report.outputReportCode,\n    //   report.caseStudyManual,\n    // );\n    if (!workbook.getWorksheet('Activity_Participation'))\n      activityParticipationSheet = workbook.addWorksheet(\n        'Activity_Participation',\n      );\n    else\n      activityParticipationSheet = workbook.getWorksheet(\n        'Activity_Participation',\n      );\n\n    await this.downloadActivityParticipation(\n      report.year,\n      activityParticipationSheet,\n      report.activityCode,\n      report.activityName,\n      report.outputReportCode,\n      report.participantProfileActivityParticipation,\n    );\n    if (!workbook.getWorksheet('Age_Profile'))\n      profileAgeSheet = workbook.addWorksheet('Age_Profile');\n    else profileAgeSheet = workbook.getWorksheet('Age_Profile');\n\n    await this.downloadProfileAge(\n      report.year,\n      profileAgeSheet,\n      report.activityCode,\n      report.activityName,\n      report.outputReportCode,\n      report.participantProfileAge,\n    );\n    if (!workbook.getWorksheet('Country'))\n      countrySheet = workbook.addWorksheet('Country');\n    else countrySheet = workbook.getWorksheet('Country');\n    await this.downloadProfileCountry(\n      report.year,\n      countrySheet,\n      report.activityCode,\n      report.activityName,\n      report.outputReportCode,\n      report.participantProfileCountry,\n    );\n    if (!workbook.getWorksheet('Region'))\n      regionSheet = workbook.addWorksheet('Region');\n    else regionSheet = workbook.getWorksheet('Region');\n\n    await this.downloadProfileRegion(\n      report.year,\n      regionSheet,\n      report.activityCode,\n      report.activityName,\n      report.outputReportCode,\n      report.participantProfileRegion,\n    );\n\n    if (!workbook.getWorksheet('Institutional_Affiliation'))\n      institutionalAffiliationSheet = workbook.addWorksheet(\n        'Institutional_Affiliation',\n      );\n    else\n      institutionalAffiliationSheet = workbook.getWorksheet(\n        'Institutional_Affiliation',\n      );\n    await this.downloadProfileInstitutionalAffiliation(\n      report.year,\n      institutionalAffiliationSheet,\n      report.activityCode,\n      report.activityName,\n      report.outputReportCode,\n      report.participantProfileInstitutionalAffiliation,\n    );\n\n    if (!workbook.getWorksheet('Knowledge_Before_Participating'))\n      knowledgeBeforeParticipatingSheet = workbook.addWorksheet(\n        'Knowledge_Before_Participating',\n      );\n    else\n      knowledgeBeforeParticipatingSheet = workbook.getWorksheet(\n        'Knowledge_Before_Participating',\n      );\n    await this.downloadKnowledgeParticipating(\n      report.year,\n      knowledgeBeforeParticipatingSheet,\n      report.activityCode,\n      report.activityName,\n      report.outputReportCode,\n      report.degreeOfKnowledgeBeforeParticipating,\n    );\n\n    if (!workbook.getWorksheet('Knowledge_After_Participating'))\n      knowledgeAfterParticipatingSheet = workbook.addWorksheet(\n        'Knowledge_After_Participating',\n      );\n    else\n      knowledgeAfterParticipatingSheet = workbook.getWorksheet(\n        'Knowledge_After_Participating',\n      );\n\n    await this.downloadKnowledgeParticipating(\n      report.year,\n      knowledgeAfterParticipatingSheet,\n      report.activityCode,\n      report.activityName,\n      report.outputReportCode,\n      report.degreeOfKnowledgeAfterParticipating,\n    );\n\n    if (!workbook.getWorksheet('Overall_Learning_Objective'))\n      overallLearningObjectiveSheet = workbook.addWorksheet(\n        'Overall_Learning_Objective',\n      );\n    else\n      overallLearningObjectiveSheet = workbook.getWorksheet(\n        'Overall_Learning_Objective',\n      );\n\n    await this.downloadOverallLearningObjective(\n      report.year,\n      overallLearningObjectiveSheet,\n      report.activityCode,\n      report.activityName,\n      report.outputReportCode,\n      report.benefitOnOverallLearningObjective,\n    );\n\n    if (!workbook.getWorksheet('Water_Resource_Management'))\n      sustainableWaterResourceManagementSheet = workbook.addWorksheet(\n        'Water_Resource_Management',\n      );\n    else\n      sustainableWaterResourceManagementSheet = workbook.getWorksheet(\n        'Water_Resource_Management',\n      );\n    await this.downloadWaterResourceManagement(\n      report.year,\n      sustainableWaterResourceManagementSheet,\n      report.activityCode,\n      report.activityName,\n      report.outputReportCode,\n      report.relevanceInSustainableWaterResourceManagement,\n    );\n\n    if (!workbook.getWorksheet('Level_Of_Expectations_Met'))\n      levelOfExpectationsMetSheet = workbook.addWorksheet(\n        'Level_Of_Expectations_Met',\n      );\n    else\n      levelOfExpectationsMetSheet = workbook.getWorksheet(\n        'Level_Of_Expectations_Met',\n      );\n    await this.downloadExpectationsMet(\n      report.year,\n      levelOfExpectationsMetSheet,\n      report.activityCode,\n      report.activityName,\n      report.outputReportCode,\n      report.levelOfExpectationsMet,\n    );\n\n    if (!workbook.getWorksheet('Knowledge_Application'))\n      knowledgeApplicationSheet = workbook.addWorksheet(\n        'Knowledge_Application',\n      );\n    else\n      knowledgeApplicationSheet = workbook.getWorksheet(\n        'Knowledge_Application',\n      );\n    await this.downloadKnowledgeApplication(\n      report.year,\n      knowledgeApplicationSheet,\n      report.activityCode,\n      report.activityName,\n      report.outputReportCode,\n      report.knowledgeApplication,\n    );\n  }\n\n  async downloadIndividualOutputReport(res, reportId: string) {\n    Logger.debug('ReportsService.downloadIndividualOutputReport');\n    const workbook = new Workbook();\n    // const outputReport = await this.getOutputReportById(reportId);\n    const outputReport = await this.outputReportModel\n      .findOne({ outputReportId: reportId, isDeleted: false })\n      .exec();\n    console.log('outputReport in individual = ', outputReport);\n    await this.downloadOutputReport(res, outputReport, workbook);\n    res.set({\n      'Access-Control-Expose-Headers': 'Content-Disposition',\n      'Content-Disposition':\n        'attachment; filename=' +\n        'OutputReport-' +\n        outputReport.outputReportCode +\n        '.xlsx',\n    });\n    res.contentType(\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    );\n    await workbook.xlsx.write(res);\n  }\n\n  async downloadMultipleOutputReports(res, year: number) {\n    Logger.debug('ReportsService.downloadMultipleOutputReports');\n    const workbook = new Workbook();\n    const outputReports = await this.outputReportModel\n      .find({\n        year,\n        isDeleted: false,\n      })\n      .exec();\n    console.log('outputReport in multiple = ', outputReports);\n    for (const report of outputReports) {\n      await this.downloadOutputReport(res, report, workbook);\n    }\n    res.set({\n      'Access-Control-Expose-Headers': 'Content-Disposition',\n      'Content-Disposition':\n        'attachment; filename=' + 'All Output Reports-' + year + '.xlsx',\n    });\n    res.contentType(\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    );\n    await workbook.xlsx.write(res);\n  }\n\n  /**Outcome Report APIs Service */\n\n  async getEnrolledCount(activityCode: string, year: number) {\n    Logger.debug('ReportsService.getEnrolledCount');\n    const existingOutputReport = await this.outputReportModel\n      .findOne({\n        year,\n        activityCode,\n        isDeleted: false,\n      })\n      .exec();\n\n    return {\n      enrolledParticipants:\n        existingOutputReport.participantProfileActivityParticipation.enrolled,\n    };\n  }\n\n  //Gender-wise knowledge shared\n  async getCountKnowledgeShared(outcomeReportId: string, user: any) {\n    Logger.debug('StaticSurveyService.getCountKnowledgeShared');\n    const outcomeReport = await this.outcomeReportModel\n      .findOne({\n        outcomeReportId,\n        isDeleted: false,\n      })\n      .exec();\n\n    return this.staticSurveyService.getParticipantCountByKnowledgeShared(\n      outcomeReport.proposalId,\n      user,\n    );\n  }\n\n  async addOutcomeReport(\n    createOutcomeReportDto: CreateOutcomeReportDTO,\n    user: any,\n  ) {\n    Logger.debug('ReportsService.addOutcomeReport');\n\n    let instituteName, existingOutcomeReport, existingOutputReport;\n\n    const statusId = await this.userService.getStatusId(StatusEnum.IN_PROGRESS);\n    const approvedStatusId = await this.userService.getStatusId(\n      StatusEnum.APPROVED,\n    );\n    if (user.networkId === null && user.partnerId === null) {\n      existingOutcomeReport = await this.outcomeReportModel\n        .findOne({\n          year: createOutcomeReportDto.year,\n          activityCode: createOutcomeReportDto.activityCode,\n          isDeleted: false,\n          instituteName: CapnetEnum.CAPNET,\n        })\n        .exec();\n\n      if (existingOutcomeReport)\n        throw new ConflictException(errorMessages.OUTCOME_REPORT_EXISTS);\n\n      existingOutputReport = await this.outputReportModel\n        .findOne({\n          year: createOutcomeReportDto.year,\n          activityCode: createOutcomeReportDto.activityCode,\n          outputReportStatus: approvedStatusId,\n          isDeleted: false,\n          instituteName: CapnetEnum.CAPNET,\n        })\n        .exec();\n      if (!existingOutputReport)\n        throw new NotFoundException(errorMessages.Report_NOT_FOUND);\n      instituteName = CapnetEnum.CAPNET;\n    } else if (user.networkId) {\n      instituteName = await this.networkService.getNetworkNameById(\n        user.networkId,\n      );\n      existingOutcomeReport = await this.outcomeReportModel\n        .findOne({\n          year: createOutcomeReportDto.year,\n          activityCode: createOutcomeReportDto.activityCode,\n          isDeleted: false,\n          instituteName,\n        })\n        .exec();\n\n      if (existingOutcomeReport)\n        throw new ConflictException(errorMessages.OUTCOME_REPORT_EXISTS);\n\n      existingOutputReport = await this.outputReportModel\n        .findOne({\n          year: createOutcomeReportDto.year,\n          activityCode: createOutcomeReportDto.activityCode,\n          outputReportStatus: approvedStatusId,\n          isDeleted: false,\n          instituteName,\n        })\n        .exec();\n      if (!existingOutputReport)\n        throw new NotFoundException(errorMessages.Report_NOT_FOUND);\n    } else if (user.partnerId) {\n      instituteName = await this.partnerService.getPartnerInstituteNameById(\n        user.partnerId,\n      );\n      existingOutcomeReport = await this.outcomeReportModel\n        .findOne({\n          year: createOutcomeReportDto.year,\n          activityCode: createOutcomeReportDto.activityCode,\n          isDeleted: false,\n          instituteName,\n        })\n        .exec();\n\n      if (existingOutcomeReport)\n        throw new ConflictException(errorMessages.OUTCOME_REPORT_EXISTS);\n\n      existingOutputReport = await this.outputReportModel\n        .findOne({\n          year: createOutcomeReportDto.year,\n          activityCode: createOutcomeReportDto.activityCode,\n          outputReportStatus: approvedStatusId,\n          isDeleted: false,\n          instituteName,\n        })\n        .exec();\n      if (!existingOutputReport)\n        throw new NotFoundException(errorMessages.Report_NOT_FOUND);\n    }\n\n    const genderWiseTotal = await this.getGenderCountTotal(\n      existingOutputReport.participantProfileActivityParticipation,\n    );\n    console.log('genderWiseTotal.enrolled = ', genderWiseTotal.enrolledTotal);\n\n    const newOutcomeReport = await this.outcomeReportModel.create({\n      ...createOutcomeReportDto,\n      outcomeReportId: uuidv4(),\n      instituteName,\n      outcomeReportStatus: statusId,\n      statusName: 'In Progress',\n      networkId: user.networkId,\n      partnerId: user.partnerId,\n      createdBy: user._id,\n      updatedBy: user._id,\n    });\n\n    await this.melpService.addActivityLog(\n      user,\n      `Outcome Report - ${newOutcomeReport.outcomeReportCode} created.`,\n    );\n\n    Logger.debug('Created new outcome report');\n    Logger.verbose(newOutcomeReport);\n\n    return {\n      newOutcomeReport,\n    };\n  }\n\n  async getOutcomeReportById(reportId: string) {\n    Logger.debug('ReportsService.getOutcomeReportById');\n    let outcomeReport;\n    try {\n      outcomeReport = await this.outcomeReportModel\n        .aggregate([\n          {\n            $match: {\n              outcomeReportId: reportId,\n              isDeleted: false,\n            },\n          },\n          {\n            $lookup: {\n              from: 'activityproposals',\n              let: { id: '$proposalId' },\n              pipeline: [\n                {\n                  $match: {\n                    $expr: {\n                      $and: [\n                        { $eq: ['$_id', '$$id'] },\n                        { $eq: ['$isDeleted', false] },\n                      ],\n                    },\n                  },\n                },\n              ],\n              as: 'proposalData',\n            },\n          },\n          { $unwind: '$proposalData' },\n        ])\n        .exec();\n      // file = await this.getEachFileByKeyFromS3(\n      //   outcomeReport[0].additionalInfoFile.key,\n      // );\n      // let url = await this.getSignedUrl(\n      //   outcomeReport[0].additionalInfoFile.key,\n      // );\n      return {\n        outcomeReport,\n        // file: {\n        //   originalname: outcomeReport[0].additionalInfoFile.fileName,\n        //   key: outcomeReport[0].additionalInfoFile.key,\n        //   url,\n        // },\n      };\n    } catch (error) {\n      console.log('getOutcomeReportById.catch', error);\n      throw new InternalServerErrorException();\n      /**Throw appropriate error */\n    }\n  }\n\n  async getOutcomeReportByActivityProposalId(proposalId: any) {\n    Logger.debug('ReportsService.getOutcomeReportByActivityProposalId');\n    proposalId = new Types.ObjectId(proposalId);\n    console.log('proposalId in service type = ', proposalId);\n\n    try {\n      return await this.outcomeReportModel\n        .aggregate([\n          {\n            $match: {\n              proposalId,\n              isDeleted: false,\n            },\n          },\n          {\n            $lookup: {\n              from: 'activityproposals',\n              pipeline: [\n                {\n                  $match: {\n                    $expr: {\n                      $and: [\n                        { $eq: ['$_id', proposalId] },\n                        { $eq: ['$isDeleted', false] },\n                      ],\n                    },\n                  },\n                },\n              ],\n              as: 'proposalData',\n            },\n          },\n          { $unwind: '$proposalData' },\n        ])\n        .exec();\n    } catch (error) {\n      console.log('getOutcomeReportByActivityProposalId.catch', error);\n      throw new InternalServerErrorException(error);\n    }\n  }\n\n  async getAllOutcomeReports(\n    pageSize: number,\n    pageIndex: number,\n    searchKeyword: string,\n    // status\n    sortType: string,\n    sortDirection: number,\n    year: number,\n    user: any,\n  ) {\n    Logger.debug('ReportsService.getAllOutcomeReports');\n    const sortObject = {};\n    const stype = sortType;\n    const sdir = sortDirection;\n    sortObject[stype] = sdir;\n    const inprogressStatusId = await this.userService.getStatusId(\n      StatusEnum.IN_PROGRESS,\n    );\n\n    const regex = new RegExp(searchKeyword, 'i');\n    const allReportsData = await this.outcomeReportModel\n      .aggregate([\n        {\n          $match: {\n            $and: [\n              {\n                year,\n                isDeleted: false,\n              },\n              {\n                $or: [\n                  {\n                    $and: [\n                      { instituteName: { $ne: CapnetEnum.CAPNET } },\n                      { outcomeReportStatus: { $ne: inprogressStatusId } },\n                    ],\n                  },\n                  { instituteName: CapnetEnum.CAPNET },\n                ],\n              },\n              {\n                $or: [\n                  { instituteName: { $regex: regex } },\n                  { activityCode: { $regex: regex } },\n                  { activityName: { $regex: regex } },\n                ],\n              },\n            ],\n          },\n        },\n        {\n          $lookup: {\n            from: 'activityproposals',\n            let: { id: '$proposalId' },\n            pipeline: [\n              {\n                $match: {\n                  $expr: {\n                    $and: [\n                      { $eq: ['$_id', '$$id'] },\n                      { $eq: ['$isDeleted', false] },\n                    ],\n                  },\n                },\n              },\n            ],\n            as: 'proposalData',\n          },\n        },\n        { $unwind: '$proposalData' },\n        { $sort: sortObject },\n        {\n          $facet: {\n            records: [{ $skip: pageIndex * pageSize }, { $limit: pageSize }],\n            // totalCount: [{ $count: 'count' }],\n          },\n        },\n      ])\n      .exec();\n    const count = allReportsData[0].records.length;\n\n    let statusName;\n    for (const data of allReportsData[0].records) {\n      statusName = await this.userService.getStatusName(\n        data.outcomeReportStatus,\n      );\n      data.statusName = statusName;\n    }\n    console.log('allReportsData = ', allReportsData);\n\n    return { records: allReportsData[0].records, count: Math.ceil(count / 10) };\n  }\n\n  async updateOutcomeReport(\n    reportId: string,\n    editReportDTO: EditOutcomeReportDTO,\n    user: any,\n  ) {\n    Logger.debug('ReportsService.updateOutcomeReport');\n    try {\n      const foundRecord = await this.outcomeReportModel\n        .findOne({\n          outcomeReportId: reportId,\n          isDeleted: false,\n        })\n        .exec();\n      console.log('foundRecord = ', foundRecord);\n      let result;\n\n      console.log(\n        'editReportDTO.additionalInfoFile = ',\n        editReportDTO.additionalInfoFile,\n      );\n      if (editReportDTO.additionalInfoFile) {\n        result =\n          editReportDTO.additionalInfoFile['fileName'].toUpperCase() ===\n          foundRecord.additionalInfoFile['fileName'].toUpperCase();\n        if (!result) {\n          await this.deletePublicFile(\n            foundRecord.additionalInfoFile['fileName'],\n          );\n        }\n      }\n\n      const updatedReport = await this.outcomeReportModel\n        .findOneAndUpdate(\n          { outcomeReportId: reportId, isDeleted: false },\n          editReportDTO,\n          {\n            new: true,\n          },\n        )\n        .exec();\n      await this.melpService.addActivityLog(\n        user,\n        `Outcome Report - ${updatedReport.outcomeReportCode} has been updated.`,\n      );\n\n      return updatedReport;\n    } catch (error) {\n      /**Handle errors here */\n      Logger.debug('Catch: ReportsService.updateReport');\n      console.log(error);\n      return error;\n    }\n  }\n\n  async getOutcomeAndOutputReportStatusWiseCount(\n    year: number,\n    networkId: any,\n    partnerId: any,\n  ) {\n    Logger.debug('ReportsService.getOutcomeAndOutputReportStatusWiseCount');\n    if (networkId === 'null') networkId = null;\n    else networkId = new Types.ObjectId(networkId);\n\n    if (partnerId === 'null') partnerId = null;\n    else partnerId = new Types.ObjectId(partnerId);\n\n    const approvedStatusId = await this.userService.getStatusId(\n      StatusEnum.APPROVED,\n    );\n    const deniedStatusId = await this.userService.getStatusId(\n      StatusEnum.DENIED,\n    );\n    const submittedStatusId = await this.userService.getStatusId(\n      StatusEnum.SUBMITTED,\n    );\n    const infoRequestedStatusId = await this.userService.getStatusId(\n      StatusEnum.INFORMATION_REQUESTED,\n    );\n\n    let outputSubmittedCount = 0,\n      outputApprovedCount = 0,\n      outputDeniedCount = 0,\n      outputInfoRequestedCount = 0,\n      outcomeSubmittedCount = 0,\n      outcomeApprovedCount = 0,\n      outcomeDeniedCount = 0,\n      outcomeInfoRequestedCount = 0;\n\n    if (networkId === null && partnerId === null) {\n      outputSubmittedCount += await this.outputReportModel\n        .find({ year, isDeleted: false, outputReportStatus: submittedStatusId })\n        .count()\n        .exec();\n\n      outputApprovedCount += await this.outputReportModel\n        .find({ year, isDeleted: false, outputReportStatus: approvedStatusId })\n        .count()\n        .exec();\n\n      outputDeniedCount += await this.outputReportModel\n        .find({ year, isDeleted: false, outputReportStatus: deniedStatusId })\n        .count()\n        .exec();\n\n      outputInfoRequestedCount += await this.outputReportModel\n        .find({\n          year,\n          isDeleted: false,\n          outputReportStatus: infoRequestedStatusId,\n        })\n        .count()\n        .exec();\n\n      outcomeSubmittedCount += await this.outcomeReportModel\n        .find({\n          year,\n          isDeleted: false,\n          outcomeReportStatus: submittedStatusId,\n        })\n        .count()\n        .exec();\n\n      outcomeApprovedCount += await this.outcomeReportModel\n        .find({ year, isDeleted: false, outcomeReportStatus: approvedStatusId })\n        .count()\n        .exec();\n\n      outcomeDeniedCount += await this.outcomeReportModel\n        .find({ year, isDeleted: false, outcomeReportStatus: deniedStatusId })\n        .count()\n        .exec();\n\n      outcomeInfoRequestedCount += await this.outcomeReportModel\n        .find({\n          year,\n          isDeleted: false,\n          outcomeReportStatus: infoRequestedStatusId,\n        })\n        .count()\n        .exec();\n    } else {\n      outputSubmittedCount += await this.outputReportModel\n        .find({\n          year,\n          isDeleted: false,\n          networkId: networkId,\n          partnerId: partnerId,\n          outputReportStatus: submittedStatusId,\n        })\n        .count()\n        .exec();\n\n      outputApprovedCount += await this.outputReportModel\n        .find({\n          year,\n          isDeleted: false,\n          networkId: networkId,\n          partnerId: partnerId,\n          outputReportStatus: approvedStatusId,\n        })\n        .count()\n        .exec();\n\n      outputDeniedCount += await this.outputReportModel\n        .find({\n          year,\n          isDeleted: false,\n          networkId: networkId,\n          partnerId: partnerId,\n          outputReportStatus: deniedStatusId,\n        })\n        .count()\n        .exec();\n\n      outputInfoRequestedCount += await this.outputReportModel\n        .find({\n          year,\n          isDeleted: false,\n          networkId: networkId,\n          partnerId: partnerId,\n          outputReportStatus: infoRequestedStatusId,\n        })\n        .count()\n        .exec();\n\n      outcomeSubmittedCount += await this.outcomeReportModel\n        .find({\n          year,\n          isDeleted: false,\n          networkId: networkId,\n          partnerId: partnerId,\n          outcomeReportStatus: submittedStatusId,\n        })\n        .count()\n        .exec();\n\n      outcomeApprovedCount += await this.outcomeReportModel\n        .find({\n          year,\n          isDeleted: false,\n          networkId: networkId,\n          partnerId: partnerId,\n          outcomeReportStatus: approvedStatusId,\n        })\n        .count()\n        .exec();\n\n      outcomeDeniedCount += await this.outcomeReportModel\n        .find({\n          year,\n          isDeleted: false,\n          networkId: networkId,\n          partnerId: partnerId,\n          outcomeReportStatus: deniedStatusId,\n        })\n        .count()\n        .exec();\n\n      outcomeInfoRequestedCount += await this.outcomeReportModel\n        .find({\n          year,\n          isDeleted: false,\n          networkId: networkId,\n          partnerId: partnerId,\n          outcomeReportStatus: infoRequestedStatusId,\n        })\n        .count()\n        .exec();\n    }\n\n    return {\n      outputSubmittedCount,\n      outputApprovedCount,\n      outputDeniedCount,\n      outputInfoRequestedCount,\n      outcomeSubmittedCount,\n      outcomeApprovedCount,\n      outcomeDeniedCount,\n      outcomeInfoRequestedCount,\n    };\n  }\n\n  async commonFunctionForParticipantionCounts(\n    outputReportList: OutputReport[],\n  ) {\n    Logger.debug('ReportsService.commonFunctionForParticipantionCounts');\n    let manCount = 0,\n      womanCount = 0,\n      otherCount = 0,\n      notSayCount = 0,\n      below18Count = 0,\n      below25Count = 0,\n      below65Count = 0,\n      above65Count = 0,\n      americaRegionCount = 0,\n      africaRegionCount = 0,\n      arabRegionCount = 0,\n      asiaRegionCount = 0,\n      europeRegionCount = 0,\n      govtCount = 0,\n      unCount = 0,\n      ngoCount = 0,\n      riverCount = 0,\n      academiaCount = 0,\n      privateCount = 0,\n      waterUtilityCount = 0,\n      independentCount = 0;\n\n    for (const outputReport of outputReportList) {\n      // gender wise counts\n      manCount +=\n        outputReport.participantProfileActivityParticipation.enrolled['male'];\n      womanCount +=\n        outputReport.participantProfileActivityParticipation.enrolled['female'];\n      otherCount +=\n        outputReport.participantProfileActivityParticipation.enrolled['other'];\n      notSayCount +=\n        outputReport.participantProfileActivityParticipation.enrolled[\n          'ratherNotSay'\n        ];\n\n      // age wise counts\n      below18Count += outputReport.participantProfileAge['below18'];\n      below25Count += outputReport.participantProfileAge['below25'];\n      below65Count += outputReport.participantProfileAge['below65'];\n      above65Count += outputReport.participantProfileAge['above65'];\n\n      //region wise counts\n      for (const region of outputReport.participantProfileRegion) {\n        if (region.key === RegionEnum.ASIA) asiaRegionCount += region.value;\n        if (region.key === RegionEnum.AMERICA)\n          americaRegionCount += region.value;\n        if (region.key === RegionEnum.AFRICA) africaRegionCount += region.value;\n        if (region.key === RegionEnum.ARAB) arabRegionCount += region.value;\n        if (region.key === RegionEnum.EUROPE) europeRegionCount += region.value;\n      }\n\n      // type of institution wise counts\n      for (const institutionalAffiliation of outputReport.participantProfileInstitutionalAffiliation) {\n        if (institutionalAffiliation.key === TypeOfInstitutionEnum.GOVT)\n          govtCount += institutionalAffiliation.value;\n        else if (institutionalAffiliation.key === TypeOfInstitutionEnum.UN)\n          unCount += institutionalAffiliation.value;\n        else if (institutionalAffiliation.key === TypeOfInstitutionEnum.NGO)\n          ngoCount += institutionalAffiliation.value;\n        else if (\n          institutionalAffiliation.key === TypeOfInstitutionEnum.ACADEMIA\n        )\n          academiaCount += institutionalAffiliation.value;\n        else if (institutionalAffiliation.key === TypeOfInstitutionEnum.RIVER)\n          riverCount += institutionalAffiliation.value;\n        else if (institutionalAffiliation.key === TypeOfInstitutionEnum.UTILITY)\n          waterUtilityCount += institutionalAffiliation.value;\n        else if (institutionalAffiliation.key === TypeOfInstitutionEnum.PRIVATE)\n          privateCount += institutionalAffiliation.value;\n        else if (\n          institutionalAffiliation.key === TypeOfInstitutionEnum.INDEPENDENT\n        )\n          independentCount += institutionalAffiliation.value;\n      }\n    }\n\n    const genderCount = manCount + womanCount + otherCount + notSayCount;\n    const ageCount = below18Count + below25Count + below65Count + above65Count;\n    const regionCount =\n      asiaRegionCount +\n      americaRegionCount +\n      africaRegionCount +\n      arabRegionCount +\n      europeRegionCount;\n    const typeOfInstitutionCount =\n      govtCount +\n      unCount +\n      ngoCount +\n      academiaCount +\n      riverCount +\n      waterUtilityCount +\n      privateCount +\n      independentCount;\n\n    return {\n      manCount,\n      womanCount,\n      otherCount,\n      notSayCount,\n      genderCount,\n      below18Count,\n      below25Count,\n      below65Count,\n      above65Count,\n      ageCount,\n      americaRegionCount,\n      asiaRegionCount,\n      africaRegionCount,\n      arabRegionCount,\n      europeRegionCount,\n      regionCount,\n      govtCount,\n      unCount,\n      ngoCount,\n      academiaCount,\n      riverCount,\n      waterUtilityCount,\n      privateCount,\n      independentCount,\n      typeOfInstitutionCount,\n    };\n  }\n\n  async getParticipationInfo(year: number, user: any) {\n    Logger.debug('ReportsService.getParticipationInfo');\n    if (user.networkId === null && user.partnerId === null) {\n      const outputReportList = await this.outputReportModel\n        .find({ isDeleted: false, year })\n        .exec();\n      return this.commonFunctionForParticipantionCounts(outputReportList);\n    } else {\n      const outputReportList = await this.outputReportModel\n        .find({\n          year,\n          isDeleted: false,\n          networkId: user.networkId,\n          partnerId: user.partnerId,\n        })\n        .exec();\n      return this.commonFunctionForParticipantionCounts(outputReportList);\n    }\n  }\n\n  async commonFunctionForOutputReportSummaryInfo(\n    outputReportList: OutputReport[],\n  ) {\n    Logger.debug('ReportsService.commonFunctionForOutputReportSummaryInfo');\n    let veryHighKnowledgeCount = 0,\n      highKnowledgeCount = 0,\n      mediumKnowledgeCount = 0,\n      lowKnowledgeCount = 0,\n      noKnowledgeCount = 0,\n      veryBeneficialCount = 0,\n      somewhatBeneficialCount = 0,\n      notBeneficialCount = 0,\n      extremelyRelevantCount = 0,\n      relevantCount = 0,\n      slightlyRelevantCount = 0,\n      notRelevantCount = 0,\n      exceededExpectationCount = 0,\n      partialExpectationCount = 0,\n      fullExpectationCount = 0,\n      noExpectationCount = 0,\n      instituteKnowledgeCount = 0,\n      outsideKnowledgeCount = 0,\n      waterSectorKnowledgeCount = 0,\n      educationPurposeKnowledgeCount = 0,\n      communityChangesKnowledgeCount = 0,\n      policyChangesKnowledgeCount = 0,\n      waterPloicyKnowledgeCount = 0,\n      notApplyKnowledgeCount = 0;\n    for (const outputReport of outputReportList) {\n      for (const degreeOfKnowledge of outputReport.degreeOfKnowledgeAfterParticipating) {\n        if (degreeOfKnowledge.key === DegreeOfKnowledgeGainedEnum.VERYHIGH)\n          veryHighKnowledgeCount += degreeOfKnowledge.value;\n        else if (degreeOfKnowledge.key === DegreeOfKnowledgeGainedEnum.HIGH)\n          highKnowledgeCount += degreeOfKnowledge.value;\n        else if (degreeOfKnowledge.key === DegreeOfKnowledgeGainedEnum.MEDIUM)\n          mediumKnowledgeCount += degreeOfKnowledge.value;\n        else if (degreeOfKnowledge.key === DegreeOfKnowledgeGainedEnum.LOW)\n          lowKnowledgeCount += degreeOfKnowledge.value;\n        else if (degreeOfKnowledge.key === DegreeOfKnowledgeGainedEnum.NONE)\n          noKnowledgeCount += degreeOfKnowledge.value;\n      }\n\n      for (const benefitLevel of outputReport.benefitOnOverallLearningObjective) {\n        if (benefitLevel.key === BenefitsLevelEnum.BENEFICIAL)\n          veryBeneficialCount += benefitLevel.value;\n        else if (benefitLevel.key === BenefitsLevelEnum.SOMEWHATBENEFICIAL)\n          somewhatBeneficialCount += benefitLevel.value;\n        else if (benefitLevel.key === BenefitsLevelEnum.NOTBENEFICIAL)\n          notBeneficialCount += benefitLevel.value;\n      }\n\n      for (const relevanceLevel of outputReport.relevanceInSustainableWaterResourceManagement) {\n        if (relevanceLevel.key === RelevanceLevelEnum.EXTREME)\n          extremelyRelevantCount += relevanceLevel.value;\n        else if (relevanceLevel.key === RelevanceLevelEnum.RELEVANT)\n          relevantCount += relevanceLevel.value;\n        else if (relevanceLevel.key === RelevanceLevelEnum.SLIGHTLY)\n          slightlyRelevantCount += relevanceLevel.value;\n        else if (relevanceLevel.key === RelevanceLevelEnum.NOTRELEVANT)\n          notRelevantCount += relevanceLevel.value;\n      }\n\n      for (const expectationLevel of outputReport.levelOfExpectationsMet) {\n        if (expectationLevel.key === ExpectationLevelEnum.EXCEEDED)\n          exceededExpectationCount += expectationLevel.value;\n        else if (expectationLevel.key === ExpectationLevelEnum.FULL)\n          fullExpectationCount += expectationLevel.value;\n        else if (expectationLevel.key === ExpectationLevelEnum.PARTIAL)\n          partialExpectationCount += expectationLevel.value;\n        else if (expectationLevel.key === ExpectationLevelEnum.NOTMET)\n          noExpectationCount += expectationLevel.value;\n      }\n\n      for (const knowledgeApplication of outputReport.knowledgeApplication) {\n        if (knowledgeApplication.key === KnowledgeGainedEnum.INSIDE_INSTITUTION)\n          instituteKnowledgeCount += knowledgeApplication.value;\n        else if (\n          knowledgeApplication.key === KnowledgeGainedEnum.OUTSIDE_INSTITUTION\n        )\n          outsideKnowledgeCount += knowledgeApplication.value;\n        else if (knowledgeApplication.key === KnowledgeGainedEnum.ROUTINE)\n          waterSectorKnowledgeCount += knowledgeApplication.value;\n        else if (knowledgeApplication.key === KnowledgeGainedEnum.EDUCATIONAL)\n          educationPurposeKnowledgeCount += knowledgeApplication.value;\n        else if (knowledgeApplication.key === KnowledgeGainedEnum.IMPROVEMENTS)\n          communityChangesKnowledgeCount += knowledgeApplication.value;\n        else if (knowledgeApplication.key === KnowledgeGainedEnum.POLICY_LEVEL)\n          policyChangesKnowledgeCount += knowledgeApplication.value;\n        else if (knowledgeApplication.key === KnowledgeGainedEnum.LAW)\n          waterPloicyKnowledgeCount += knowledgeApplication.value;\n        else if (knowledgeApplication.key === KnowledgeGainedEnum.NOT_APPLIED)\n          notApplyKnowledgeCount += knowledgeApplication.value;\n      }\n    }\n\n    return {\n      degreeOfKnowledge: {\n        veryHighKnowledgeCount,\n        highKnowledgeCount,\n        mediumKnowledgeCount,\n        lowKnowledgeCount,\n        noKnowledgeCount,\n      },\n      levelOfBenefits: {\n        veryBeneficialCount,\n        somewhatBeneficialCount,\n        notBeneficialCount,\n      },\n      levelOfRelevance: {\n        extremelyRelevantCount,\n        relevantCount,\n        slightlyRelevantCount,\n        notRelevantCount,\n      },\n      levelOfExpectation: {\n        exceededExpectationCount,\n        partialExpectationCount,\n        fullExpectationCount,\n        noExpectationCount,\n      },\n      knowledgeApplication: {\n        instituteKnowledgeCount,\n        outsideKnowledgeCount,\n        waterSectorKnowledgeCount,\n        educationPurposeKnowledgeCount,\n        communityChangesKnowledgeCount,\n        policyChangesKnowledgeCount,\n        waterPloicyKnowledgeCount,\n        notApplyKnowledgeCount,\n      },\n    };\n  }\n\n  async getOutputReportSummary(year: number, user: any) {\n    Logger.debug('ReportsService.getOutputReportSummary');\n    if (user.networkId === null && user.partnerId === null) {\n      const outputReportList = await this.outputReportModel\n        .find({ isDeleted: false, year })\n        .exec();\n      return this.commonFunctionForOutputReportSummaryInfo(outputReportList);\n    } else {\n      const outputReportList = await this.outputReportModel\n        .find({\n          year,\n          isDeleted: false,\n          networkId: user.networkId,\n          partnerId: user.partnerId,\n        })\n        .exec();\n      return this.commonFunctionForOutputReportSummaryInfo(outputReportList);\n    }\n  }\n\n  async commonFunctionForOutcomeReportSummaryInfo(\n    outcomeReportList: OutcomeReport[],\n  ) {\n    Logger.debug('ReportsService.commonFunctionForOutcomeReportSummaryInfo');\n    let govtCount = 0,\n      unCount = 0,\n      ngoCount = 0,\n      riverCount = 0,\n      academiaCount = 0,\n      privateCount = 0,\n      waterUtilityCount = 0,\n      independentCount = 0,\n      countriesCount = 0,\n      raisingAwarenessCount = 0,\n      routineWorkKnowledgeCount = 0,\n      educationPurposeKnowledgeCount = 0,\n      waterProjectCount = 0,\n      technologyInnovationCount = 0,\n      sdgCount = 0,\n      waterPolicyCount = 0;\n    for (const outcomeReport of outcomeReportList) {\n      raisingAwarenessCount +=\n        outcomeReport.knowledgeAppliedByGender.raisingAwareness['male'] +\n        outcomeReport.knowledgeAppliedByGender.raisingAwareness['female'] +\n        outcomeReport.knowledgeAppliedByGender.raisingAwareness['other'] +\n        outcomeReport.knowledgeAppliedByGender.raisingAwareness['ratherNotSay'];\n\n      routineWorkKnowledgeCount +=\n        outcomeReport.knowledgeAppliedByGender.knowledgeInRoutineWork['male'] +\n        outcomeReport.knowledgeAppliedByGender.knowledgeInRoutineWork[\n          'female'\n        ] +\n        outcomeReport.knowledgeAppliedByGender.knowledgeInRoutineWork['other'] +\n        outcomeReport.knowledgeAppliedByGender.knowledgeInRoutineWork[\n          'ratherNotSay'\n        ];\n\n      educationPurposeKnowledgeCount +=\n        outcomeReport.knowledgeAppliedByGender.knowledgeInEducation['male'] +\n        outcomeReport.knowledgeAppliedByGender.knowledgeInEducation['female'] +\n        outcomeReport.knowledgeAppliedByGender.knowledgeInEducation['other'] +\n        outcomeReport.knowledgeAppliedByGender.knowledgeInEducation[\n          'ratherNotSay'\n        ];\n\n      waterProjectCount +=\n        outcomeReport.knowledgeAppliedByGender.waterProjectImplementation[\n          'male'\n        ] +\n        outcomeReport.knowledgeAppliedByGender.waterProjectImplementation[\n          'female'\n        ] +\n        outcomeReport.knowledgeAppliedByGender.waterProjectImplementation[\n          'other'\n        ] +\n        outcomeReport.knowledgeAppliedByGender.waterProjectImplementation[\n          'ratherNotSay'\n        ];\n\n      technologyInnovationCount +=\n        outcomeReport.knowledgeAppliedByGender.techInnovation['male'] +\n        outcomeReport.knowledgeAppliedByGender.techInnovation['female'] +\n        outcomeReport.knowledgeAppliedByGender.techInnovation['other'] +\n        outcomeReport.knowledgeAppliedByGender.techInnovation['ratherNotSay'];\n\n      sdgCount +=\n        outcomeReport.knowledgeAppliedByGender.achieveSGD['male'] +\n        outcomeReport.knowledgeAppliedByGender.achieveSGD['female'] +\n        outcomeReport.knowledgeAppliedByGender.achieveSGD['other'] +\n        outcomeReport.knowledgeAppliedByGender.achieveSGD['ratherNotSay'];\n\n      waterPolicyCount +=\n        outcomeReport.knowledgeAppliedByGender.formulatingWaterPolicy['male'] +\n        outcomeReport.knowledgeAppliedByGender.formulatingWaterPolicy[\n          'female'\n        ] +\n        outcomeReport.knowledgeAppliedByGender.formulatingWaterPolicy['other'] +\n        outcomeReport.knowledgeAppliedByGender.formulatingWaterPolicy[\n          'ratherNotSay'\n        ];\n\n      for (const institutionalChange of outcomeReport.policyChangesByInstitution) {\n        if (institutionalChange.key === TypeOfInstitutionEnum.GOVT)\n          govtCount += institutionalChange.value;\n        else if (institutionalChange.key === TypeOfInstitutionEnum.UN)\n          unCount += institutionalChange.value;\n        else if (institutionalChange.key === TypeOfInstitutionEnum.NGO)\n          ngoCount += institutionalChange.value;\n        else if (institutionalChange.key === TypeOfInstitutionEnum.ACADEMIA)\n          academiaCount += institutionalChange.value;\n        else if (institutionalChange.key === TypeOfInstitutionEnum.RIVER)\n          riverCount += institutionalChange.value;\n        else if (institutionalChange.key === TypeOfInstitutionEnum.UTILITY)\n          waterUtilityCount += institutionalChange.value;\n        else if (institutionalChange.key === TypeOfInstitutionEnum.PRIVATE)\n          privateCount += institutionalChange.value;\n        else if (institutionalChange.key === TypeOfInstitutionEnum.INDEPENDENT)\n          independentCount += institutionalChange.value;\n      }\n\n      countriesCount += outcomeReport.policyChangesByCountry;\n    }\n    const totalRelevantInstitutionalChangeCount =\n      govtCount +\n      unCount +\n      ngoCount +\n      academiaCount +\n      riverCount +\n      waterUtilityCount +\n      privateCount +\n      independentCount;\n\n    return {\n      knowledgeApplied: {\n        raisingAwarenessCount,\n        routineWorkKnowledgeCount,\n        educationPurposeKnowledgeCount,\n        waterProjectCount,\n        technologyInnovationCount,\n        sdgCount,\n        waterPolicyCount,\n      },\n      relevantInstitutionalChange: {\n        govtCount,\n        unCount,\n        ngoCount,\n        academiaCount,\n        riverCount,\n        waterUtilityCount,\n        privateCount,\n        independentCount,\n        totalRelevantInstitutionalChangeCount,\n      },\n      countriesRelevantInstitutionalChange: { countriesCount },\n    };\n  }\n\n  async getOutcomeReportSummary(year: number, user: any) {\n    Logger.debug('ReportsService.getOutcomeReportSummary');\n    if (user.networkId === null && user.partnerId === null) {\n      const outcomeReportList = await this.outcomeReportModel\n        .find({ isDeleted: false, year })\n        .exec();\n\n      return this.commonFunctionForOutcomeReportSummaryInfo(outcomeReportList);\n    } else {\n      const outcomeReportList = await this.outcomeReportModel\n        .find({\n          year,\n          isDeleted: false,\n          networkId: user.networkId,\n          partnerId: user.partnerId,\n        })\n        .exec();\n      return this.commonFunctionForOutcomeReportSummaryInfo(outcomeReportList);\n    }\n  }\n\n  async deleteOutcomeReport(reportId: string, user: any) {\n    Logger.debug('ReportsService.deleteOutcomeReport');\n    try {\n      const updatedReport = await this.outcomeReportModel\n        .findOneAndUpdate(\n          {\n            isDeleted: false,\n            outcomeReportId: reportId,\n          },\n          { isDeleted: true },\n          { new: true },\n        )\n        .exec();\n      await this.melpService.addActivityLog(\n        user,\n        `Outcome Report - ${updatedReport.outcomeReportCode} has been deleted.`,\n      );\n      return updatedReport;\n    } catch (error) {\n      console.log('deleteOutcomeReport.catch', error);\n    }\n  }\n\n  /**Download functions for Outcome Report Download */\n  async downloadOutreachDetails(\n    year: number,\n    outreachSheet: Worksheet,\n    activityCode: string,\n    activityName: string,\n    reportCode: string,\n    outreachData: any,\n  ) {\n    Logger.debug('ReportsService.downloadOutreachDetails');\n    outreachSheet.columns = [\n      { header: 'Year', key: 'year', width: 6 },\n      { header: 'Outcome Report Code', key: 'reportCode', width: 6 },\n      { header: 'Activity Code', key: 'activityCode', width: 20 },\n      { header: 'Activity Name', key: 'activityName', width: 20 },\n      { header: 'Participants Enrolled', key: 'enrolled', width: 20 },\n      { header: 'Participants Contacted', key: 'contacted', width: 20 },\n      { header: 'Participants Responded', key: 'responded', width: 20 },\n    ];\n    const enrolledTotal =\n      outreachData.enrolledParticipants['male'] +\n      outreachData.enrolledParticipants['female'] +\n      outreachData.enrolledParticipants['ratherNotSay'] +\n      outreachData.enrolledParticipants['other'];\n\n    const enrolledObj =\n      'male= ' +\n      outreachData.enrolledParticipants['male'] +\n      ', ' +\n      'female= ' +\n      outreachData.enrolledParticipants['female'] +\n      ', ' +\n      'rather_not_say= ' +\n      outreachData.enrolledParticipants['ratherNotSay'] +\n      ', ' +\n      'other= ' +\n      outreachData.enrolledParticipants['other'] +\n      ', ' +\n      'total= ' +\n      enrolledTotal;\n\n    const contactedTotal =\n      outreachData.participantReached['male'] +\n      outreachData.participantReached['female'] +\n      outreachData.participantReached['ratherNotSay'] +\n      outreachData.participantReached['other'];\n    const contactedObj =\n      'male= ' +\n      outreachData.participantReached['male'] +\n      ', ' +\n      'female= ' +\n      outreachData.participantReached['female'] +\n      ', ' +\n      'rather_not_say= ' +\n      outreachData.participantReached['ratherNotSay'] +\n      ', ' +\n      'other= ' +\n      outreachData.participantReached['other'] +\n      ', ' +\n      'total= ' +\n      contactedTotal;\n\n    const respondedTotal =\n      outreachData.participantRespondedToOutcomeSurvey['male'] +\n      outreachData.participantRespondedToOutcomeSurvey['female'] +\n      outreachData.participantRespondedToOutcomeSurvey['ratherNotSay'] +\n      outreachData.participantRespondedToOutcomeSurvey['other'];\n    const respondedObj =\n      'male= ' +\n      outreachData.participantRespondedToOutcomeSurvey['male'] +\n      ', ' +\n      'female= ' +\n      outreachData.participantRespondedToOutcomeSurvey['female'] +\n      ', ' +\n      'rather_not_say= ' +\n      outreachData.participantRespondedToOutcomeSurvey['ratherNotSay'] +\n      ', ' +\n      'other= ' +\n      outreachData.participantRespondedToOutcomeSurvey['other'] +\n      ', ' +\n      'total= ' +\n      respondedTotal;\n\n    outreachSheet.addRow({\n      year,\n      reportCode,\n      activityCode,\n      activityName,\n      enrolled: enrolledObj,\n      contacted: contactedObj,\n      responded: respondedObj,\n    });\n\n    outreachSheet.getRow(1).eachCell((cell) => {\n      cell.font = { bold: true };\n    });\n  }\n\n  async downloadPositiveResponseDetails(\n    year: number,\n    positiveResponsesSheet: Worksheet,\n    activityCode: string,\n    activityName: string,\n    reportCode: string,\n    positiveResponseData: any,\n  ) {\n    Logger.debug('ReportsService.downloadPositiveResponseDetails');\n    positiveResponsesSheet.columns = [\n      { header: 'Year', key: 'year', width: 6 },\n      { header: 'Outcome Report Code', key: 'reportCode', width: 6 },\n      { header: 'Activity Code', key: 'activityCode', width: 20 },\n      { header: 'Activity Name', key: 'activityName', width: 20 },\n      {\n        header: 'Participants Responded Knowledge Shared',\n        key: 'knowledgeSharedParticipants',\n        width: 30,\n      },\n      {\n        header: 'Participants Responded Knowledge Applied',\n        key: 'knowledgeAppliedParticipants',\n        width: 30,\n      },\n      {\n        header: 'Participants Responded Institutional Change',\n        key: 'institutionalChangeParticipants',\n        width: 30,\n      },\n    ];\n    const sharedTotal =\n      positiveResponseData.knowledgeSharedParticipants['male'] +\n      positiveResponseData.knowledgeSharedParticipants['female'] +\n      positiveResponseData.knowledgeSharedParticipants['ratherNotSay'] +\n      positiveResponseData.knowledgeSharedParticipants['other'];\n\n    const sharedObj =\n      'male= ' +\n      positiveResponseData.knowledgeSharedParticipants['male'] +\n      ', ' +\n      'female= ' +\n      positiveResponseData.knowledgeSharedParticipants['female'] +\n      ', ' +\n      'rather_not_say= ' +\n      positiveResponseData.knowledgeSharedParticipants['ratherNotSay'] +\n      ', ' +\n      'other= ' +\n      positiveResponseData.knowledgeSharedParticipants['other'] +\n      ', ' +\n      'total= ' +\n      sharedTotal;\n\n    const appliedTotal =\n      positiveResponseData.knowledgeAppliedParticipants['male'] +\n      positiveResponseData.knowledgeAppliedParticipants['female'] +\n      positiveResponseData.knowledgeAppliedParticipants['ratherNotSay'] +\n      positiveResponseData.knowledgeAppliedParticipants['other'];\n\n    const appliedObj =\n      'male= ' +\n      positiveResponseData.knowledgeAppliedParticipants['male'] +\n      ', ' +\n      'female= ' +\n      positiveResponseData.knowledgeAppliedParticipants['female'] +\n      ', ' +\n      'rather_not_say= ' +\n      positiveResponseData.knowledgeAppliedParticipants['ratherNotSay'] +\n      ', ' +\n      'other= ' +\n      positiveResponseData.knowledgeAppliedParticipants['other'] +\n      ', ' +\n      'total= ' +\n      appliedTotal;\n\n    const changeTotal =\n      positiveResponseData.institutionalChangeParticipants['male'] +\n      positiveResponseData.institutionalChangeParticipants['female'] +\n      positiveResponseData.institutionalChangeParticipants['ratherNotSay'] +\n      positiveResponseData.institutionalChangeParticipants['other'];\n\n    const changeObj =\n      'male= ' +\n      positiveResponseData.institutionalChangeParticipants['male'] +\n      ', ' +\n      'female= ' +\n      positiveResponseData.institutionalChangeParticipants['female'] +\n      ', ' +\n      'rather_not_say= ' +\n      positiveResponseData.institutionalChangeParticipants['ratherNotSay'] +\n      ', ' +\n      'other= ' +\n      positiveResponseData.institutionalChangeParticipants['other'] +\n      ', ' +\n      'total= ' +\n      changeTotal;\n\n    positiveResponsesSheet.addRow({\n      year,\n      reportCode,\n      activityCode,\n      activityName,\n      knowledgeSharedParticipants: sharedObj,\n      knowledgeAppliedParticipants: appliedObj,\n      institutionalChangeParticipants: changeObj,\n    });\n\n    positiveResponsesSheet.getRow(1).eachCell((cell) => {\n      cell.font = { bold: true };\n    });\n  }\n  async downloadKnowledgeAppliedGenderDetails(\n    year: number,\n    knowledgeAppliedGenderSheet: Worksheet,\n    activityCode: string,\n    activityName: string,\n    reportCode: string,\n    knowledgeData: any,\n  ) {\n    Logger.debug('ReportsService.downloadKnowledgeAppliedGenderDetails');\n    knowledgeAppliedGenderSheet.columns = [\n      { header: 'Year', key: 'year', width: 6 },\n      { header: 'Outcome Report Code', key: 'reportCode', width: 6 },\n      { header: 'Activity Code', key: 'activityCode', width: 20 },\n      { header: 'Activity Name', key: 'activityName', width: 20 },\n      { header: 'Raising Awareness', key: 'raisingAwareness', width: 20 },\n      {\n        header: 'Knowledge In Routine Work',\n        key: 'knowledgeInRoutineWork',\n        width: 20,\n      },\n      {\n        header: 'Knowledge In Education',\n        key: 'knowledgeInEducation',\n        width: 20,\n      },\n      {\n        header: 'Water Project Implementation',\n        key: 'waterProjectImplementation',\n        width: 20,\n      },\n      { header: 'Tech Innovation', key: 'techInnovation', width: 20 },\n      { header: 'Achieve SGD', key: 'achieveSGD', width: 20 },\n      {\n        header: 'Formulating Water Policy',\n        key: 'formulatingWaterPolicy',\n        width: 20,\n      },\n    ];\n    const awarenessTotal =\n      knowledgeData.raisingAwareness['male'] +\n      knowledgeData.raisingAwareness['female'] +\n      knowledgeData.raisingAwareness['ratherNotSay'] +\n      knowledgeData.raisingAwareness['other'];\n\n    const awarenessObj =\n      'male= ' +\n      knowledgeData.raisingAwareness['male'] +\n      ', ' +\n      'female= ' +\n      knowledgeData.raisingAwareness['female'] +\n      ', ' +\n      'rather_not_say= ' +\n      knowledgeData.raisingAwareness['ratherNotSay'] +\n      ', ' +\n      'other= ' +\n      knowledgeData.raisingAwareness['other'] +\n      ', ' +\n      'total= ' +\n      awarenessTotal;\n\n    const routineWorkTotal =\n      knowledgeData.knowledgeInRoutineWork['male'] +\n      knowledgeData.knowledgeInRoutineWork['female'] +\n      knowledgeData.knowledgeInRoutineWork['ratherNotSay'] +\n      knowledgeData.knowledgeInRoutineWork['other'];\n    const routineWorkObj =\n      'male= ' +\n      knowledgeData.knowledgeInRoutineWork['male'] +\n      ', ' +\n      'female= ' +\n      knowledgeData.knowledgeInRoutineWork['female'] +\n      ', ' +\n      'rather_not_say= ' +\n      knowledgeData.knowledgeInRoutineWork['ratherNotSay'] +\n      ', ' +\n      'other= ' +\n      knowledgeData.knowledgeInRoutineWork['other'] +\n      ', ' +\n      'total= ' +\n      routineWorkTotal;\n\n    const educationTotal =\n      knowledgeData.knowledgeInEducation['male'] +\n      knowledgeData.knowledgeInEducation['female'] +\n      knowledgeData.knowledgeInEducation['ratherNotSay'] +\n      knowledgeData.knowledgeInEducation['other'];\n\n    const educationObj =\n      'male= ' +\n      knowledgeData.knowledgeInEducation['male'] +\n      ', ' +\n      'female= ' +\n      knowledgeData.knowledgeInEducation['female'] +\n      ', ' +\n      'rather_not_say= ' +\n      knowledgeData.knowledgeInEducation['ratherNotSay'] +\n      ', ' +\n      'other= ' +\n      knowledgeData.knowledgeInEducation['other'] +\n      ', ' +\n      'total= ' +\n      educationTotal;\n\n    const implementTotal =\n      knowledgeData.waterProjectImplementation['male'] +\n      knowledgeData.waterProjectImplementation['female'] +\n      knowledgeData.waterProjectImplementation['ratherNotSay'] +\n      knowledgeData.waterProjectImplementation['other'];\n\n    const impObj =\n      'male= ' +\n      knowledgeData.waterProjectImplementation['male'] +\n      ', ' +\n      'female= ' +\n      knowledgeData.waterProjectImplementation['female'] +\n      ', ' +\n      'rather_not_say= ' +\n      knowledgeData.waterProjectImplementation['ratherNotSay'] +\n      ', ' +\n      'other= ' +\n      knowledgeData.waterProjectImplementation['other'] +\n      ', ' +\n      'total= ' +\n      implementTotal;\n\n    const innovationTotal =\n      knowledgeData.techInnovation['male'] +\n      knowledgeData.techInnovation['female'] +\n      knowledgeData.techInnovation['ratherNotSay'] +\n      knowledgeData.techInnovation['other'];\n\n    const innovationObj =\n      'male= ' +\n      knowledgeData.techInnovation['male'] +\n      ', ' +\n      'female= ' +\n      knowledgeData.techInnovation['female'] +\n      ', ' +\n      'rather_not_say= ' +\n      knowledgeData.techInnovation['ratherNotSay'] +\n      ', ' +\n      'other= ' +\n      knowledgeData.techInnovation['other'] +\n      ', ' +\n      'total= ' +\n      innovationTotal;\n\n    const sdgTotal =\n      knowledgeData.achieveSGD['male'] +\n      knowledgeData.achieveSGD['female'] +\n      knowledgeData.achieveSGD['ratherNotSay'] +\n      knowledgeData.achieveSGD['other'];\n\n    const sdgObj =\n      'male= ' +\n      knowledgeData.achieveSGD['male'] +\n      ', ' +\n      'female= ' +\n      knowledgeData.achieveSGD['female'] +\n      ', ' +\n      'rather_not_say= ' +\n      knowledgeData.achieveSGD['ratherNotSay'] +\n      ', ' +\n      'other= ' +\n      knowledgeData.achieveSGD['other'] +\n      ', ' +\n      'total= ' +\n      sdgTotal;\n\n    const policyTotal =\n      knowledgeData.formulatingWaterPolicy['male'] +\n      knowledgeData.formulatingWaterPolicy['female'] +\n      knowledgeData.formulatingWaterPolicy['ratherNotSay'] +\n      knowledgeData.formulatingWaterPolicy['other'];\n\n    const policyObj =\n      'male= ' +\n      knowledgeData.formulatingWaterPolicy['male'] +\n      ', ' +\n      'female= ' +\n      knowledgeData.formulatingWaterPolicy['female'] +\n      ', ' +\n      'rather_not_say= ' +\n      knowledgeData.formulatingWaterPolicy['ratherNotSay'] +\n      ', ' +\n      'other= ' +\n      knowledgeData.formulatingWaterPolicy['other'] +\n      ', ' +\n      'total= ' +\n      policyTotal;\n\n    knowledgeAppliedGenderSheet.addRow({\n      year,\n      reportCode,\n      activityCode,\n      activityName,\n      raisingAwareness: awarenessObj,\n      knowledgeInRoutineWork: routineWorkObj,\n      knowledgeInEducation: educationObj,\n      waterProjectImplementation: impObj,\n      techInnovation: innovationObj,\n      achieveSGD: sdgObj,\n      formulatingWaterPolicy: policyObj,\n    });\n\n    knowledgeAppliedGenderSheet.getRow(1).eachCell((cell) => {\n      cell.font = { bold: true };\n    });\n  }\n\n  async downloadKnowledgeAppliedInstituteDetails(\n    year: number,\n    knowledgeAppliedInstitutionSheet: Worksheet,\n    activityCode: string,\n    activityName: string,\n    reportCode: string,\n    knowledgeData: any,\n  ) {\n    Logger.debug('ReportsService.downloadKnowledgeAppliedInstituteDetails');\n    knowledgeAppliedInstitutionSheet.columns = [\n      { header: 'Year', key: 'year', width: 6 },\n      { header: 'Output Report Code', key: 'reportCode', width: 6 },\n      { header: 'Activity Code', key: 'activityCode', width: 20 },\n      { header: 'Activity Name', key: 'activityName', width: 20 },\n      {\n        header: 'Institutional Affiliation',\n        key: 'institutionalAffiliation',\n        width: 40,\n      },\n      { header: 'No.of Participants', key: 'participantCount', width: 20 },\n    ];\n    for (const obj of knowledgeData) {\n      knowledgeAppliedInstitutionSheet.addRow({\n        year,\n        reportCode,\n        activityCode,\n        activityName,\n        institutionalAffiliation: obj.key,\n        participantCount: obj.value,\n      });\n    }\n    knowledgeAppliedInstitutionSheet.getRow(1).eachCell((cell) => {\n      cell.font = { bold: true };\n    });\n  }\n\n  async downloadPolicyChangesByInstitution(\n    year: number,\n    policyChangesInstitutionSheet: Worksheet,\n    activityCode: string,\n    activityName: string,\n    reportCode: string,\n    policyData: any,\n  ) {\n    Logger.debug('ReportsService.downloadPolicyChangesByInstitution');\n    policyChangesInstitutionSheet.columns = [\n      { header: 'Year', key: 'year', width: 6 },\n      { header: 'Output Report Code', key: 'reportCode', width: 6 },\n      { header: 'Activity Code', key: 'activityCode', width: 20 },\n      { header: 'Activity Name', key: 'activityName', width: 20 },\n      {\n        header: 'Institutional Affiliation',\n        key: 'institutionalAffiliation',\n        width: 40,\n      },\n      { header: 'No.of Participants', key: 'participantCount', width: 20 },\n    ];\n    for (const obj of policyData) {\n      policyChangesInstitutionSheet.addRow({\n        year,\n        reportCode,\n        activityCode,\n        activityName,\n        institutionalAffiliation: obj.key,\n        participantCount: obj.value,\n      });\n    }\n    policyChangesInstitutionSheet.getRow(1).eachCell((cell) => {\n      cell.font = { bold: true };\n    });\n  }\n\n  async downloadOutcomeReport(res, report, workbook: Workbook) {\n    Logger.debug('ReportsService.downloadOutcomeReport');\n\n    let outcomeReportSheet,\n      outreachSheet,\n      positiveResponsesSheet,\n      knowledgeAppliedGenderSheet,\n      knowledgeAppliedInstitutionSheet,\n      policyChangesInstitutionSheet;\n\n    if (!workbook.getWorksheet('Outcome_Report_Details'))\n      outcomeReportSheet = workbook.addWorksheet('Outcome_Report_Details');\n    else outcomeReportSheet = workbook.getWorksheet('Outcome_Report_Details');\n\n    outcomeReportSheet.columns = [\n      { header: 'Year', key: 'year', width: 6 },\n      { header: 'Outcome Report Code', key: 'reportCode', width: 6 },\n      { header: 'Activity Code', key: 'activityCode', width: 20 },\n      { header: 'Activity Name', key: 'activityName', width: 40 },\n      { header: 'Institute Name', key: 'instituteName', width: 20 },\n      {\n        header: 'OutcomeSurvey Submission Method',\n        key: 'outcomeSurveySubmissionMethod',\n        width: 20,\n      },\n      {\n        header: 'No. of Countries reporting RELEVANT INSTITUTIONAL CHANGE',\n        key: 'policyChangesByCountry',\n        width: 20,\n      },\n      {\n        header: 'No. of responses for Story of Change',\n        key: 'numberOfResponsesStoryOfChange',\n        width: 20,\n      },\n      { header: 'Additional Comment', key: 'additionalComment', width: 20 },\n      { header: 'Report Status', key: 'statusName', width: 20 },\n    ];\n\n    outcomeReportSheet.addRow({\n      year: report.year,\n      reportCode: report.outcomeReportCode,\n      activityCode: report.activityCode,\n      activityName: report.activityName,\n      instituteName: report.instituteName,\n      outcomeSurveySubmissionMethod: report.outcomeSurveySubmissionMethod,\n      policyChangesByCountry: report.policyChangesByCountry,\n      numberOfResponsesStoryOfChange: report.numberOfResponsesStoryOfChange,\n      additionalComment: report.additionalComment,\n      statusName: report.statusName,\n    });\n\n    outcomeReportSheet.getRow(1).eachCell((cell) => {\n      cell.font = { bold: true };\n    });\n\n    if (!workbook.getWorksheet('Outreach_Details'))\n      outreachSheet = workbook.addWorksheet('Outreach_Details');\n    else outreachSheet = workbook.getWorksheet('Outreach_Details');\n\n    await this.downloadOutreachDetails(\n      report.year,\n      outreachSheet,\n      report.activityCode,\n      report.activityName,\n      report.outcomeReportCode,\n      report.outreach,\n    );\n\n    if (!workbook.getWorksheet('Positive_Responses_Details'))\n      positiveResponsesSheet = workbook.addWorksheet(\n        'Positive_Responses_Details',\n      );\n    else\n      positiveResponsesSheet = workbook.getWorksheet(\n        'Positive_Responses_Details',\n      );\n\n    await this.downloadPositiveResponseDetails(\n      report.year,\n      positiveResponsesSheet,\n      report.activityCode,\n      report.activityName,\n      report.outcomeReportCode,\n      report.positiveResponses,\n    );\n\n    if (!workbook.getWorksheet('GenderWise_KnowledgeApplied'))\n      knowledgeAppliedGenderSheet = workbook.addWorksheet(\n        'GenderWise_KnowledgeApplied',\n      );\n    else\n      knowledgeAppliedGenderSheet = workbook.getWorksheet(\n        'GenderWise_KnowledgeApplied',\n      );\n\n    await this.downloadKnowledgeAppliedGenderDetails(\n      report.year,\n      knowledgeAppliedGenderSheet,\n      report.activityCode,\n      report.activityName,\n      report.outcomeReportCode,\n      report.knowledgeAppliedByGender,\n    );\n\n    if (!workbook.getWorksheet('Institution_KnowledgeApplied'))\n      knowledgeAppliedInstitutionSheet = workbook.addWorksheet(\n        'Institution_KnowledgeApplied',\n      );\n    else\n      knowledgeAppliedInstitutionSheet = workbook.getWorksheet(\n        'Institution_KnowledgeApplied',\n      );\n\n    await this.downloadKnowledgeAppliedInstituteDetails(\n      report.year,\n      knowledgeAppliedInstitutionSheet,\n      report.activityCode,\n      report.activityName,\n      report.outcomeReportCode,\n      report.knowledgeAppliedByInstitution,\n    );\n\n    if (!workbook.getWorksheet('Policy_Changes_By_Institution'))\n      policyChangesInstitutionSheet = workbook.addWorksheet(\n        'Policy_Changes_By_Institution',\n      );\n    else\n      policyChangesInstitutionSheet = workbook.getWorksheet(\n        'Policy_Changes_By_Institution',\n      );\n\n    await this.downloadPolicyChangesByInstitution(\n      report.year,\n      policyChangesInstitutionSheet,\n      report.activityCode,\n      report.activityName,\n      report.outcomeReportCode,\n      report.policyChangesByInstitution,\n    );\n  }\n\n  async downloadIndividualOutcomeReport(res, reportId: string) {\n    Logger.debug('ReportsService.downloadIndividualOutcomeReport');\n    const workbook = new Workbook();\n    // const outcomeReport = await this.getOutcomeReportById(reportId);\n    const outcomeReport = await this.outcomeReportModel\n      .findOne({ outcomeReportId: reportId, isDeleted: false })\n      .exec();\n    console.log('outcomeReport in individual = ', outcomeReport);\n    await this.downloadOutcomeReport(res, outcomeReport, workbook);\n    res.set({\n      'Access-Control-Expose-Headers': 'Content-Disposition',\n      'Content-Disposition':\n        'attachment; filename=' +\n        'Outcome Report-' +\n        outcomeReport.outcomeReportCode +\n        '.xlsx',\n    });\n    res.contentType(\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    );\n    await workbook.xlsx.write(res);\n  }\n\n  async downloadMultipleOutcomeReports(res, year: number) {\n    Logger.debug('ReportsService.downloadMultipleOutputReports');\n    const workbook = new Workbook();\n    const outcomeReports = await this.outcomeReportModel\n      .find({\n        year,\n        isDeleted: false,\n      })\n      .exec();\n    console.log('outcomeReports in multiple = ', outcomeReports);\n    for (const report of outcomeReports) {\n      await this.downloadOutcomeReport(res, report, workbook);\n    }\n    res.set({\n      'Access-Control-Expose-Headers': 'Content-Disposition',\n      'Content-Disposition':\n        'attachment; filename=' + 'All Outcome Reports-' + year + '.xlsx',\n    });\n    res.contentType(\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    );\n    await workbook.xlsx.write(res);\n  }\n\n  async addInvoiceInOutputReport(outputReportId: string, user: any, invoiceId) {\n    Logger.debug('ReportsService.addInvoiceInOutputReport');\n    await this.checkIfOutputReportExists(outputReportId);\n\n    return this.outputReportModel\n      .findOneAndUpdate(\n        {\n          outputReportId,\n          isDeleted: false,\n        },\n        {\n          // ...invoiceId,\n          invoiceId: new Types.ObjectId(invoiceId.invoiceId),\n          updatedBy: user._id,\n        },\n        { new: true },\n      )\n      .exec();\n  }\n\n  async addInvoiceInOutcomeReport(\n    outcomeReportId: string,\n    user: any,\n    invoiceId,\n  ) {\n    Logger.debug('ReportsService.addInvoiceInOutcomeReport');\n    await this.checkIfOutcomeReportExists(outcomeReportId);\n\n    return this.outcomeReportModel\n      .findOneAndUpdate(\n        {\n          outcomeReportId,\n          isDeleted: false,\n        },\n        {\n          // ...invoiceId,\n          invoiceId: new Types.ObjectId(invoiceId.invoiceId),\n          updatedBy: user._id,\n        },\n        { new: true },\n      )\n      .exec();\n  }\n\n  /**Upload additional information file into S3 bucket */\n  async uploadFile(file) {\n    Logger.debug('ReportsService.uploadFile');\n\n    if (!file)\n      throw new UnprocessableEntityException(errorMessages.FILE_SELECT);\n\n    const { originalname } = file;\n    const bucketS3Name = this.configService.get('AWS_S3_BUCKET');\n    return await this.uploadS3(\n      file.buffer,\n      bucketS3Name,\n      originalname,\n      file.mimetype,\n    );\n  }\n\n  async uploadS3(file, bucket, fileName, mimetype) {\n    Logger.debug('ReportsService.uploadS3');\n\n    const s3 = this.getS3();\n\n    const params = {\n      Bucket: bucket,\n      // Key: String(name),\n      Key: `${uuidv4()}-${fileName}`,\n      Body: file,\n      // ACL: 'public-read',\n      ContentType: mimetype,\n      ContentDisposition: 'inline',\n      CreateBucketConfiguration: {\n        LocationConstraint: this.configService.get('AWS_S3_REGION'),\n      },\n    };\n    console.log('params = ', params);\n    try {\n      const s3Response = await s3.upload(params).promise();\n\n      console.log('s3Response = ', s3Response);\n      return {\n        url: s3Response.Location,\n        key: s3Response.Key,\n        fileName,\n      };\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  getS3() {\n    Logger.debug('ReportsService.getS3');\n\n    return new S3({\n      accessKeyId: this.configService.get('AWS_ACCESS_KEY_ID'),\n      secretAccessKey: this.configService.get('AWS_SECRET_ACCESS_KEY'),\n    });\n  }\n\n  /**Getting all files uploaded to S3 Bucket */\n  async getAllFilesFromS3() {\n    Logger.debug('ReportsService.getAllFilesFromS3');\n    const s3 = this.getS3();\n    const params = {\n      Bucket: this.configService.get('AWS_S3_BUCKET'),\n    };\n    try {\n      const s3FilesData = await s3.listObjects(params).promise();\n      console.log('s3FilesData = ', s3FilesData);\n      return s3FilesData.Contents;\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  /**Getting each file by key uploaded to S3 Bucket */\n  async getEachFileByKeyFromS3(fileKey: string) {\n    Logger.debug('ReportsService.getEachFileByKeyFromS3');\n    console.log('fileKey in service = ', fileKey);\n    const s3 = this.getS3();\n    const params = {\n      Bucket: this.configService.get('AWS_S3_BUCKET'),\n      Key: fileKey,\n    };\n    try {\n      const fileFetchedFromS3 = await s3.getObject(params).promise();\n      console.log('fileFetchedFromS3 = ', fileFetchedFromS3);\n      return fileFetchedFromS3;\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  /**Deleting existing files from S3 */\n  async deletePublicFile(fileKey: string) {\n    // const file = await this.outputReportModel.findOne({ additionalInfoFile: fileId });\n    const s3 = new S3();\n    await s3\n      .deleteObject({\n        Bucket: this.configService.get('AWS_S3_BUCKET'),\n        Key: fileKey,\n      })\n      .promise();\n    // await this.publicFilesRepository.delete(fileId);\n  }\n  /**Download file from S3 */\n  async getSignedUrl(fileKey: string) {\n    console.log('inside getSignedUrl');\n    const s3 = new S3({\n      signatureVersion: 'v4',\n      region: this.configService.get('AWS_S3_REGION'),\n    });\n    const params = {\n      Bucket: this.configService.get('AWS_S3_BUCKET'),\n      Key: fileKey,\n      Expires: 3600, //1hr expiration\n    };\n\n    return s3.getSignedUrl('getObject', params);\n  }\n\n  /**Upload additional info files to Azure Blob Storage */\n  containerName = 'upload-files';\n\n  async getBlobClient(imageName: string) {\n    Logger.debug('ReportsService.getBlobClient');\n    console.log('imageName = ', imageName);\n    const blobClientService = BlobServiceClient.fromConnectionString(\n      this.configService.get('AZURE_STORAGE_CONNECTION_STRING'),\n    );\n    // Get a reference to a container\n    const containerClient = blobClientService.getContainerClient(\n      this.containerName,\n    );\n    console.log('containerClient = ', containerClient);\n\n    const list = await blobClientService.listContainers();\n    const containerItem = await list.next();\n    console.log('containerItem = ', containerItem);\n\n    if (containerItem.done) {\n      console.log('\\nCreating container...');\n      console.log('\\t', this.containerName);\n      const createContainerResponse = await containerClient.create();\n      console.log(\n        `Container was created successfully.\\n\\trequestId:${createContainerResponse.requestId}\\n\\tURL: ${containerClient.url}`,\n      );\n    }\n    const blobClient = containerClient.getBlockBlobClient(imageName);\n    console.log('blobClient = ', blobClient);\n    return blobClient;\n  }\n\n  async uploadSingleFileToAzureBlob(file: Express.Multer.File) {\n    Logger.debug('ReportsService.uploadSingleFileToAzureBlob');\n    //allowed doc and pdf with 5MB size\n    if (!mimetypes.includes(file.mimetype)) {\n      throw new UnprocessableEntityException(\n        errorMessages.UPLOAD_VALID_FILE_TYPE,\n      );\n    } else if (\n      (file.mimetype ==\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document' ||\n        file.mimetype == 'application/pdf') &&\n      file.size > 5000000\n    ) {\n      throw new UnprocessableEntityException(errorMessages.MAX_5MB_FILE);\n    }\n    file.originalname = `${file.originalname} - ${uuidv4()}`;\n    console.log('file.originalname>>>>>', file.originalname);\n    const blobClient = await this.getBlobClient(file.originalname);\n\n    console.log('blobClient in uploadToAzureBlob = ', blobClient);\n    console.log('file in upload = ', file);\n\n    const listOfPreviousBlobs = await this.getAllAzureBlobs();\n    console.log('listOfPreviousBlobs = ', listOfPreviousBlobs);\n\n    let isExist = false;\n\n    for (const data of listOfPreviousBlobs) {\n      if (file.originalname === data.name) {\n        isExist = true;\n      }\n    }\n    if (isExist) {\n      throw new ConflictException(\n        file.originalname + errorMessages.BLOB_NAME_ALREADY_EXISTS,\n      );\n    } else {\n      const responseAfterUpload = await blobClient.uploadData(file.buffer);\n      console.log('responseAfterUpload = ', responseAfterUpload);\n\n      return {\n        requestId: responseAfterUpload.requestId,\n        fileName: file.originalname,\n      };\n    }\n  }\n\n  async getAllAzureBlobs() {\n    Logger.debug('ReportsService.getAllAzureBlobs');\n    const blobClientService = BlobServiceClient.fromConnectionString(\n      this.configService.get('AZURE_STORAGE_CONNECTION_STRING'),\n    );\n    // Get a reference to a container\n    const containerClient = blobClientService.getContainerClient(\n      this.containerName,\n    );\n    const blobs = containerClient.listBlobsFlat();\n    const blobsArray = [];\n    for await (const blob of blobs) {\n      // console.log(`Blob ${i++}: ${blob.name}`);\n      console.log('blob = ', blob);\n      const tempBlockBlobClient = containerClient.getBlockBlobClient(blob.name);\n\n      // Display blob name and URL\n      console.log(\n        `\\n\\tname: ${blob.name}\\n\\tURL: ${tempBlockBlobClient.url}\\n`,\n      );\n\n      blobsArray.push({\n        name: blob.name,\n        url: tempBlockBlobClient.url,\n      });\n    }\n    return blobsArray;\n  }\n\n  //Get the steam of file from the Azure Blob Storage\n  async readSingleFileFromAzureBlob(fileName: string) {\n    Logger.debug('ReportsService.readSingleFileFromAzureBlob');\n    console.log('fileName in read file = ', fileName);\n    // const blobClient = await this.getBlobClient(encodeURI(fileName));\n    // const blobClient = await this.getBlobClient(fileName);\n    const blobClientService = BlobServiceClient.fromConnectionString(\n      this.configService.get('AZURE_STORAGE_CONNECTION_STRING'),\n    );\n    // Get a reference to a container\n    const containerClient = blobClientService.getContainerClient(\n      this.containerName,\n    );\n    console.log('containerClient = ', containerClient);\n    // let blobName = encodeURI(fileName);\n    const blobClient = containerClient.getBlockBlobClient(fileName);\n    console.log('blobClient readSingleFileFromAzureBlob = ', blobClient);\n\n    const blobDownloaded = await blobClient.download(0);\n    console.log('blobDownloaded = ', blobDownloaded);\n\n    return blobDownloaded.readableStreamBody;\n  }\n\n  //Get all created containers\n  async getAllAzureContainers() {\n    Logger.debug('ReportsService.getAllAzureContainers');\n\n    const blobClientService = BlobServiceClient.fromConnectionString(\n      this.configService.get('AZURE_STORAGE_CONNECTION_STRING'),\n    );\n    const list = await blobClientService.listContainers();\n    let containerItem = await list.next();\n    console.log('containerItem = ', containerItem);\n    let i = 1;\n    while (!containerItem.done) {\n      console.log(`Container ${i++}: ${containerItem.value.name}`);\n      containerItem = await list.next();\n    }\n  }\n  // Delete container\n  async deleteContainer(containerName: string) {\n    Logger.debug('ReportsService.deleteContainer');\n\n    console.log('\\nDeleting container...');\n\n    const blobClientService = BlobServiceClient.fromConnectionString(\n      this.configService.get('AZURE_STORAGE_CONNECTION_STRING'),\n    );\n\n    // Get a reference to a container\n    console.log('this.containerName = ', this.containerName);\n    const containerClient = blobClientService.getContainerClient(containerName);\n    console.log('found containerClient = ', containerClient);\n    const deleteContainerResponse = await containerClient.deleteIfExists();\n\n    console.log(\n      'Container was deleted successfully. requestId: ',\n      deleteContainerResponse.requestId,\n    );\n  }\n\n  async deleteOutputFileFromAzure(\n    filename: string,\n    requestId: string,\n    reportId: string,\n    user: any,\n  ) {\n    Logger.debug('ReportsService.deleteOutputFileFromAzure');\n\n    const outputReport = await this.outputReportModel\n      .findOne({\n        isDeleted: false,\n        outputReportId: reportId,\n      })\n      .exec();\n    if (!outputReport)\n      throw new NotFoundException(errorMessages.OUTPUT_REPORT_NOT_FOUND);\n\n    await this.outputReportModel\n      .findOneAndUpdate(\n        {\n          isDeleted: false,\n          outputReportId: reportId,\n        },\n        { additionalInfoFile: null },\n        { new: true },\n      )\n      .exec();\n\n    const blobClient = await this.getBlobClient(filename);\n    await blobClient.deleteIfExists();\n\n    await this.melpService.addActivityLog(\n      user,\n      `Output report ${outputReport.outputReportCode} updated successfully.`,\n    );\n  }\n\n  async deleteOutcomeFileFromAzure(\n    filename: string,\n    requestId: string,\n    reportId: string,\n    user: any,\n  ) {\n    Logger.debug('ReportsService.deleteOutcomeFileFromAzure');\n    const outcomeReport = await this.outcomeReportModel\n      .findOne({\n        isDeleted: false,\n        outcomeReportId: reportId,\n      })\n      .exec();\n    if (!outcomeReport)\n      throw new NotFoundException(errorMessages.OUTCOME_REPORT_NOT_FOUND);\n\n    await this.outcomeReportModel\n      .findOneAndUpdate(\n        {\n          isDeleted: false,\n          outcomeReportId: reportId,\n        },\n        { additionalInfoFile: null },\n        { new: true },\n      )\n      .exec();\n\n    const blobClient = await this.getBlobClient(filename);\n    await blobClient.deleteIfExists();\n\n    await this.melpService.addActivityLog(\n      user,\n      `Outcome report ${outcomeReport.outcomeReportCode} updated successfully.`,\n    );\n  }\n\n  //General user institute wise all output reports\n  async allOutputReportsForGeneralUser(\n    pageSize: number,\n    pageIndex: number,\n    searchKeyword: string,\n    // status\n    sortKey: string,\n    sortDirection: number,\n    year: number,\n    user,\n  ) {\n    Logger.debug('ReportsService.allOutputReportsForGeneralUser');\n    const tempWorkplanList = [];\n    const { regex, sortQuery } = await this.commonFunctionForSearchSort(\n      searchKeyword,\n      sortKey,\n      sortDirection,\n    );\n    let total, reportList, statusName;\n    if (user.networkId) {\n      total = (\n        await this.outputReportModel\n          .find({\n            year,\n            $and: [\n              { networkId: user.networkId },\n              {\n                $or: [{ outputReportCode: regex }],\n              },\n            ],\n            isDeleted: false,\n          })\n          .exec()\n      ).length;\n\n      reportList = await this.outputReportModel\n        .find({\n          year,\n\n          $and: [\n            { networkId: user.networkId },\n            {\n              $or: [{ outputReportCode: regex }],\n            },\n          ],\n          isDeleted: false,\n        })\n        .skip(pageIndex * pageSize)\n        .limit(pageSize)\n        .sort(sortQuery)\n        .exec();\n\n      const networkName = await this.networkService.getNetworkNameById(\n        user.networkId,\n      );\n      for (const wp of reportList) {\n        statusName = await this.userService.getStatusName(\n          wp.outputReportStatus,\n        );\n        wp.networkName = networkName;\n        wp.statusName = statusName;\n        tempWorkplanList.push(wp);\n      }\n    } else if (user.partnerId) {\n      total = (\n        await this.outputReportModel\n          .find({\n            year,\n            $and: [\n              { partnerId: user.partnerId },\n              {\n                $or: [{ outputReportCode: regex }],\n              },\n            ],\n            isDeleted: false,\n          })\n          .exec()\n      ).length;\n\n      reportList = await this.outputReportModel\n        .find({\n          year,\n\n          $and: [\n            { partnerId: user.partnerId },\n            {\n              $or: [{ outputReportCode: regex }],\n            },\n          ],\n          isDeleted: false,\n        })\n        .skip(pageIndex * pageSize)\n        .limit(pageSize)\n        .sort(sortQuery)\n        .exec();\n\n      const partnerName = await this.partnerService.getPartnerInstituteNameById(\n        user.partnerId,\n      );\n      for (const wp of reportList) {\n        wp.partnerName = partnerName;\n        statusName = await this.userService.getStatusName(\n          wp.outputReportStatus,\n        );\n        wp.statusName = statusName;\n        tempWorkplanList.push(wp);\n      }\n    }\n\n    return { reportsList: tempWorkplanList, total: Math.ceil(total / 10) };\n  }\n\n  async allOutcomeReportsForGeneralUser(\n    pageSize: number,\n    pageIndex: number,\n    searchKeyword: string,\n    // status\n    sortKey: string,\n    sortDirection: number,\n    year: number,\n    user,\n  ) {\n    Logger.debug('ReportsService.allOutcomeReportsForGeneralUser');\n    const sortObject = {};\n\n    const stype = sortKey;\n    const sdir = sortDirection;\n    sortObject[stype] = sdir;\n    const regex = new RegExp(searchKeyword, 'i');\n\n    let reportList, statusName, count;\n\n    if (user.networkId) {\n      reportList = await this.outcomeReportModel\n        .aggregate([\n          {\n            $match: {\n              $and: [\n                {\n                  year,\n                  isDeleted: false,\n                  networkId: user.networkId,\n                },\n                {\n                  $or: [{ outcomeReportCode: regex }],\n                },\n              ],\n            },\n          },\n          {\n            $lookup: {\n              from: 'activityproposals',\n              let: { id: '$proposalId' },\n              pipeline: [\n                {\n                  $match: {\n                    $expr: {\n                      $and: [\n                        { $eq: ['$_id', '$$id'] },\n                        { $eq: ['$isDeleted', false] },\n                      ],\n                    },\n                  },\n                },\n              ],\n              as: 'proposalData',\n            },\n          },\n          { $unwind: '$proposalData' },\n          { $sort: sortObject },\n          {\n            $facet: {\n              records: [{ $skip: pageIndex * pageSize }, { $limit: pageSize }],\n            },\n          },\n        ])\n        .exec();\n\n      count = reportList[0].records.length;\n\n      const networkName = await this.networkService.getNetworkNameById(\n        user.networkId,\n      );\n      for (const data of reportList[0].records) {\n        statusName = await this.userService.getStatusName(\n          data.outcomeReportStatus,\n        );\n        data.networkName = networkName;\n        data.statusName = statusName;\n      }\n    } else if (user.partnerId) {\n      reportList = await this.outcomeReportModel\n        .aggregate([\n          {\n            $match: {\n              $and: [\n                {\n                  year,\n                  isDeleted: false,\n                  partnerId: user.partnerId,\n                },\n                {\n                  $or: [{ outcomeReportCode: regex }],\n                },\n              ],\n            },\n          },\n          {\n            $lookup: {\n              from: 'activityproposals',\n              let: { id: '$proposalId' },\n              pipeline: [\n                {\n                  $match: {\n                    $expr: {\n                      $and: [\n                        { $eq: ['$_id', '$$id'] },\n                        { $eq: ['$isDeleted', false] },\n                      ],\n                    },\n                  },\n                },\n              ],\n              as: 'proposalData',\n            },\n          },\n          { $unwind: '$proposalData' },\n          { $sort: sortObject },\n          {\n            $facet: {\n              records: [{ $skip: pageIndex * pageSize }, { $limit: pageSize }],\n            },\n          },\n        ])\n        .exec();\n\n      count = reportList[0].records.length;\n\n      const partnerName = await this.partnerService.getPartnerInstituteNameById(\n        user.partnerId,\n      );\n      for (const data of reportList[0].records) {\n        data.partnerName = partnerName;\n        statusName = await this.userService.getStatusName(\n          data.outcomeReportStatus,\n        );\n        data.statusName = statusName;\n      }\n    }\n\n    return { reportsList: reportList[0].records, total: Math.ceil(count / 10) };\n  }\n\n  async manageNetworkOutputReports(\n    pageSize: number,\n    pageIndex: number,\n    searchKeyword: string,\n    // status\n    sortKey: string,\n    sortDirection: number,\n    year: number,\n    // user,\n  ) {\n    Logger.debug('ReportsService.manageNetworkOutputReports');\n    try {\n      const { regex, sortQuery } = await this.commonFunctionForSearchSort(\n        searchKeyword,\n        sortKey,\n        sortDirection,\n      );\n      const inprogressStatusId = await this.userService.getStatusId(\n        StatusEnum.IN_PROGRESS,\n      );\n      const tempList = [];\n      let networkName, statusName;\n\n      const total = (\n        await this.outputReportModel\n          .find({\n            year,\n            $and: [\n              {\n                networkId: { $ne: null },\n                outputReportStatus: { $ne: inprogressStatusId },\n              },\n              {\n                $or: [{ outputReportCode: regex }],\n              },\n            ],\n            isDeleted: false,\n          })\n          .exec()\n      ).length;\n\n      const reportList = await this.outputReportModel\n        .find({\n          year,\n\n          $and: [\n            {\n              networkId: { $ne: null },\n              outputReportStatus: { $ne: inprogressStatusId },\n            },\n            {\n              $or: [{ outputReportCode: regex }],\n            },\n          ],\n          isDeleted: false,\n        })\n        .skip(pageIndex * pageSize)\n        .limit(pageSize)\n        .sort(sortQuery)\n        .exec();\n\n      for (const report of reportList) {\n        networkName = await this.networkService.getNetworkNameById(\n          report.networkId,\n        );\n\n        statusName = await this.userService.getStatusName(\n          report.outputReportStatus,\n        );\n        console.log('statusName = ', statusName);\n\n        report.networkName = networkName;\n        report.statusName = statusName;\n        tempList.push(report);\n      }\n\n      return { reportsList: tempList, total: Math.ceil(total / 10) };\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async managePartnerOutputReports(\n    pageSize: number,\n    pageIndex: number,\n    searchKeyword: string,\n    // status\n    sortKey: string,\n    sortDirection: number,\n    year: number,\n    // user,\n  ) {\n    Logger.debug('ReportsService.managePartnerOutputReports');\n    try {\n      const { regex, sortQuery } = await this.commonFunctionForSearchSort(\n        searchKeyword,\n        sortKey,\n        sortDirection,\n      );\n      const inprogressStatusId = await this.userService.getStatusId(\n        StatusEnum.IN_PROGRESS,\n      );\n      const tempList = [];\n      let partnerName, statusName;\n\n      const total = (\n        await this.outputReportModel\n          .find({\n            year,\n            $and: [\n              {\n                partnerId: { $ne: null },\n                outputReportStatus: { $ne: inprogressStatusId },\n              },\n              {\n                $or: [{ outputReportCode: regex }],\n              },\n            ],\n            isDeleted: false,\n          })\n          .exec()\n      ).length;\n\n      const reportList = await this.outputReportModel\n        .find({\n          year,\n\n          $and: [\n            {\n              partnerId: { $ne: null },\n              outputReportStatus: { $ne: inprogressStatusId },\n            },\n            {\n              $or: [{ outputReportCode: regex }],\n            },\n          ],\n          isDeleted: false,\n        })\n        .skip(pageIndex * pageSize)\n        .limit(pageSize)\n        .sort(sortQuery)\n        .exec();\n\n      for (const report of reportList) {\n        partnerName = await this.partnerService.getPartnerInstituteNameById(\n          report.partnerId,\n        );\n\n        statusName = await this.userService.getStatusName(\n          report.outputReportStatus,\n        );\n        console.log('statusName = ', statusName);\n\n        report.partnerName = partnerName;\n        report.statusName = statusName;\n        tempList.push(report);\n      }\n\n      return { reportsList: tempList, total: Math.ceil(total / 10) };\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async manageNetworkOutcomeReports(\n    pageSize: number,\n    pageIndex: number,\n    searchKeyword: string,\n    // status\n    sortKey: string,\n    sortDirection: number,\n    year: number,\n    // user,\n  ) {\n    Logger.debug('ReportsService.manageNetworkOutcomeReports');\n    try {\n      const sortObject = {};\n\n      const stype = sortKey;\n      const sdir = sortDirection;\n      sortObject[stype] = sdir;\n      const regex = new RegExp(searchKeyword, 'i');\n\n      const inprogressStatusId = await this.userService.getStatusId(\n        StatusEnum.IN_PROGRESS,\n      );\n      let networkName, statusName;\n\n      const reportList = await this.outcomeReportModel\n        .aggregate([\n          {\n            $match: {\n              $and: [\n                {\n                  year,\n                  isDeleted: false,\n                  networkId: { $ne: null },\n                  outcomeReportStatus: { $ne: inprogressStatusId },\n                },\n                {\n                  $or: [{ outcomeReportCode: regex }],\n                },\n              ],\n            },\n          },\n          {\n            $lookup: {\n              from: 'activityproposals',\n              let: { id: '$proposalId' },\n              pipeline: [\n                {\n                  $match: {\n                    $expr: {\n                      $and: [\n                        { $eq: ['$_id', '$$id'] },\n                        { $eq: ['$isDeleted', false] },\n                      ],\n                    },\n                  },\n                },\n              ],\n              as: 'proposalData',\n            },\n          },\n          { $unwind: '$proposalData' },\n          { $sort: sortObject },\n          {\n            $facet: {\n              records: [{ $skip: pageIndex * pageSize }, { $limit: pageSize }],\n            },\n          },\n        ])\n        .exec();\n      const count = reportList[0].records.length;\n\n      for (const report of reportList[0].records) {\n        networkName = await this.networkService.getNetworkNameById(\n          report.networkId,\n        );\n\n        statusName = await this.userService.getStatusName(\n          report.outcomeReportStatus,\n        );\n        console.log('statusName = ', statusName);\n\n        report.networkName = networkName;\n        report.statusName = statusName;\n      }\n\n      return {\n        reportsList: reportList[0].records,\n        total: Math.ceil(count / 10),\n      };\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async managePartnerOutcomeReports(\n    pageSize: number,\n    pageIndex: number,\n    searchKeyword: string,\n    // status\n    sortKey: string,\n    sortDirection: number,\n    year: number,\n    // user,\n  ) {\n    Logger.debug('ReportsService.managePartnerOutcomeReports');\n    try {\n      const sortObject = {};\n\n      const stype = sortKey;\n      const sdir = sortDirection;\n      sortObject[stype] = sdir;\n      const regex = new RegExp(searchKeyword, 'i');\n\n      const inprogressStatusId = await this.userService.getStatusId(\n        StatusEnum.IN_PROGRESS,\n      );\n      let partnerName, statusName;\n\n      const reportList = await this.outcomeReportModel\n        .aggregate([\n          {\n            $match: {\n              $and: [\n                {\n                  year,\n                  isDeleted: false,\n                  partnerId: { $ne: null },\n                  outcomeReportStatus: { $ne: inprogressStatusId },\n                },\n                {\n                  $or: [{ outcomeReportCode: regex }],\n                },\n              ],\n            },\n          },\n          {\n            $lookup: {\n              from: 'activityproposals',\n              let: { id: '$proposalId' },\n              pipeline: [\n                {\n                  $match: {\n                    $expr: {\n                      $and: [\n                        { $eq: ['$_id', '$$id'] },\n                        { $eq: ['$isDeleted', false] },\n                      ],\n                    },\n                  },\n                },\n              ],\n              as: 'proposalData',\n            },\n          },\n          { $unwind: '$proposalData' },\n          { $sort: sortObject },\n          {\n            $facet: {\n              records: [{ $skip: pageIndex * pageSize }, { $limit: pageSize }],\n            },\n          },\n        ])\n        .exec();\n\n      const count = reportList[0].records.length;\n\n      for (const report of reportList[0].records) {\n        partnerName = await this.partnerService.getPartnerInstituteNameById(\n          report.partnerId,\n        );\n\n        statusName = await this.userService.getStatusName(\n          report.outcomeReportStatus,\n        );\n        console.log('statusName = ', statusName);\n\n        report.partnerName = partnerName;\n        report.statusName = statusName;\n      }\n\n      return {\n        reportsList: reportList[0].records,\n        total: Math.ceil(count / 10),\n      };\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async updateOutputReportApprovedCount(\n    approvedCount: number,\n    outputReportId: string,\n  ) {\n    Logger.debug('ReportsService.updateOutputReportApprovedCount');\n    return this.outputReportModel\n      .findOneAndUpdate(\n        { outputReportId, isDeleted: false },\n        { approvedCount },\n        { new: true },\n      )\n      .exec();\n  }\n\n  async updateOutcomeReportApprovedCount(\n    approvedCount: number,\n    outcomeReportId: string,\n  ) {\n    Logger.debug('ReportsService.updateOutcomeReportApprovedCount');\n    return this.outcomeReportModel\n      .findOneAndUpdate(\n        { outcomeReportId, isDeleted: false },\n        { approvedCount },\n        { new: true },\n      )\n      .exec();\n  }\n\n  async setApprovedAtTimeOfOutputReport(\n    outputReportId: string,\n    approvedAt: Date,\n  ) {\n    Logger.debug('ReportsService.setApprovedAtTimeOfOutputReport');\n    return this.outputReportModel\n      .findOneAndUpdate(\n        {\n          outputReportId,\n          isDeleted: false,\n        },\n        { approvedAt },\n        { new: true },\n      )\n      .exec();\n  }\n\n  async setApprovedAtTimeOfOutcomeReport(\n    outcomeReportId: string,\n    approvedAt: Date,\n  ) {\n    Logger.debug('ReportsService.setApprovedAtTimeOfOutcomeReport');\n    return this.outcomeReportModel\n      .findOneAndUpdate(\n        {\n          outcomeReportId,\n          isDeleted: false,\n        },\n        { approvedAt },\n        { new: true },\n      )\n      .exec();\n  }\n\n  async setSubmittedAtTimeOfOutputReport(\n    outputReportId: string,\n    submittedAt: Date,\n  ) {\n    Logger.debug('ReportsService.setSubmittedAtTimeOfOutputReport');\n    return this.outputReportModel\n      .findOneAndUpdate(\n        {\n          outputReportId,\n          isDeleted: false,\n        },\n        { submittedAt },\n        { new: true },\n      )\n      .exec();\n  }\n\n  async setSubmittedAtTimeOfOutcomeReport(\n    outcomeReportId: string,\n    submittedAt: Date,\n  ) {\n    Logger.debug('ReportsService.setSubmittedAtTimeOfOutcomeReport');\n    return this.outcomeReportModel\n      .findOneAndUpdate(\n        {\n          outcomeReportId,\n          isDeleted: false,\n        },\n        { submittedAt },\n        { new: true },\n      )\n      .exec();\n  }\n\n  async finalSaveOutputReport(reportId: string) {\n    Logger.debug('ReportsService.finalSaveOutputReport');\n    const report = await this.checkIfOutputReportExists(reportId);\n    const approvedStatusId = await this.userService.getStatusId(\n      StatusEnum.APPROVED,\n    );\n    if (!report)\n      throw new NotFoundException(errorMessages.OUTPUT_REPORT_NOT_FOUND);\n    else {\n      return this.outputReportModel\n        .findOneAndUpdate(\n          {\n            outputReportId: reportId,\n            isDeleted: false,\n          },\n          {\n            outputReportStatus: approvedStatusId,\n            statusName: StatusEnum.APPROVED,\n          },\n          { new: true },\n        )\n        .exec();\n    }\n  }\n\n  async finalSaveOutcomeReport(reportId: string) {\n    Logger.debug('ReportsService.finalSaveOutcomeReport');\n    const report = await this.checkIfOutcomeReportExists(reportId);\n    const approvedStatusId = await this.userService.getStatusId(\n      StatusEnum.APPROVED,\n    );\n    if (!report)\n      throw new NotFoundException(errorMessages.OUTCOME_REPORT_NOT_FOUND);\n    else {\n      return this.outcomeReportModel\n        .findOneAndUpdate(\n          {\n            outcomeReportId: reportId,\n            isDeleted: false,\n          },\n          {\n            outcomeReportStatus: approvedStatusId,\n            statusName: StatusEnum.APPROVED,\n          },\n          { new: true },\n        )\n        .exec();\n    }\n  }\n\n  /**Network management API for all output report download */\n  async downloadGeneralUserMultipleOutputReport(\n    res,\n    year: number,\n    isNetwork: boolean,\n  ) {\n    Logger.debug('ReportsService.downloadGeneralUserMultipleOutputReport');\n    const workbook = new Workbook();\n\n    let reportsList;\n\n    const inProgressStatusId = await this.userService.getStatusId(\n      StatusEnum.IN_PROGRESS,\n    );\n\n    if (isNetwork) {\n      reportsList = await this.outputReportModel\n        .find({\n          year,\n          isDeleted: false,\n          networkId: { $ne: null },\n          partnerId: { $eq: null },\n          outputReportStatus: { $ne: inProgressStatusId },\n        })\n        .exec();\n    } else {\n      reportsList = await this.outputReportModel\n        .find({\n          year,\n          isDeleted: false,\n          partnerId: { $ne: null },\n          networkId: { $eq: null },\n          outputReportStatus: { $ne: inProgressStatusId },\n        })\n        .exec();\n    }\n\n    console.log('outputReport in multiple general user = ', reportsList);\n\n    for (const report of reportsList) {\n      await this.downloadOutputReport(res, report, workbook);\n    }\n\n    res.set({\n      'Access-Control-Expose-Headers': 'Content-Disposition',\n      'Content-Disposition':\n        'attachment; filename=' + 'All Output Reports-' + year + '.xlsx',\n    });\n    res.contentType(\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    );\n    await workbook.xlsx.write(res);\n  }\n\n  /**Network management API for all outcome report download */\n  async downloadGeneralUserMultipleOutcomeReport(\n    res,\n    year: number,\n    isNetwork: boolean,\n  ) {\n    Logger.debug('ReportsService.downloadGeneralUserMultipleOutcomeReport');\n    const workbook = new Workbook();\n\n    let reportsList;\n\n    const inProgressStatusId = await this.userService.getStatusId(\n      StatusEnum.IN_PROGRESS,\n    );\n\n    if (isNetwork) {\n      reportsList = await this.outcomeReportModel\n        .find({\n          year,\n          isDeleted: false,\n          networkId: { $ne: null },\n          partnerId: { $eq: null },\n          outcomeReportStatus: { $ne: inProgressStatusId },\n        })\n        .exec();\n    } else {\n      reportsList = await this.outcomeReportModel\n        .find({\n          year,\n          isDeleted: false,\n          partnerId: { $ne: null },\n          networkId: { $eq: null },\n          outcomeReportStatus: { $ne: inProgressStatusId },\n        })\n        .exec();\n    }\n\n    console.log('outcome reports in multiple general user = ', reportsList);\n\n    for (const report of reportsList) {\n      await this.downloadOutcomeReport(res, report, workbook);\n    }\n\n    res.set({\n      'Access-Control-Expose-Headers': 'Content-Disposition',\n      'Content-Disposition':\n        'attachment; filename=' + 'All Outcome Reports-' + year + '.xlsx',\n    });\n    res.contentType(\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    );\n    await workbook.xlsx.write(res);\n  }\n\n  async outputReportByActivityCode(activityCode: string) {\n    Logger.debug('ReportsService.outputReportByActivityCode');\n    const foundReport = await this.outputReportModel\n      .findOne({ activityCode, isDeleted: false })\n      .exec();\n    if (foundReport)\n      throw new ConflictException(errorMessages.OUTPUT_REPORT_EXISTS);\n    else return foundReport;\n  }\n\n  async outcomeReportByActivityCode(activityCode: string) {\n    Logger.debug('ReportsService.outcomeReportByActivityCode');\n    const foundReport = await this.outcomeReportModel\n      .findOne({ activityCode, isDeleted: false })\n      .exec();\n    if (foundReport)\n      throw new ConflictException(errorMessages.OUTCOME_REPORT_EXISTS);\n    else return foundReport;\n  }\n\n  /**To check if output report is approved for that particular year */\n  async validateOnYearForOutcomeReport(year: number, user: any) {\n    Logger.debug('ReportsService.validateOnYearForOutcomeReport');\n    const approvedStatusId = await this.userService.getStatusId(\n      StatusEnum.APPROVED,\n    );\n    const foundOutputReport = await this.outputReportModel\n      .findOne({\n        year,\n        isDeleted: false,\n        networkId: user.networkId,\n        partnerId: user.partnerId,\n      })\n      .exec();\n\n    if (!foundOutputReport)\n      throw new NotFoundException(errorMessages.OUTPUT_REPORT_NOT_FOUND);\n    else if (foundOutputReport.outputReportStatus !== approvedStatusId)\n      throw new UnprocessableEntityException(\n        errorMessages.OUTPUT_REPORT_NOT_APPROVED,\n      );\n    else return foundOutputReport;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/reports/schema/outcomeReport.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/reports/schema/outputReport.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/staticSurveys/dto/activateOrDeactivateSurvey.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/staticSurveys/dto/entrySurveyResponse.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/staticSurveys/dto/exitSurveyResponse.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/staticSurveys/dto/outcomeSurveyResponse.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/staticSurveys/dto/surveyForm.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/staticSurveys/dto/surveyResponse.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/staticSurveys/enum/ageGroup.enum.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/staticSurveys/enum/benefitsLevel.enum.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/staticSurveys/enum/degreeOfKnowledgeGained.enum.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/staticSurveys/enum/degreeOfNewKnowledge.enum.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/staticSurveys/enum/expectationLevel.enum.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/staticSurveys/enum/gender.enum.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/staticSurveys/enum/knowledgeApplication.enum.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/staticSurveys/enum/knowledgeGained.enum.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/staticSurveys/enum/knowledgeRating.enum.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/staticSurveys/enum/region.enum.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/staticSurveys/enum/relevanceLevel.enum.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/staticSurveys/enum/typeOfInstitution.enum.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/staticSurveys/schema/baseSurveyForm.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/staticSurveys/schema/entrySurveyForm.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/staticSurveys/schema/entrySurveyResponse.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/staticSurveys/schema/exitSurveyForm.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/staticSurveys/schema/exitSurveyResponse.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/staticSurveys/schema/outcomeSurveyForm.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/staticSurveys/schema/outcomeSurveyResponse.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/staticSurveys/staticSurvey.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/staticSurveys/staticSurvey.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/staticSurveys/staticSurvey.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/surveyjs/dto/add-form-value.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/surveyjs/dto/add-surveyForm.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/surveyjs/dto/edit-surveyForm.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/surveyjs/schema/surveyjsForm.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/surveyjs/schema/surveyjsResponse.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/surveyjs/surveyjs.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/surveyjs/surveyjs.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/surveyjs/surveyjs.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/users/dto/create-capnetUser.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/users/dto/create-networkUser.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/users/dto/create-partnerUser.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/users/dto/update-user.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/users/enum/role.enum.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/users/guards/roles.guard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/users/schema/roles.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/users/schema/user.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/users/user.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/users/user.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/users/user.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/utils/error-messages.utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/utils/file-upload.util.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/workplans/dto/create-workplan.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/workplans/schema/workplan.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/workplans/schema/workplan_activities.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/workplans/workplan.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/workplans/workplan.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/src/workplans/workplan.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/nmaheshwari/Desktop/CAPNET-MEL/PR59-CAP-NET-MEL-Web-Back/test/app.e2e-spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]